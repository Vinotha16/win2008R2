---
  - name: Include Actualfact
    include: tasks/actualfact_amazon2018.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

####REMEDY####
  - name: Create /etc/modprobe.d/CIS.conf with root ownership 
    file: path=/etc/modprobe.d/CIS.conf state=touch owner=root group=root mode=0600
    changed_when: false
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - freevxfs
      - 1.1.1.2
      - jffs2
      - 1.1.1.3
      - hfs
      - 1.1.1.4
      - hfsplus
      - 1.1.1.5
      - squashfs
      - 1.1.1.6
      - udf
      - 1.1.1.7
      - fat
      - 1.1.1.8
      - one
      - dccp
      - 3.5.1
      - sctp
      - 3.5.2
      - rds
      - 3.5.3
      - tipc
      - 3.5.4
      - three
      - remedy
      - all     

  - name: 1.1.1.1 - Fetching the cramfs value from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit }}" 
    register: cramfs
    ignore_errors: True
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all

  - name: 1.1.1.1 - Creating cramfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install cramfs /bin/true"
      state: present
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all

  - name: 1.1.1.1 - Unloading cramfs module
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all

  - name: 1.1.1.2 - Fetching the freevxfs value from ansible facts
    shell: echo "{{ ansible_local.freevxfs_1112_audit }}" 
    register: freevxfs
    ignore_errors: True
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all

  - name: 1.1.1.2 - Creating freevxfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install freevxfs /bin/true"
      state: present
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all

  - name: 1.1.1.2 - Unloading freevxfs module
    shell: "rmmod freevxfs"
    failed_when: no
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all

  - name: 1.1.1.3 - Fetching the jffs2 value from ansible facts
    shell: echo "{{ ansible_local.jffs2_1113_audit }}" 
    register: jffs2
    ignore_errors: True
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all

  - name: 1.1.1.3 - Creating jffs2 configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install jffs2 /bin/true"
      state: present
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all 

  - name: 1.1.1.3 - Unloading jffs2 module
    shell: "rmmod jffs2"
    failed_when: no
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all  
 
  - name: 1.1.1.4 - Fetching the hfs value from ansible facts
    shell: echo "{{ ansible_local.hfs_1114_audit }}" 
    register: hfs
    ignore_errors: True
    become: yes
    tags:
     - hfs
     - 1.1.1.4
     - one
     - remedy
     - all

  - name: 1.1.1.4 - Creating hfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install hfs /bin/true"
      state: present
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
     - hfs
     - 1.1.1.4
     - one
     - remedy
     - all

  - name: 1.1.1.4 - Unloading hfs module
    shell: "rmmod hfs"
    failed_when: no
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all

  - name: 1.1.1.5 - Fetching the hfsplus value from ansible facts
    shell: echo "{{ ansible_local.hfsplus_1115_audit }}" 
    register: hfsplus
    ignore_errors: True
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.5 - Creating hfsplus configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install hfsplus /bin/true"
      state: present
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.5 - Unloading hfsplus module
    shell: "rmmod hfsplus"
    failed_when: no
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Fetching the squashfs value from ansible facts
    shell: echo "{{ ansible_local.squashfs_1116_audit }}" 
    register: squashfs
    ignore_errors: True
    become: yes
    tags:
      - squashfs
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Creating squashfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install squashfs /bin/true"
      state: present
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Unloading squashfs module
    shell: "rmmod squashfs"
    failed_when: no
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Fetching the udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1117_audit }}" 
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Creating udf configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install udf /bin/true"
      state: present
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Unloading udf module
    shell: "rmmod udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.8 - Fetching the fat value from ansible facts
    shell: echo "{{ ansible_local.fat_1118_audit }}" 
    register: fat
    ignore_errors: True
    become: yes
    tags:
      - fat
      - 1.1.1.8
      - one
      - remedy
      - all

  - name: 1.1.1.8 - Creating fat configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install vfat /bin/true"
      state: present
    when: fat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fat
      - 1.1.1.8
      - one
      - remedy
      - all

  - name: 1.1.1.8 - Unloading fat module
    shell: "rmmod vfat"
    failed_when: no
    when: fat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fat
      - 1.1.1.8
      - one
      - remedy
      - all

  - name: 1.1.2 - Fetching the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}" 
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all
  
  - name: 1.1.2 - Grepping /tmp 
    shell: (sudo grep " /tmp" /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname12_result
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.2 - Debug tmp
    debug: msg="The partition /tmp is already created"
    when:  uname12_result.stdout != "0" 
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all

  - name: 1.1.2 - Debug tmp
    debug: msg="suggestion to create a /tmp partition"
    when:  
    - tmp.stdout.find("FAILED") != -1
    - uname12_result.stdout == "0" 
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all
 
  - name: 1.1.3 - Fetching the tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_113_audit }}" 
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all

  - name: 1.1.3 - configuring the tmpnodev partition
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all

  - name: 1.1.4 - Fetching the tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_114_audit }}" 
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.4 - configuring the tmpnosuid partition
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.5 - Fetch the tmpnoexec value from ansible facts
    shell: echo "{{ ansible_local.tmpnoexec_115_audit }}" 
    register: tmpnoexec
    ignore_errors: True
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.5 - configuring the tmpnoexec partition
    mount:
      path: /tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.6 - Fetching the var value from ansible facts 
    shell: echo "{{ ansible_local.var_116_audit }}" 
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.6 - Greping var in /etc/fstab
    shell: (sudo grep "/var " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.6 - Debug var
    debug: msg="The partition /var is already created"
    when:
    - var.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"  
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.7 - Fetching the vartmp value from ansible facts 
    shell: echo "{{ ansible_local.vartmp_117_audit }}" 
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all

  - name: 1.1.7 - Greping /var/tmp in /etc/fstab
    shell: (sudo grep "/var/tmp " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all

  - name: 1.1.7 - Debug vartmp
    debug: msg="The partition /var/tmp is already created"
    when:
    - vartmp.stdout.find("FAILED") != -1
    - uname_result.stdout == "0" 
    become: yes
    tags: 
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all
  
  - name: 1.1.8 - Fetching the vtnodev value from ansible facts
    shell: echo "{{ ansible_local.vtnodev_118_audit }}" 
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - remedy
      - all

  - name: 1.1.8 - configuring vtnodev partition
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: vtnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - remedy
      - all
      
  - name: 1.1.9 - Fetch the vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_119_audit }}" 
    register:  vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - remedy
      - all
    
  - name: 1.1.9 - configuring vtnosuid partition
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when:  vtnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - remedy
      - all

  - name: 1.1.10 - Fetch the vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_1110_audit }}" 
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - remedy
      - all

  - name: 1.1.10 - configuring vtnoexec partition
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: non
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - remedy
      - all

  - name: 1.1.11 - Fetch the varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1111_audit }}" 
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.11 - Greping /var/log in /etc/fstab
    shell: (sudo grep "/var/log " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: varlog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.11 - Debug varlog
    debug: msg="The partition /var/log is already created"
    when:
    - varlog.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.12 - Fetch the varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1112_audit }}" 
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.12 - Greping /var/log/audit in /etc/fstab   
    shell: (sudo grep "/var/log/audit" /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: varlogaudit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.12 - Debug varlogaudit
    debug: msg="The partition /var/log/audit is already created"
    when:
    - varlogaudit.stdout.find("FAILED") != -1
    - uname_result.stdout == "0" 
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.13 - Fetching the home value from ansible facts 
    shell: echo "{{ ansible_local.home_1113_audit }}" 
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.13 - Greping /home in /etc/fstab
    shell: '(sudo grep /home /etc/fstab | wc -l)'
    ignore_errors: yes
    register: uname_result
    when: home.stdout.find("FAILED") != -1
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.13 - Debug home
    debug: msg="The partition /home is already created"
    when:
    - home.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"  
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.14 - Fetch the homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1114_audit }}" 
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - remedy
      - all

  - name: 1.1.14 - configuring homenodev partition
    mount:
      path: /home
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - remedy
      - all

  - name: 1.1.15 - Fetch the shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_1115_audit }}" 
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - remedy
      - all

  - name: 1.1.15 - configuring the shmnodev partition
    mount:
      path: /dev/shm
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: shmnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - remedy
      - all

  - name: 1.1.16 - Fetch the shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_1116_audit }}" 
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - remedy
      - all
 
  - name: 1.1.16 - configuring the shmnosuid partition
    mount:
      path: /dev/shm
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - remedy
      - all

  - name: 1.1.17 - Fetch the shmnoexec value from ansible facts
    shell: echo "{{ ansible_local.shmnoexec_1117_audit }}" 
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - remedy
      - all
 
  - name: 1.1.17 - configuring the shmnoexec partition
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: shmnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.18 - Fetching the stickybit value from ansible facts 
    shell: echo "{{ ansible_local.stickybit_1118_audit }}" 
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.18 - Setting sticky bit on all world-writable directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    changed_when: no
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - stickybit
      - 1.1.18
      - one
      - remedy
      - all 

  - name: 1.1.19 - Fetching the automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1119_audit }}" 
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - Disable autofs
    service:
      name: autofs
      enabled: no
    failed_when: no
    when: automount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - automount
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.2.1 - Fetching the repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_121_audit }}" 
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
     - 1.2.1
     - repoconfig
     - one
      - remedy
     - all
  
  - name: 1.2.1 - verify repositories are configured correctly
    command: "yum repolist"
    failed_when: no
    when: repoconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
     - 1.2.1
     - repoconfig
     - one
      - remedy
     - all

  - name: 1.2.2 - Fetching the gpgkey value from ansible facts
    shell: echo "{{ ansible_local.gpgkey_122_audit }}" 
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - 1.2.2
      - gpgkey
      - one
      - remedy
      - all

  - name: 1.2.2 - Update package manager GPG keys
    command: sudo rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
    failed_when: no
    when:  gpgkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.2
      - gpgkey
      - one
      - remedy
      - all

  - name: 1.2.3 - Fetching the gpgcheck value from ansible facts
    shell: echo "{{ ansible_local.gpgcheck_123_audit }}" 
    register: gpgcheck
    ignore_errors: True
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.2.3 - Setting gpgcheck to 1
    replace:
       path: /etc/yum.conf
       regexp: "^gpgcheck=0"
       replace: "gpgcheck=1"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.2.3 - Searching gpgcheck=0
    shell: grep -iRl ^gpgcheck=0 /etc/yum.repos.d/*
    register: gpgcheck_result
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.2.3 - Change gpgcheck to 1 in /etc/yum.repos.d/*
    shell: "sed -i 's/gpgcheck=0/gpgcheck=1/g' {{item}}"
    loop: "{{ gpgcheck_result.stdout_lines }}"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.3.1 - Fetching the aide value from ansible facts
    shell: echo "{{ ansible_local.aide_131_audit }}" 
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.1 - Installing aide
    yum:
      name: aide
      state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.1 - Initializing aide
    command: /usr/sbin/aide --init -B 'database_out=file:/var/lib/aide/aide.db.gz'
    args:
      creates: /var/lib/aide/aide.db.gz
    changed_when: no
    failed_when: no
    async: 45
    poll: 0
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.2 - Fetching the fsintegrity value from ansible facts 
    shell: echo "{{ ansible_local.fsintegrity_132_audit }}" 
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - 1.3.2
      - fsintegrity
      - one
      - remedy
      - all

  - name: 1.3.2 - Scheduling aide check
    cron:
      name: Run Aide integrity check weekly
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "usr/sbin/aide --check"
    when: fsintegrity.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.2
      - fsintegrity
      - one
      - remedy
      - all

  - name: "1.4.1 - Fetch the bootloadperm value from ansible facts"
    shell: echo "{{ ansible_local.bootloadperm_141_audit }}"
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - 1.4.1
      - bootloadperm
      - one
      - remedy
      - all

  - name: "1.4.1 - configuring the bootloadperm file"
    file:
      path: /boot/grub/menu.lst
      owner: root
      group: root
      mode: 0600
    failed_when: no
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.1
      - bootloadperm
      - one
      - remedy
      - all

  - name: 1.4.2 - Fetch the singleusermode value from ansible facts
    shell: echo "{{ ansible_local.singleusermode_142_audit }}" 
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
      - 1.4.2
      - singleusermode
      - one
      - remedy
      - all
    
  - name: 1.4.2 - Editing singleusermode file 
    lineinfile:
      dest: /etc/sysconfig/init
      regexp: '^(SINGLE*)'
      line: 'SINGLE=/sbin/sulogin'
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - singleusermode
      - one
      - remedy
      - all

  - name: 1.4.3 - Fetching the interactiveboot value from ansible facts
    shell: echo "{{ ansible_local.interactiveboot_143_audit }}" 
    register: intractiveboot
    ignore_errors: True
    become: yes
    tags:
      - 1.4.3
      - interactiveboot
      - one
      - remedy
      - all
    
  - name: 1.4.3 - Editing intractiveboot file
    lineinfile:
      dest: /etc/sysconfig/init
      regexp: '^PROMPT'
      line: 'PROMPT=no'
    when: intractiveboot.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.3
      - interactiveboot
      - one
      - remedy
      - all

  - name: 1.5.1 - Fetching the coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_151_audit }}" 
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - configuring coredumps file
    lineinfile:
      state: present
      dest: /etc/security/limits.conf
      regexp: '^#?\\*.*core'
      line: '* hard core 0'
      insertbefore: '^# End of file'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - Setting the parameter
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "^fs.suid_dumpable*"
      line: 'fs.suid_dumpable=0'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - Activating kernel parameter
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.2 - Fetching the xdnx value from ansible facts
    shell: echo "{{ ansible_local.xdnx_152_audit }}" 
    register: xdnx
    ignore_errors: True
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - remedy
      - all
 
  - name: 1.5.2 - Grepping value active
    shell: dmesg | grep -E "NX|XD" | grep "active"
    failed_when: no
    when: xdnx.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - remedy
      - all

  - name: 1.5.3 - Fetching the aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_153_audit }}" 
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.3 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "^kernel.randomize_va_space*"
      line: 'kernel.randomize_va_space=2'
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.3 - Activating kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.4 - Fetching the prelink value from ansible facts
    shell: echo "{{ ansible_local.prelink_154_audit }}" 
    register: prelink
    ignore_errors: True
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.5.4 - Ensure prelink is disabled    
    command: prelink -ua
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.5.4 - Uninstalling prelink
    yum:
      name: prelink
      state: absent
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.6.1.1 - Fetching the seldisable value from ansible facts
    shell: echo "{{ ansible_local.seldisable_1611_audit }}"
    register: seldisable
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.1
      - seldisable
      - one
      - remedy
      - all
  
  - name: 1.6.1.1 - Remove all instances kernel lines
    replace:
      dest: /boot/grub/menu.lst
      regexp: '(selinux|enforcing)\s*=\s*0\s*'
      follow: yes
    failed_when: no
    when: seldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.1
      - seldisable
      - one
      - remedy
      - all

  - name: 1.6.1.2 - Fetching the selstate value from ansible facts
    shell: echo "{{ ansible_local.selstate_1612_audit }}" 
    register: selstate
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.2
      - selstate
      - one
      - remedy
      - all

  - name: 1.6.1.2 - Set the SELINUX parameter
    replace:
      path: /etc/selinux/config
      regexp: "^(SELINUX=disabled|SELINUX=permissive)"
      replace: "SELINUX=enforcing"
    failed_when: no
    when: selstate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.2
      - selstate
      - one
      - remedy
      - all

  - name:  1.6.1.3 - Fetching the selpolicy value from ansible facts
    shell: echo "{{ ansible_local.selpolicy_1613_audit }}" 
    register: selpolicy
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.3
      - selpolicy
      - one
      - remedy
      - all

  - name: 1.6.1.3 - Set the SELINUXTYPE parameter
    replace:
      path: /etc/selinux/config
      regexp: '^SELINUXTYPE=.*'
      replace: 'SELINUXTYPE=targeted'
    failed_when: no
    when: selpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.3
      - selpolicy
      - one
      - remedy
      - all

  - name: 1.6.1.4 - Fetching the setroubleshoot value from ansible facts
    shell: echo "{{ ansible_local.setroubleshoot_1614_audit }}" 
    register: setroubleshoot
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.4
      - setroubleshoot
      - one
      - remedy
      - all

  - name: 1.6.1.4 - Uninstall setroubleshoot
    yum:
      name: setroubleshoot
      state: absent
    failed_when: no
    when: setroubleshoot.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.4
      - setroubleshoot
      - one
      - remedy
      - all

  - name: 1.6.1.5 - Fetching the mcs value from ansible facts
    shell: echo "{{ ansible_local.mcs_1615_audit }}" 
    register: mcs
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.5
      - mcs
      - one
      - remedy
      - all

  - name: 1.6.1.5 - Uninstall mcstrans
    yum:
      name: mcstrans
      state: absent
    failed_when: no
    when: mcs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.5
      - mcs
      - one
      - remedy
      - all

  - name: 1.6.2 - Fetching the selinux value from ansible facts
    shell: echo "{{ ansible_local.selinux_162_audit }}" 
    register: selinux
    ignore_errors: True
    become: yes
    tags:
      - 1.6.2
      - selinux
      - one
      - remedy
      - all

  - name: 1.6.2 - Install libselinux
    yum:
      name: libselinux
      state: present
    failed_when: no
    when: selinux.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2
      - selinux
      - one
      - remedy
      - all

  - name: 1.7.1.1 - Fetching the msgday value from ansible facts
    shell: echo "{{ ansible_local.msgday_1711_audit }}" 
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.1
      - msgday
      - one
      - remedy
      - all

  - name: 1.7.1.1 - remove any instances of \m , \r , \s , \v
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/motd
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.1
      - msgday
      - one
      - remedy
      - all

  - name: 1.7.1.1 - Creating msgday configuration file
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to amazonlinux 1"
      create: yes
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.1
      - msgday
      - one
      - remedy
      - all  

  - name: 1.7.1.2 - Fetching the locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_1712_audit }}" 
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.1.2 - Removing any instances of \m , \r , \s , \v
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue 
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.1.2 - configuring locallogin file
    lineinfile:
      path: /etc/issue
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.1.3 - Fetching the remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_1713_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.3
      - remotelogin
      - one
      - remedy
      - all

  - name: 1.7.1.3 - remove any instances of \m , \r , \s , \v
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue.net
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.3
      - remotelogin
      - one
      - remedy
      - all
  
  - name: 1.7.1.3 - configuring remotelogin file
    lineinfile:
      path: /etc/issue.net
      line: "Authorized uses only. All activity may be monitored and reported"
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.3
      - remotelogin
      - one
      - remedy
      - all

  - name: 1.7.1.4 - Fetching the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_1714_audit }}" 
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.4
      - motdperm
      - one
      - remedy
      - all

  - name: 1.7.1.4 - configuring the motdperm file
    file:
      path: "/etc/motd"
      mode: 0644
      owner: root
      group: root
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.4
      - motdperm
      - one
      - remedy
      - all

  - name: 1.7.1.5 - Fetch the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_1715_audit }}" 
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.5
      - issueperm
      - one
      - remedy
      - all

  - name: 1.7.1.5 - configuring the issueperm file
    file:
      path: /etc/issue
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.5
      - issueperm
      - one
      - remedy
      - all

  - name: 1.7.1.6 - Fetch the issuenetperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_1716_audit }}" 
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.6
      - issuenetperm
      - one
      - remedy
      - all

  - name: 1.7.1.6 - configuring the issuenetperm file
    file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.6
      - issuenetperm
      - one
      - remedy
      - all

  - name: 1.8 - Fetch the updates value from ansible facts
    shell: echo "{{ ansible_local.updates_18_audit }}" 
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - remedy
      - all

  - name: 1.8 - update all packages
    yum:
      name: "*"
      state: latest
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - remedy
      - all

#############################################################CHAPTER 2##############################################################


  - name: 2.1.1 - Fetching the chargen value from ansible facts
    shell: echo "{{ ansible_local.chargen_211_audit }}"  
    register: chargen
    ignore_errors: True
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
      - remedy
      - all

  - name: 2.1.1 - Disable chargen-dgram and chargen-stream
    sysvinit:
      name: "{{ item }}"
      enabled: no
    with_items:
      - chargen-dgram
      - chargen-stream
    failed_when: no
    when: chargen.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
      - remedy
      - all
      
  - name: 2.1.2 - Fetching the daytime value from ansible facts
    shell: echo "{{ ansible_local.daytime_212_audit }}" 
    register: daytime
    ignore_errors: True
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
      - remedy
      - all

  - name: 2.1.2 - Disable daytime-dgram and daytime-stream
    sysvinit:
      name: "{{ item }}"
      enabled: no
    with_items:
      - daytime-dgram
      - daytime-stream
    failed_when: no
    when: daytime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
      - remedy
      - all

  - name: 2.1.3 - Fetching the discard value from ansible facts
    shell: echo "{{ ansible_local.discard_213_audit }}" 
    register: discard
    ignore_errors: True
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
      - remedy
      - all

  - name: 2.1.3 - Disable discard-dgram and discard-stream
    sysvinit:
      name: "{{item}}"
      enabled: no
    with_items:
      - discard-dgram
      - discard-stream
    failed_when: no
    when: discard.stdout.find("FAILED") != -1
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
      - remedy
      - all  

  - name: 2.1.4 - Fetching the echo value from ansible facts
    shell: echo "{{ ansible_local.echo_214_audit }}" 
    register: echo
    ignore_errors: True
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - remedy
      - all

  - name: 2.1.4 - Disable echo-dgram and echo-stream
    sysvinit:
      name: "{{item}}"
      enabled: no
    with_items:
      - echo-dgram
      - echo-stream
    failed_when: no
    when: echo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - remedy
      - all 

  - name: 2.1.5 - Fetching the time value from ansible facts
    shell: echo "{{ ansible_local.time_215_audit }}" 
    register: time
    ignore_errors: True
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - remedy
      - all

  - name: 2.1.5 - Disable time-dgram and time-stream
    sysvinit:
      name: "{{item}}"
      enabled: no
    with_items:
      - time-dgram
      - time-stream
    failed_when: no
    when: time.stdout.find("FAILED") != -1
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - remedy
      - all

  - name: 2.1.6 - Fetching the rsh value from ansible facts
    shell: echo "{{ ansible_local.rsh_216_audit }}" 
    register: rsh
    ignore_errors: True
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - remedy
      - all

  - name: 2.1.6 - Disable rsh,rlogin and rexec
    sysvinit:
      name: "{{item}}"
      enabled: no
    with_items:
      - rexec
      - rlogin
      - rsh
    failed_when: no
    when: rsh.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - remedy
      - all

  - name: 2.1.7 - Fetching the talk value from ansible facts
    shell: echo "{{ ansible_local.talk_217_audit }}" 
    register: talk
    ignore_errors: True
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - remedy
      - all

  - name: 2.1.7 - Disable talk server
    sysvinit:
      name: talk
      enabled: no
    failed_when: no
    when: talk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - remedy
      - all
      
  - name: 2.1.8 - Fetching the telnet value from ansible facts
    shell: echo "{{ ansible_local.telnet_218_audit }}" 
    register: telnet
    ignore_errors: True
    become: yes
    tags:
      - telnet
      - 2.1.8
      - two
      - remedy
      - all

  - name: 2.1.8 - Disable telnet server
    sysvinit:
      name: telnet
      enabled: no
    failed_when: no
    when: telnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnet
      - 2.1.8
      - two
      - remedy
      - all     
     
  - name: 2.1.9 - Fetching the tftp value from ansible facts
    shell: echo "{{ ansible_local.tftp_219_audit }}" 
    register: tftp
    ignore_errors: True
    become: yes
    tags:
      - tftp
      - 2.1.9
      - two
      - remedy
      - all

  - name: 2.1.9 - Disable tftp server
    sysvinit:
      name: tftp
      enabled: no
    failed_when: no
    when: tftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tftp
      - 2.1.9
      - two
      - remedy
      - all 

  - name: 2.1.10 - Fetching the rsync value from ansible facts
    shell: echo "{{ ansible_local.rsync_2110_audit }}" 
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - rsync
      - 2.1.10
      - two
      - remedy
      - all

  - name: 2.1.10 - Disable rsync service
    sysvinit:
      name: rsync
      enabled: no
    failed_when: no
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsync
      - 2.1.10
      - two
      - remedy
      - all  

  - name: 2.1.11 - Fetching the xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_2111_audit }}" 
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - xinetd
      - 2.1.11
      - two
      - remedy
      - all

  - name: 2.1.11 - Disable xinetd Daemon
    sysvinit:
      name: xinetd
      enabled: no
    failed_when: no
    when: xinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xinetd
      - 2.1.11
      - two
      - remedy
      - all 

  - name: 2.2.1.1 - Fetching the timesync value from ansible facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all

  - name: 2.2.1.1 - Installing ntp or chrony
    yum:
      name: {{ ntp_chrony_amazonlinux1 }}
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all  

  - name: 2.2.1.2 - Fetching the ntp value from ansible facts
    shell: echo "{{ ansible_local.ntp_2212_audit }}"
    register: ntp
    ignore_errors: True
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - configuring ntp file
    lineinfile:
      path: /etc/ntp.conf
      state: present
      line: "{{item}}"
    with_items:
      - "restrict -4 default kod nomodify notrap nopeer noquery"
      - "restrict -6 default kod nomodify notrap nopeer noquery"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - configuring ntp file
    lineinfile:
      path: /etc/ntp.conf
      state: present
      line: "server {{ remote_server_ntp_amazonlinux1 }}"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Grepping daemon 
    shell: (cat /etc/init.d/ntpd | egrep "daemon.*prog.*-u.*ntp:ntp.*-p" | wc -l)
    register: daemontp
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - configuring ntp file
    shell: sed -i 's/daemon.*$prog/& -u ntp:ntp/' /etc/init.d/ntpd
    failed_when: no
    when:
      - ntp.stdout.find("FAILED") != -1
      - daemontp == '0'
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Restart ntp
    service:
      name: ntp
      state: restarted
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - remedy
      - all  

  - name: 2.2.1.3 - Fetching the chrony value from ansible facts
    shell: echo "{{ ansible_local.chrony_2213_audit }}" 
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - configuring chrony file
    lineinfile:
      path: /etc/chrony.conf
      state: present
      line: "server {{ remote_server_chrony_amazonlinux1 }}"
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - configuring chrony file
    lineinfile:
      path: /etc/sysconfig/chronyd
      state: present
      regexp: "^OPTIONS=*"
      line: 'OPTIONS="-u chrony"'
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - Restart chronyd
    service:
      name: chronyd
      state: restarted
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.2 - Fetching the xorg value from ansible facts
    shell: echo "{{ ansible_local.xorg_222_audit }}" 
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all

  - name: 2.2.2 - Remove the X Windows System packages
    yum:
      name: "xorg-x11*"
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all
      
  - name: 2.2.3 - Fetching the avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_223_audit }}" 
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all

  - name: 2.2.3 - Disable avahi-daemon
    sysvinit:
      name: avahi-daemon
      enabled: no
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all 
      
  - name: 2.2.4 - Fetching the cups value from ansible facts
    shell: echo "{{ ansible_local.cups_224_audit }}" 
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all

  - name: 2.2.4 - Disable cups
    sysvinit:
      name: cups
      enabled: no
    failed_when: no
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all
      
  - name: 2.2.5 - Fetching the dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_225_audit }}" 
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.5 - Disable dhcpd server
    sysvinit:
      name: dhcpd
      enabled: no
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.6 - Fetching the ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_226_audit }}" 
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all

  - name: 2.2.6 - Disable slapd server
    sysvinit:
      name: slapd
      enabled: no
    failed_when: no
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all  

  - name: 2.2.7 - Fetching the nfsrpc value from ansible facts
    shell: echo "{{ ansible_local.nfsrpc_227_audit }}" 
    register: nfsrpc
    ignore_errors: True
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - remedy
      - all

  - name: 2.2.7 - Disable nfs
    sysvinit:
      name: nfs
      enabled: no
    failed_when: no
    when: nfsrpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - remedy
      - all

  - name: 2.2.7 - Disable rpcbind
    sysvinit:
      name: rpcbind
      enabled: no
    failed_when: no
    when: nfsrpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - remedy
      - all 

  - name: 2.2.8 - Fetching the dns value from ansible facts
    shell: echo "{{ ansible_local.dns_228_audit }}" 
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - remedy
      - all

  - name: 2.2.8 - Disable named server
    sysvinit:
      name: named
      enabled: no
    failed_when: no
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - remedy
      - all  

  - name: 2.2.9 - Fetching the ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_229_audit }}"
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - remedy
      - all

  - name: 2.2.9 - Disable vsftpd server
    sysvinit:
      name: vsftpd
      enabled: no
    failed_when: no
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - remedy
      - all

  - name: 2.2.10 - Fetching the http value from ansible facts
    shell: echo "{{ ansible_local.http_2210_audit }}" 
    register: http
    ignore_errors: True
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - remedy
      - all

  - name: 2.2.10 - Disable httpd server
    sysvinit:
      name: httpd
      enabled: no
    failed_when: no
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - remedy
      - all 

  - name: 2.2.11 - Fetching the imap value from ansible facts
    shell: echo "{{ ansible_local.imap_2211_audit }}" 
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - remedy
      - all

  - name: 2.2.11 - Disable dovecot
    sysvinit:
      name: dovecot
      enabled: no
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - remedy
      - all 

  - name: 2.2.12 - Fetching the samba value from ansible facts
    shell: echo "{{ ansible_local.samba_2212_audit }}" 
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - remedy
      - all

  - name: 2.2.12 - Disable smb
    sysvinit:
      name: smb
      enabled: no
    failed_when: no
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - remedy
      - all 

  - name: 2.2.13 - Fetching the proxy value from ansible facts
    shell: echo "{{ ansible_local.proxy_2213_audit }}" 
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - proxy
      - 2.2.13
      - two
      - remedy
      - all

  - name: 2.2.13 - Disable squid
    sysvinit:
      name: squid
      enabled: no
    failed_when: no
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - proxy
      - 2.2.13
      - two
      - remedy
      - all 

  - name: 2.2.14 - Fetching the snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_2214_audit }}" 
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - snmp
      - 2.2.14
      - two
      - remedy
      - all

  - name: 2.2.14 - Disable snmpd
    sysvinit:
      name: snmpd
      enabled: no
    failed_when: no
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - snmp
      - 2.2.14
      - two
      - remedy
      - all

  - name: 2.2.15 - Fetching the mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2215_audit }}"
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.15 - Install postfix
    yum: name=postfix state=present
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.15 - configuring mail file
    lineinfile:
      path: /etc/postfix/main.cf
      state: present
      regexp: "^inet_interfaces =*"
      line: "inet_interfaces = loopback-only"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.15 - Restart postfix
    service:
      name: postfix
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all 

  - name: 2.2.16 - Fetching the nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2216_audit }}" 
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - nis
      - 2.2.16
      - two
      - remedy
      - all

  - name: 2.2.16 - Disable ypserv
    sysvinit:
      name: ypserv
      enabled: no
    failed_when: no
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nis
      - 2.2.16
      - two
      - remedy
      - all
      
  - name: 2.3.1 - Fetching the nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}" 
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.1 - Uninstall ypbind
    yum:
      name: ypbind
      state: absent
    failed_when: no
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.2 - Fetching the rshc value from ansible facts
    shell: echo "{{ ansible_local.rshc_232_audit }}" 
    register: rshc
    ignore_errors: True
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all

  - name: 2.3.2 - Uninstall rsh
    yum:
      name: rsh
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all 

  - name: 2.3.3 - Fetching the talkc value from ansible facts
    shell: echo "{{ ansible_local.talkc_233_audit }}" 
    register: talkc
    ignore_errors: True
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.3 - Uninstall talk
    yum:
      name: talk
      state: absent
    failed_when: no
    when: talkc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.4 - Fetching the telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_234_audit }}" 
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all

  - name: 2.3.4 - Uninstall telnet
    yum:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all 

  - name: 2.3.5 - Fetching the ldapc value from ansible facts
    shell: echo "{{ ansible_local.ldapc_235_audit }}" 
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all

  - name: 2.3.5 - Uninstall openldap-clients
    yum:
      name: openldap-client
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all


############################################################### CHAPTER 3##########################################################


  - name: 3.1.1 - Fetching the ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_311_audit }}"
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - remedy
      - all

  - name: 3.1.1 - Adding ipforward  parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.ip_forward*"
      line: "net.ipv4.ip_forward=0"
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - remedy
      - all

  - name: 3.1.1 - Activating kernel parameter
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - remedy
      - all

  - name:  3.1.2 - Fetching the packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_312_audit }}"
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all
  
  - name: 3.1.2 - Adding packetredirect parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.send_redirects*"
      line: "net.ipv4.conf.all.send_redirects=0"
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Adding packetredirect parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.send_redirects*"
      line: "net.ipv4.conf.default.send_redirects=0"
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.all.send_redirects
      value: '0'
      sysctl_set: yes
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.default.send_redirects 
      value: '0'
      sysctl_set: yes
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - remedy
      - all
  
  - name:  3.2.1 - Fetching the routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_321_audit }}" 
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - remedy
      - all
   
  - name: 3.2.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.accept_source_route*"
      line: "net.ipv4.conf.all.accept_source_route=0"
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.accept_source_route*"
      line: "net.ipv4.conf.default.accept_source_route=0"
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.all.accept_source_route 
      value: '0'
      sysctl_set: yes
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - remedy
      - all

  - name: 3.2.1 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.default.accept_source_route
      value: '0'
      sysctl_set: yes
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - remedy
      - all
  
  - name: 3.2.1 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.2 - Fetching the icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_322_audit }}"
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.accept_redirects*"
      line: "net.ipv4.conf.all.accept_redirects=0"
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.accept_redirects*"
      line: "net.ipv4.conf.default.accept_redirects=0"
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.all.accept_redirects
      value: '0'
      sysctl_set: yes
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.default.accept_redirects
      value: '0'
      sysctl_set: yes
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.3 - Fetching the secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_323_audit }}" 
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.3 - Adding secureicmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.secure_redirects*"
      line: "net.ipv4.conf.all.secure_redirects=0"
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.3 - Adding secureicmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.secure_redirects*"
      line: "net.ipv4.conf.default.secure_redirects=0"
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.3 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.all.secure_redirects 
      value: '0'
      sysctl_set: yes
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.3 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.default.secure_redirects
      value: '0'
      sysctl_set: yes
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.3 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - remedy
      - all

  - name: 3.2.4 - Fetching the suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_324_audit }}"
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.4 - Adding suspicious parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.log_martians*"
      line: "net.ipv4.conf.all.log_martians=1"
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.4 - Adding suspicious parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.log_martians*"
      line: "net.ipv4.conf.default.log_martians=1"
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.4 - Ensure suspicious packets are logged
    sysctl:
      name: net.ipv4.conf.all.log_martians 
      value: '1'
      sysctl_set: yes
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.4 - Activating kernel parameter
    sysctl:
      name: net.ipv4.conf.default.log_martians
      value: '1'
      sysctl_set: yes
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.4 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - remedy
      - all

  - name: 3.2.5 - Fetching the broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_325_audit }}" 
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - remedy
      - all

  - name: 3.2.5 - Adding broadcasticmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_echo_ignore_broadcasts*"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - remedy
      - all

  - name: 3.2.5 - Activating kernel parameter
    sysctl:
      name: net.ipv4.icmp_echo_ignore_broadcasts
      value: '1'
      sysctl_set: yes
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - remedy
      - all

  - name: 3.2.5 - Activating kernel parameter
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - remedy
      - all

  - name: 3.2.6 - Fetching the bogusicmp value from ansible facts
    shell: echo "{{ ansible_local.bogusicmp_326_audit }}"
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - remedy
      - all

  - name: 3.2.6 - Adding bogusicmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_ignore_bogus_error_responses*"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - remedy
      - all

  - name: 3.2.6 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - remedy
      - all

  - name: 3.2.7 - Fetching the reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_327_audit }}"
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - remedy
      - all

  - name: 3.2.7 - Adding reversepathfilter parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.rp_filter*" ,line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^net.ipv4.conf.default.rp_filter" ,line: "net.ipv4.conf.default.rp_filter=1"}
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - remedy
      - all

  - name: 3.2.7 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
     - reversepathfilter
     - 3.2.7
     - three
      - remedy
     - all

  - name: 3.2.8 - Fetching the tcpsyncookies value from ansible facts
    shell: echo "{{ ansible_local.tcpsyncookies_328_audit }}" 
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - remedy
      - all

  - name: 3.2.8 - Adding tcpsyncookies parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.tcp_syncookies*"
      line: "net.ipv4.tcp_syncookies=1"
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - remedy
      - all

  - name: 3.2.8 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - remedy
      - all   

  - name: 3.3.1 - Fetching the ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_331_audit }}" 
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding ipv6router parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv6.conf.all.accept_ra*"
      line: "net.ipv6.conf.all.accept_ra=0"
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding ipv6router parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv6.conf.default.accept_ra*"
      line: "net.ipv6.conf.default.accept_ra=0"
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Activating kernel parameter
    sysctl:
      name: net.ipv6.conf.all.accept_ra 
      value: '0'
      sysctl_set: yes    
    when: ipv6router.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Activating kernel parameter
    sysctl:
      name: net.ipv6.conf.default.accept_ra
      value: '0'
      sysctl_set: yes
    when: ipv6router.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Activating kernel parameter
    sysctl:
      name: net.ipv6.route.flush
      value: '1'
      sysctl_set: yes
    when: ipv6router.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - remedy
      - all  

  - name: 3.3.2 - Fetching the ipv6redirects value from ansible facts
    shell: echo "{{ ansible_local.ipv6redirects_332_audit }}" 
    register: ipv6redirects
    ignore_errors: True
    become: yes
    tags:
      - ipv6redirects
      - 3.3.2
      - three
      - remedy
      - all
   
  - name: 3.3.2 - Adding ipv6redirects parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^net.ipv6.conf.all.accept_redirects*" ,line: "net.ipv6.conf.all.accept_redirects=0"}
      - {regexp: "^net.ipv6.conf.default.accept_redirects*" ,line: "net.ipv6.conf.default.accept_redirects=0"}
    when: ipv6redirects.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6redirects
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
     - name: net.ipv6.conf.all.accept_redirects
       value: '0'
       sysctl_set: yes
     - name: net.ipv6.conf.default.accept_redirects
       value: '0'
       sysctl_set: yes
     - name: net.ipv4.route.flush
       value: '1'
       sysctl_set: yes
    when: ipv6redirects.stdout.find("FAILED") != -1
    become: yes
    tags:
     - ipv6redirects
     - 3.3.2
     - three
      - remedy
     - all

  - name: 3.3.3 - Fetch the ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_333_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - 3.3.3
      - three
      - remedy
      - all

  - name: 3.3.3 - Disabling IPv6 through the GRUB2 config
    command: grubby --update-kernel=ALL --args=ipv6.disable=1
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.3.3
      - three
      - remedy
      - all   

  - name: 3.4.1 - Fetching the tcpwrappers value from ansible facts
    shell: echo "{{ ansible_local.tcpwrappers_341_audit }}" 
    register: tcpwrappers
    ignore_errors: True
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - remedy
      - all
   
  - name: 3.4.1 - Install tcpd
    yum: name=tcp_wrappers state=present
    failed_when: no
    when: tcpwrappers.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - remedy
      - all

  - name: 3.4.2 - Fetching the hostsallow value from ansible facts
    shell: echo "{{ ansible_local.hostsallow_342_audit }}" 
    register: hostsallow
    ignore_errors: True
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - remedy
      - all

  - name: 3.4.2 - configuring /etc/hosts.allow 
    lineinfile:
      path: /etc/hosts.allow 
      state: present
      line: "{{ hosts_allow_amazonlinux1 }}" 
    failed_when: no
    when: hostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - remedy
      - all

  - name: 3.4.3 - Fetching the hostsdeny value from ansible facts
    shell: echo "{{ ansible_local.hostsdeny_343_audit }}" 
    register: hostsdeny
    ignore_errors: True
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - remedy
      - all

  - name: 3.4.3 - configuring /etc/hosts.deny
    lineinfile:
      path: /etc/hosts.deny
      state: present
      line: "{{ hosts_deny_amazonlinux1 }}"
    failed_when: no
    when: hostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - remedy
      - all

  - name: 3.4.4 - Fetching the permhostsallow value from ansible facts
    shell: echo "{{ ansible_local.permhostsallow_344_audit }}" 
    register: permhostsallow
    ignore_errors: True
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - remedy
      - all

  - name: 3.4.4 - configuring permhostsallow file
    file:
      path: /etc/hosts.allow
      mode: 0644
      owner: root
      group: root
    failed_when: no
    when: permhostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - remedy
      - all

  - name: 3.4.5 - Fetching the permhostsdeny value from ansible facts
    shell: echo "{{ ansible_local.permhostsdeny_345_audit }}"
    register: permhostsdeny
    ignore_errors: True
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - remedy
      - all

  - name: 3.4.5 - configuring permhostsdeny file
    file:
      path: /etc/hosts.deny
      mode: 0644
      owner: root
      group: root
    failed_when: no
    when: permhostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - remedy
      - all   
  
  - name: 3.5.1 - Fetching the dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_351_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - remedy
      - all
 
  - name: 3.5.1 - configuring dccp file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install dccp /bin/true"
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - remedy
      - all  

  - name: 3.5.2 - Fetching the sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_352_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - remedy
      - all
 
  - name: 3.5.2 - configuring sctp file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install sctp /bin/true"
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - remedy
      - all  
  
  - name: 3.5.3 - Fetching the rds value from ansible facts
    shell: echo "{{ ansible_local.rds_353_audit }}" 
    register: rds
    ignore_errors: True
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - remedy
      - all

  - name: 3.5.3 - configuring rds file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install rds /bin/true"
    when: rds.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - remedy
      - all  
  
  - name: 3.5.4 - Fetching the tipc value from ansible facts
    shell: echo "{{ ansible_local.tipc_354_audit }}"
    register: tipc
    ignore_errors: True
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - remedy
      - all

  - name: 3.5.4 - configuring tipc file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install tipc /bin/true"
    when: tipc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - remedy
      - all  

  - name: 3.6.1 - Fetching the iptables values from ansible facts
    shell: echo "{{ ansible_local.iptables_361_audit }}"
    register: iptables
    ignore_errors: True
    become: yes
    tags:
      - iptables
      - 3.6.1
      - three
      - remedy
      - all

  - name: 3.6.1 - installing iptables
    yum: name=iptables state=present
    when: iptables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptables
      - 3.6.1
      - three
      - remedy
      - all

  - name: 3.6.3 - Fetching the loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.loopbacktraffic_363_audit }}"
    register: loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.3
      - three
      - remedy
      - all

  - name: 3.6.3 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT
      - iptables -A OUTPUT -o lo -j ACCEPT
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.3
      - three
      - remedy
      - all

  - name: 3.6.4 - Fetching the outbound value from ansible facts
    shell: echo "{{ ansible_local.outbound_364_audit }}"
    register: outbound
    ignore_errors: True
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - name: 3.6.4 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outbound.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - name: 3.6.5 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_365_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_amazonlinux1.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.2 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_362_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_amazonlinux1.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all      

  - name: 4.1.1.1 - Fetching the auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4111_audit }}" 
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.1.1
      - four
      - remedy
      - all
  
  - name: 4.1.1.1 - configuring auditlogsize file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*|#max_log_file =*)"
      line: "max_log_file = {{ audit_log_size_amazonlinux1 }}"
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.1.1
      - four
      - remedy
      - all

  - name: 4.1.1.2 - Fetching the auditlogfull value from ansible facts
    shell: echo "{{ ansible_local.auditlogfull_4112_audit }}" 
    register: auditlogfull
    ignore_errors: True
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - remedy
      - all
  
  - name: 4.1.1.2 - configuring auditlogfull file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^space_left_action =*'
      line: space_left_action = email
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - remedy
      - all

  - name: 4.1.1.2 - configuring auditlogfull file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^admin_space_left_action =*'
      line: admin_space_left_action = halt
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - remedy
      - all

  - name: 4.1.1.2 - configuring auditlogfull file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^action_mail_acct =*'
      line: action_mail_acct = root
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - remedy
      - all
  
  - name: 4.1.1.3 - Fetch the auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4113_audit }}" 
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.1.3
      - four
      - remedy
      - all
  
  - name: 4.1.1.3 - configuring auditlogdelete file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "max_log_file_action =*"
      line: "max_log_file_action = keep_logs"
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.1.3
      - four
      - remedy
      - all
  
  - name: 4.1.2 - Fetch the auditdservice value from ansible facts
    shell: echo "{{ ansible_local.auditdservice_412_audit }}"
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.2
      - four
      - remedy
      - all

  - name: 4.1.2 - Enable auditd service
    sysvinit:
      name: auditd
      enabled: yes
    failed_when: no
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.2
      - four
      - remedy
      - all
 
  - name: 4.1.3 - Fetch the auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_413_audit }}"
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.3 - Adding parameter in GRUB_CMDLINE_LINUX
    command: grubby --update-kernel=ALL --args=audit=1
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.4 - Fetch the moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_414_audit }}" 
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.4 - configuring moddatetime file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.4 - configuring moddatetime file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - remedy
      - all
      
  - name: 4.1.4 - Reload auditd
    command: service auditd reload
    when: moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - remedy
      - all
  
  - name: 4.1.5 - Fetch the modusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_415_audit }}" 
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - configuring modusergrp file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: '-w /etc/group -p wa -k identity'
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - configuring modusergrp file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: '-w /etc/passwd -p wa -k identity'
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - configuring modusergrp file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: '-w /etc/gshadow -p wa -k identity'
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - configuring modusergrp file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: '-w /etc/shadow -p wa -k identity'
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - configuring modusergrp file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: '-w /etc/security/opasswd -p wa -k identity'
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all
      
  - name: 4.1.5 - Reload auditd
    command: service auditd reload
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.6 - Fetch the modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_416_audit }}" 
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - remedy
      - all
 
  - name: 4.1.6 - configuring modsysnet file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
      - "-w /etc/sysconfig/network-scripts/ -p wa -k system-locale"
    when:
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.6 - configuring modsysnet file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
      - "-w /etc/sysconfig/network-scripts/ -p wa -k system-locale"
    when: 
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.6 - Reload auditd
    command: service auditd reload
    when: modsysnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.7 - Fetching the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_417_audit }}" 
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.7 - configuring modsysmac file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/selinux/ -p wa -k MAC-policy"
      - "-w /usr/share/selinux/ -p wa -k MAC-policy"
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.7 - Reload auditd
    command: service auditd reload
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.8 - Fetching the loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_418_audit }}" 
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - remedy
      - all

  - name: 4.1.8 - configuring loginout file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /var/log/lastlog -p wa -k logins"
      - "-w /var/run/faillock/ -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - remedy
      - all

  - name: 4.1.8 - Reload auditd
    command: service auditd reload
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - remedy
      - all
 
  - name: 4.1.9 - Fetching the session value from ansible facts
    shell: echo "{{ ansible_local.session_419_audit }}" 
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - remedy
      - all
 
  - name: 4.1.9 - configuring session file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /var/run/utmp -p wa -k session"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.9 - configuring session file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /var/log/wtmp -p wa -k logins"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.9 - configuring session file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /var/log/btmp -p wa -k logins"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - remedy
      - all
      
  - name: 4.1.9 - Reload auditd
    command: service auditd reload
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - remedy
      - all
  
  - name: 4.1.10 - Fetching the dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_4110_audit }}" 
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - remedy
      - all
 
  - name:  4.1.10 - configuring dacperm file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
    when:
     - dacperm.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - remedy
      - all

  - name:  4.1.10 - configuring dacperm file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
    when:
     - dacperm.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - remedy
      - all

  - name: 4.1.10 - Reload auditd
    command: service auditd reload
    when: dacperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - remedy
      - all

  - name: 4.1.11 - Fetching the fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_4111_audit }}" 
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - remedy
      - all
 
  - name: 4.1.11 - configuring fileaccess file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
    when:
     - fileaccess.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - remedy
      - all

  - name: 4.1.11 - configuring fileaccess file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
    when:
     - fileaccess.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - remedy
      - all

  - name: 4.1.11 - Reload auditd
    command: service auditd reload
    when: fileaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - remedy
      - all
 
  - name: 4.1.12 - Fetching the privilegecmd value from ansible facts
    shell: echo "{{ ansible_local.privilegecmd_4112_audit }}" 
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - remedy
      - all
  
  - name: 4.1.12 - configuring privilegecmd file
    shell: find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged" }' >> /etc/audit/audit.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - remedy
      - all
      
  - name: 4.1.12 - Reload auditd
    command: service auditd reload
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - remedy
      - all
  
  - name: 4.1.13 - Fetching the fsmount value from ansible facts
    shell: echo "{{ ansible_local.fsmount_4113_audit }}"
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - remedy
      - all
  
  - name: 4.1.13 - configuring fsmount file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
        - "-a always,exit -F arch=b64 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
        - "-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - remedy
      - all

  - name:  4.1.13 - configuring fsmount file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
    when: 
     - fsmount.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - remedy
      - all

  - name:  4.1.13 - Reload auditd 
    shell: service auditd reload
    when: fsmount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - remedy
      - all
  
  - name: 4.1.14 - Fetching the filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4114_audit }}" 
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.14 - configuring filedeletion file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
    when: 
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.14 - configuring filedeletion file 
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
       - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
    when: 
      - filedeletion.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.14 - Reload auditd
    command: service auditd reload
    when: filedeletion.stdout.find("FAILED") != -1
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - remedy
      - all
  
  - name: 4.1.15 - Fetching the sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_4115_audit }}"
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.15 - configuring sudoers file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /etc/sudoers -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.15 - configuring sudoers file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - remedy
      - all
      
  - name: 4.1.15 - Reload auditd
    command: service auditd reload
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.16 - Fetching the sudolog value from ansible facts
    shell: echo "{{ ansible_local.sudolog_416_audit }}" 
    register: sudolog
    ignore_errors: True
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - remedy
      - all
 
  - name: 4.1.16 - configuring sudolog file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /var/log/sudo.log -p wa -k actions"
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - remedy
      - all
      
  - name: 4.1.16 - Reload auditd
    command: service auditd reload
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - remedy
      - all

  - name: 4.1.17 - Fetching the kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4117_audit }}"
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - remedy
      - all
  
  - name: 4.1.17 - configuring kernelmodule file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - remedy
      - all

  - name: 4.1.17 - configuring kernelmodule file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - remedy
      - all 

  - name:  4.1.17 - Reload auditd
    command: service auditd reload
    when: kernelmodule.stdout.find("FAILED") != -1
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - remedy
      - all
  
  - name: 4.1.18 - Fetching the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4118_audit }}" 
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.18
      - four
      - remedy
      - all

  - name: 4.1.18 - configuring auditconfig file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-e 2"
    when: auditconfig.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditconfig
      - 4.1.18
      - four
      - remedy
      - all
      
  - name: 4.1.18 - Reload auditd
    command: service auditd reload
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.18
      - four
      - remedy
      - all
  
  - name: 4.2.1.1 - Fetching the rsyslogenb value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4211_audit }}" 
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.1
      - four
      - remedy
      - all
 
  - name: 4.2.1.1 - Enable rsyslog Service
    sysvinit:
      name: rsyslog
      enabled: yes
    failed_when: no
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.1
      - four
      - remedy
      - all

  - name: 4.2.1.2 - Fetch the rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4212_audit }}" 
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - remedy
      - all

  - name: 4.2.1.2 - configuring rloggingconf file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - remedy
      - all

  - name: 4.2.1.2 - Restart rsyslog
    command: "{{item}}"
    with_items:
      - "systemctl restart rsyslog"
      - "pkill -HUP rsyslogd"
    failed_when: no
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - remedy
      - all
  
  - name: 4.2.1.3 - Fetch the rsyslogperm value from ansible facts
    shell: echo "{{ ansible_local.rsyslogperm_4213_audit }}" 
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - remedy
      - all
 
  - name: 4.2.1.3 - configuring rsyslogperm file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "$FileCreateMode 0640"
    when: rsyslogperm.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - remedy
      - all

  - name: 4.2.1.4 - Fetch the rsyslogsendlogs value from ansible facts
    shell: echo "{{ ansible_local.rsyslogsendlogs_4214_audit }}" 
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - remedy
      - all
  
  - name: 4.2.1.4 - configuring rsyslogsendlogs file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - remedy
      - all

  - name: 4.2.1.4 - Restart rsyslog
    command: "{{item}}"
    with_items:
      - "systemctl restart rsyslog"
      - "pkill -HUP rsyslogd"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - remedy
      - all

  - name: 4.2.1.5 -  Fetch the remotesyslogmsg value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogmsg_4215_audit }}" 
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all
  
  - name: 4.2.1.5 -  configuring remotesyslogmsg file
    lineinfile:
      path: '/etc/rsyslog.conf'
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "#$ModLoad imtcp", line: "$ModLoad imtcp" }
      - { regexp: "#$InputTCPServerRun 514",line: "$InputTCPServerRun 514" }
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 -  configuring remotesyslogmsg file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    register: remotesyslogmsg_result
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 -  configuring remotesyslogmsg file
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 -  configuring remotesyslogmsg file
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 - Restart rsyslog
    command: "pkill -HUP rsyslogd"
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.2.1 - Fetching the syslogngenb value from ansible facts
    shell: echo "{{ ansible_local.syslogngenb_4221_audit }}" 
    register: syslogngenb
    ignore_errors: True
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - remedy
      - all
  
  - name: 4.2.2.1 - Enable syslog-ng
    sysvinit:
      name: syslog-ng
      enabled: yes
    failed_when: no
    when: syslogngenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - remedy
      - all

  - name: 4.2.2.2 - Fetching the sloggingconf value from ansible facts
    shell: echo "{{ ansible_local.sloggingconf_4222_audit }}" 
    register: sloggingconf
    ignore_errors: True
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - remedy
      - all
  
  - name: 4.2.2.2 - configuring sloggingconf file
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
    with_items:
      - "log { source(src); source(chroots); filter(f_console); destination(console); };"
      - "log { source(src); source(chroots); filter(f_console); destination(xconsole); };"
      - "log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };"
      - "log { source(src); source(chroots); filter(f_newserr); destination(newserr); };"
      - "log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };"
      - "log { source(src); source(chroots); filter(f_mailinfo); destination(mailinfo); };"
      - "log { source(src); source(chroots); filter(f_mailwarn); destination(mailwarn); };"
      - "log { source(src); source(chroots); filter(f_mailerr); destination(mailerr); };"
      - "log { source(src); source(chroots); filter(f_mail); destination(mail); };"
      - "log { source(src); source(chroots); filter(f_acpid); destination(acpid); flags(final); };"
      - "log { source(src); source(chroots); filter(f_acpid_full); destination(devnull); flags(final); };"
      - "log { source(src); source(chroots); filter(f_acpid_old); destination(acpid); flags(final); };"
      - "log { source(src); source(chroots); filter(f_netmgm); destination(netmgm); flags(final); };"
      - "log { source(src); source(chroots); filter(f_local); destination(localmessages); };"
      - "log { source(src); source(chroots); filter(f_messages); destination(messages); };"
      - "log { source(src); source(chroots); filter(f_iptables); destination(firewall); };"
      - "log { source(src); source(chroots); filter(f_warn); destination(warn); };"
    when: sloggingconf.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - remedy
      - all

  - name: 4.2.2.2 - Reload service
    command: "{{item}}"
    ignore_errors: yes
    with_items:
      - "service syslog-ng restart"
      - "pkill -HUP syslog-ng"
    failed_when: no
    when: sloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - remedy
      - all

  - name: 4.2.2.3 - Fetching the syslogngperm value from ansible facts
    shell: echo "{{ ansible_local.syslogngperm_4223_audit }}" 
    register: syslogngperm
    ignore_errors: True
    become: yes
    tags:
      - syslogngperm
      - 4.2.2.3
      - four
      - remedy
      - all
  
  - name: 4.2.2.3 - configuring syslogngperm file
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); };"
    failed_when: no
    when: syslogngperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngperm
      - 4.2.2.3
      - four
      - remedy
      - all

  - name: 4.2.2.4 - Fetching the syslogngsendlogs value from ansible facts
    shell: echo "{{ ansible_local.syslogngsendlogs_4224_audit }}" 
    register: syslogngsendlogs
    ignore_errors: True
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - remedy
      - all
  
  - name: 4.2.2.4 - configuring syslogngsendlogs file
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
    with_items:
      - 'destination logserver { tcp("logfile.example.com" port(514)); };'
      - 'log { source(src); destination(logserver); };'
    failed_when: no
    when: syslogngsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - remedy
      - all

  - name: 4.2.2.4 - Reload service
    shell: pkill -HUP syslog-ng
    failed_when: no
    when: syslogngsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - remedy
      - all

  - name: 4.2.2.5 - Fetching the remotesyslogng value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogng_4225_audit }}" 
    register: remotesyslogng
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - remedy
      - all
  
  - name: 4.2.2.5 - configuring remotesyslogng file
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
    with_items:
      - 'source net{ tcp(); };'
      - 'destination remote { file("/var/log/remote/${FULLHOST}-log"); };'
      - 'log { source(net); destination(remote); };'
    when: remotesyslogng.stdout.find("FAILED") != -1
    failed_when: no
    ignore_errors: yes
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - remedy
      - all

  - name: 4.2.2.5 - Reload service
    shell: pkill -HUP syslog-ng
    failed_when: no
    when: remotesyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - all

  - name: 4.2.3 - Fetching the rsyslogng value from ansible facts
    shell: echo "{{ ansible_local.rsyslogng_423_audit }}" 
    register: rsyslogng
    ignore_errors: True
    become: yes
    tags:
      - rsyslogng
      - 4.2.3
      - four
      - remedy
      - all
  
  - name: 4.2.3 - Install rsyslog or syslog
    yum: name={{ rsyslog_syslog_amazonlinux1 }} state=present
    failed_when: no
    when: rsyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogng
      - 4.2.3
      - four
      - remedy
      - all

  - name: 4.2.4 - Fetching the permlogfiles value from ansible facts 
    shell: echo "{{ ansible_local.permlogfiles_424_audit }}" 
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.4
      - four
      - remedy
      - all
  
  - name: 4.2.4 - Configuring permissions to all logfiles
    shell: "find /var/log -type f -exec chmod g-wx,o-rwx {} +"
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.4
      - four
      - remedy
      - all

  - name: 4.3 - Fetching the logrotate value from ansible fact 
    shell: echo "{{ ansible_local.logrotate_43_audit }}"
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - remedy
      - all
  
  - name: 4.3 - configuring logrotate file
    lineinfile:
      path: '/etc/logrotate.conf'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    failed_when: no
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - configuring logrotate file
    shell: find /etc/logrotate.d/* -name "*"
    failed_when: no
    register: logrotate_result
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - configuring logrotate file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    loop: '{{ logrotate_result.stdout_lines }}'
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - remedy
      - all

  - name: 5.1.1 - Fetch the cron value from ansible facts
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all

  - name: 5.1.1 - Enable cron daemon 
    sysvinit:
      name: cron
      enabled: yes
    when: cron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all
      
  - name: 5.1.2 - Fetch the permcrontab value from ansible facts    
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all
   
  - name: 5.1.2 - configuring permcrontab file
    file:
      path: "/etc/crontab"
      mode: 0600
      owner: root
      group: root
    failed_when: no
    when: permcrontab.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all  
      
  - name: 5.1.3 - Fetch the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all

  - name: 5.1.3 - configuring permcronhourly file
    file:
      path: "/etc/cron.hourly"
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all   
      
  - name: 5.1.4 - Fetch the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all

  - name: 5.1.4 - configuring permcrondaily file
    file:
      path: "/etc/cron.daily"
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all 
      
  - name: 5.1.5 - Fetch the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all

  - name: 5.1.5 - configuring permcronweekly file
    file:
      path: "/etc/cron.weekly"
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all 
      
  - name: 5.1.6 - Fetch the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all

  - name: 5.1.6 - configuring permcronmonthly file
    file:
      path: "/etc/cron.monthly"
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all
      
  - name: 5.1.7 - Fetch the permcrond value from ansible facts  
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all

  - name: 5.1.7 - configuring permcrond file
    file:
      path: "/etc/cron.d"
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all
      
  - name: 5.1.8 - Fetching the atcron value from ansible facts 
    shell: echo "{{ ansible_local.atcron_518_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Creating directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0755'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Backing up cron.deny
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/atcron/cron_deny_{{ansible_hostname}}
      remote_src: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Backing up at.deny
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Removeing /etc/cron.deny
    file:
      path: "/etc/cron.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Removeing /etc/at.deny
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - configuring atcron file
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - configuring atcron file
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - remedy
      - all 
      
  - name: 5.2.1 - Fetch the sshdperm value from ansible facts  
    shell: echo "{{ ansible_local.sshdperm_521_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - remedy
      - all

  - name: 5.2.1 - configuring sshdperm file
    file:
      path: "/etc/ssh/sshd_config"
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - remedy
      - all
      
  - name: 5.2.2 - Fetching the sshprotocol value from ansible facts
    shell: echo "{{ ansible_local.sshprotocol_522_audit }}"
    register: sshprotocol
    ignore_errors: True
    become: yes
    tags:
      - sshprotocol
      - 5.2.2
      - five
      - remedy
      - all

  - name: 5.2.2 - configuring sshprotocol file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^Protocol*"
      line: Protocol 2
    when: sshprotocol.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshprotocol
      - 5.2.2
      - five
      - remedy
      - all 
      
  - name: 5.2.3 - Fetch the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_523_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.2.3
      - five
      - remedy
      - all

  - name: 5.2.3 - configuring sshloglevel file
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshloglevel
      - 5.2.3
      - five
      - remedy
      - all
      
  - name: 5.2.4 - Fetch the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_524_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.2.4
      - five
      - remedy
      - all

  - name: 5.2.4 - configuring sshx11forward file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshx11forward
      - 5.2.4
      - five
      - remedy
      - all  
      
  - name: 5.2.5 - Fetch the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_525_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.5
      - five
      - remedy
      - all

  - name: 5.2.5 - configuring sshmaxauthtries file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries_amazonlinux1 }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.5
      - five
      - remedy
      - all 
      
  - name: 5.2.6 - Fetch the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_526_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.6
      - five
      - remedy
      - all

  - name: 5.2.6 - configuring sshignorerhosts file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "IgnoreRhosts yes"
    when: sshignorerhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.6
      - five
      - remedy
      - all
      
  - name: 5.2.7 - Fetch the sshauthentication value from ansible facts
    shell: echo "{{ ansible_local.sshauthentication_527_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.2.7
      - five
      - remedy
      - all

  - name: 5.2.7 - configuring sshauthentication file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "HostbasedAuthentication no"
    when: sshauthentication.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshauthentication
      - 5.2.7
      - five
      - remedy
      - all
   
  - name: 5.2.8 - Fetch the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_528_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.2.8
      - five
      - remedy
      - all

  - name: 5.2.8 - configuring sshrootlogin file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(PermitRootLogin*|#PermitRootLogin*)"
      line: "{{ PermitRootLogin_amazonlinux1 }}"
    when: sshrootlogin.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshrootlogin
      - 5.2.8
      - five
      - remedy
      - all

  - name: 5.2.9 - Fetch the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_529_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.2.9
      - five
      - remedy
      - all

  - name: 5.2.9 - configuring sshpep file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "PermitEmptyPasswords no"
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.2.9
      - five
      - remedy
      - all 
      
  - name: 5.2.10 - Fetch the sshpue value from ansible facts
    shell: echo "{{ ansible_local.sshpue_5210_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.2.10
      - five
      - remedy
      - all

  - name: 5.2.10 - configuring sshpue file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "PermitUserEnvironment no"
    when: sshpue.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpue
      - 5.2.10
      - five
      - remedy
      - all 
      
  - name: 5.2.11 - Fetching the sshmacalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshmacalgorithm_5211_audit }}"
    register: sshmacalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshmacalgorithm
      - 5.2.11
      - five
      - remedy
      - all

  - name: 5.2.11 - configuring sshmacalgorithm file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com"
    when: sshmacalgorithm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmacalgorithm
      - 5.2.11
      - five
      - remedy
      - all
      
  - name: 5.2.12 - Fetch the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5212_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - remedy
      - all

  - name: 5.2.12 - configuring sshidletimeout file  
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval_amazonlinux1 }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - remedy
      - all
 
  - name: 5.2.12 - configuring sshidletimeout file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: "{{ ClientAliveCountMax_amazonlinux1 }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - remedy
      - all 

  - name: 5.2.13 - Fetch the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5213_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.13
      - five
      - remedy
      - all

  - name: 5.2.13 - configuring sshlogingracetime file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "LoginGraceTime 60"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.13
      - five
      - remedy
      - all
      
  - name: 5.2.14 - Fetch the sshaccess value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_5214_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - remedy
      - all

  - name: 5.2.14 - configuring sshaccess file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "{{item}}"
    with_items:
      - "AllowUsers   {{ allowusers_amazonlinux1 }}"
      - "AllowGroups  {{ allowgroups_amazonlinux1 }}"
      - "DenyUsers    {{ denyusers_amazonlinux1 }}"
      - "DenyGroups   {{ denygroups_amazonlinux1 }}"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - remedy
      - all

  - name: 5.2.15 - Fetch the sshwarningbanner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5215_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - remedy
      - all

  - name: 5.2.15 - configuring sshwarningbanner file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - remedy
      - all 
 
  - name: 5.3.1 - Fetch the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_531_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/pam.d/password-auth 
      state: present
      line: "password requisite pam_pwquality.so try_first_pass retry=3"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all  
 
  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/pam.d/system-auth 
      state: present
      line: "password requisite pam_pwquality.so try_first_pass retry=3"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all   
      
  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(minlen*|# minlen*)"
      line: "minlen = 14"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(dcredit*|# dcredit*)"
      line: "dcredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(ucredit*|# ucredit*)"
      line: "ucredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(ocredit*|# ocredit*)"
      line: "ocredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(lcredit*|# lcredit*)"
      line: "lcredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.2 - Fetch the lockout value from ansible facts
    shell: echo "{{ ansible_local.lockout_532_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - configuring lockout file
    lineinfile:
      path: /etc/pam.d/password-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - configuring lockout file
    lineinfile:
      path: /etc/pam.d/system-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all
  
  - name: 5.3.3 - Fetch the passwdreuse value from ansible facts   
    shell: echo "{{ ansible_local.passwdreuse_533_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - Grepping password.*required.*pam_pwhistory.so
    shell: cat /etc/pam.d/password-auth | grep "password.*required.*pam_pwhistory.so" | wc -l
    register: reuse
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    lineinfile:
      path: /etc/pam.d/password-auth
      state: present
      line: "password required pam_pwhistory.so remember=5"
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "0"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    command: sed -i 's/password.*required.*pam_pwhistory.so.*/& remember=5/' /etc/pam.d/password-auth
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "1"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - Grepping password.*required.*pam_pwhistory.so
    shell: cat /etc/pam.d/system-auth | grep "password.*required.*pam_pwhistory.so" | wc -l
    register: reuse
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    lineinfile:
      path: /etc/pam.d/system-auth
      state: present
      line: "password required pam_pwhistory.so remember=5"
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "0"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    command: sed -i 's/password.*required.*pam_pwhistory.so.*/& remember=5/' /etc/pam.d/system-auth
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "1"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.4 - Fetch the passwdhashing value from ansible facts 
    shell: echo "{{ ansible_local.passwdhashing_534_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - remedy
      - all 

  - name: 5.3.4 - configuring passwdhashing file
    command: sed -i 's/password.*sufficient.*pam_unix.so.*/& sha512/' /etc/pam.d/password-auth
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - remedy
      - all

  - name: 5.3.4 - configuring passwdhashing file
    command: sed -i 's/password.*sufficient.*pam_unix.so.*/& sha512/' /etc/pam.d/system-auth
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - remedy
      - all

  - name: 5.4.1.1 - Fetch the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5411_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all

  - name: 5.4.1.1 - configuring passwdexpiration file
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MAX_DAYS.*)"
      line: "PASS_MAX_DAYS {{ Pass_max_days_amazonlinux1 }}"
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all

  - name: 5.4.1.1 - Grepping users
    shell: "grep ':$6' /etc/shadow | cut -d: -f1,5 | awk -F: '$2>=365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all

  - name: 5.4.1.1 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_max="{{ Pass_max_days_amazonlinux1 }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - passwdexpiration.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all 

  - name: 5.4.1.2 - Fetching the minidays value from ansible facts 
    shell: echo "{{ ansible_local.minidays_5412_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - configuring minidays file 
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MIN_DAYS*)"
      line: "PASS_MIN_DAYS {{ Pass_min_days_amazonlinux1 }}"
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_min="{{ Pass_min_days_amazonlinux1 }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - minidays.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all 
      
  - name: 5.4.1.3 - Fetch the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5413_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.3 - configuring warningdays file
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_WARN_AGE*)"
      line: "PASS_WARN_AGE {{ Pass_warn_age_amazonlinux1 }}"
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.3 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.3 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_warn={{ Pass_warn_age_amazonlinux1 }}
    loop: "{{ echo.stdout_lines }}"
    when: 
    - warningdays.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all
      
  - name: 5.4.1.4 - Fetch the inactivepasswdlock value from ansible facts
    shell: echo "{{ ansible_local.inactivepasswdlock_5414_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - set the default password inactivity period to 30 days
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - Grepping users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when:
    - inactivepasswdlock.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all  

  - name: 5.4.1.5 - Fetching the lastpasswdchange value from ansible facts
    shell: echo "{{ ansible_local.lastpasswdchange_5415_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - remedy
      - all

  - name: 5.4.1.5 - Grepping users last password change date is in the past
    shell: |
       count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
                fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - remedy
      - all  

  - name: 5.4.2 - Fetch the sysaccnonlogin value from ansible facts
    shell: echo "{{ ansible_local.sysaccnonlogin_542_audit }}"
    register: sysaccnonlogin
    ignore_errors: True
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all
      
  - name: 5.4.2 - Ensure system accounts are non-login
    shell: |
       awk -F: '$3<500 && $7!="/sbin/nologin" {print $1}' /etc/passwd
    register: echo
    when: sysaccnonlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.2 - Ensure system accounts are non-login
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.2 Ensure system accounts are non-login
    user:
      name: "{{ item }}"
      shell: '/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when: 
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.3 - Fetch the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_543_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - remedy
      - all

  - name: 5.4.3 - set the root user default group to GID 0
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - remedy
      - all 

  - name: 5.4.4 - Fetch the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_544_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - configuring defaultuser file
    lineinfile:
      path: /etc/bashrc
      state: present
      line: "umask 027"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - configuring defaultuser file
    lineinfile:
      path: /etc/profile
      state: present
      line: "umask 027"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all      
      
  - name: 5.4.5 - Fetch the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_545_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - remedy
      - all

  - name: 5.4.5 - configuring usershelltimeout file
    lineinfile:
      path: /etc/bashrc
      state: present
      line: 'TMOUT=600'
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - remedy
      - all

  - name: 5.4.5 - configuring usershelltimeout file
    lineinfile:
      path: /etc/profile
      state: present
      line: 'TMOUT=600'
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - remedy
      - all  
      
  - name: 5.5 - Fetch the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.suaccess_55_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.5'
      - five
      - remedy
      - all

  - name: 5.5 - Grepping auth.*required.*pam_wheel.so
    shell: ( cat /etc/pam.d/su | grep "^auth.*required.*pam_wheel.so" | wc -l )
    register: suacc
    become: yes
    tags:
      - suaccess
      - '5.5'
      - five
      - remedy
      - all

  - name: 5.5 - configuring suaccess file
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: "auth required pam_wheel.so use_uid"
    when:
      - suaccess.stdout.find("FAILED") != -1
      - suacc.stdout == '0'
    become: yes
    tags:
      - suaccess
      - '5.5'
      - five
      - remedy
      - all 

  - name: 5.5 - configuring suaccess file
    lineinfile:
      path: /etc/group
      state: present
      regexp: "^(wheel*)"
      line: "wheel:x:10:root,{{ wheelgroup_amazonlinux1 }}"
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.5'
      - five
      - remedy
      - all 

###########################################################CHAPTER 6####################################################################

  - name: 6.1.1 - Fetch the auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}" 
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all
  
  - name: 6.1.1 - Audit system file permissions
    shell: "sudo rpm -Va --nomtime --nosize --nomd5 --nolinkto"
    register: echo
    when: auditsysperm.stdout.find("FAILED") != -1 
    ignore_errors: true
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all
      
  - name: 6.1.1 - Audit system file permissions
    shell: "rpm -qf {{ item }} 2>/dev/null"
    loop: "{{ echo.stdout_lines }}"
    when: auditsysperm.stdout.find("FAILED") != -1
    ignore_errors: true
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all

  - name: 6.1.2 - Fetch the permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}" 
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all
      
  - name: 6.1.2 - configuring permpasswd file
    file:
      path: "/etc/passwd"
      state: touch
      mode: 0644                     
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all 

  - name: 6.1.3 - Fetch the permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_613_audit }}" 
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - remedy
      - all
      
  - name: 6.1.3 - configuring permshadow file
    file:
      path: "/etc/shadow"           
      state: touch
      mode: 000
      owner: root
      group: root
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - remedy
      - all 

  - name: 6.1.4 - Fetching the permgroup value from ansible facts
    shell: echo "{{ ansible_local.permgroup_614_audit }}"
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - remedy
      - all
      
  - name: 6.1.4 - configuring permgroup file
    file:
      path: "/etc/group"                         
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - remedy
      - all

  - name: 6.1.5 - Fetch the permgshadow value from ansible facts  
    shell: echo "{{ ansible_local.permgshadow_615_audit }}" 
    register: permgshadow
    ignore_errors: True
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - remedy
      - all
      
  - name: 6.1.5 - configuring permgshadow file
    file:
      path: "/etc/gshadow"             
      state: touch
      mode: 000
      owner: root
      group: root 
    when: permgshadow.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - remedy
      - all  

  - name: 6.1.6 - Fetch the permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_616_audit }}" 
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - remedy
      - all
  
  - name: 6.1.6 - configuring permpasswdi file
    file:
      path: "/etc/passwd-"             
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - remedy
      - all
  
  - name: 6.1.7 - Fetch the permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_617_audit }}" 
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all

  - name: 6.1.7 - configuring permshadowi file
    file:
      path: "/etc/shadow-"             
      state: touch
      mode: 000
      owner: root
      group: root
    when: permshadowi.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all  
      
  - name: 6.1.8 - Fetch the permgroupi value from ansible facts
    shell: echo "{{ ansible_local.permgroupi_618_audit }}" 
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - remedy
      - all
 
  - name: 6.1.8 - configuring permgroupi file
    file:
      path: "/etc/group-"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - remedy
      - all   

  - name: 6.1.9 - Fetch the permgshadowi value from ansible facts
    shell: echo "{{ ansible_local.permgshadowi_619_audit }}" 
    register: permgshadowi
    ignore_errors: True
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - remedy
      - all

  - name: 6.1.9 - configuring permgshadowi file
    file:
      path: "/etc/gshadow-"
      state: touch
      mode: 0000
      owner: root
      group: root
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - remedy
      - all  

  - name: 6.1.10 - Fetch the wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_6110_audit }}" 
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all
      
  - name: 6.1.10 - Fetching world writable files
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all
      
  - name: 6.1.10 - Changing ownership to world writable files
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all 

  - name:  6.1.11 - Fetch the unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_6111_audit }}"
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all
      
  - name:  6.1.11 - Fetching unowned files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all
      
  - name:  6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all
      
  - name:  6.1.11 - Fetching unowned files or directories exist
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all
      
  - name:  6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all   

  - name:  6.1.12 - Fetch the ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6112_audit }}" 
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name:  6.1.12 - Fetching ungrouped files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all
      
  - name: 6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all
      
  - name:  6.1.12 - Fetching ungrouped files or directories exist
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all
      
  - name:  6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all  

  - name: 6.2.1 - Fetch the emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_621_audit }}" 
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all
   
  - name: 6.2.1 - Grepping users
    shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) { print $1 }'"
    register: echo
    check_mode: no
    changed_when: False
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all
      
  - name: 6.2.1 - Locking users for password fields are empty
    command: "passwd -l {{ item }}"
    with_items: "{{ echo.stdout_lines }}"
    when:
      - echo.stdout_lines is defined
      - emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.2 - Fetch the nolegacypasswd value from ansible facts
    shell: echo "{{ ansible_local.nolegacypasswd_622_audit }}" 
    register: nolegacypasswd
    ignore_errors: True
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - remedy
      - all
      
  - name: 6.2.2 - configuring nolegacypasswd file
    shell: "sudo sed -i 's/+://g' /etc/passwd"
    when: nolegacypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.3 - Fetch the nolegacyshadow value from ansible facts
    shell: echo "{{ ansible_local.nolegacyshadow_623_audit }}" 
    register: nolegacyshadow
    ignore_errors: True
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.3
      - six
      - remedy
      - all
      
  - name: 6.2.3 - configuring nolegacyshadow file
    shell: "sudo sed -i 's/+://g' /etc/shadow"
    when: nolegacyshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.3
      - six
      - remedy
      - all
 
  - name: 6.2.4 - Fetching the nolegacygroup value from ansible facts
    shell: echo "{{ ansible_local.nolegacygroup_624_audit }}" 
    register: nolegacygroup
    ignore_errors: True
    become: yes
    tags:
      - nolegacygroup
      - 6.2.4
      - six
      - remedy
      - all
      
  - name: 6.2.4 - configuring nolegacygroup file
    shell: "sudo sed -i 's/+://g' /etc/group"
    when: nolegacygroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacygroup
      - 6.2.4
      - six
      - remedy
      - all 
  
  - name: 6.2.5 - Fetch the rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_625_audit }}" 
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.5
      - six
      - remedy
      - all  
      
  - name: 6.2.5 - Removing users other than root with UID 0
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rootuid
      - 6.2.5
      - six
      - remedy
      - all  
      
  - name: 6.2.7 - Fetch the userhdir value from ansible facts
    shell: echo "{{ ansible_local.userhdir_627_audit }}" 
    register: userhdir
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - remedy
      - all
      
  - name: 6.2.7 - Grepping users home directories that do not exist
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 && $7!=/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - remedy
      - all
      
  - name: 6.2.7 - Creating home directory for user
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0700
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ echo.stdout_lines }}"
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - remedy
      - all   

  - name: 6.2.8 - Fetch the userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_628_audit }}"
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - remedy
      - all
      
  - name: 6.2.8 - Grepping users home directories permissions are 750 or more restrictive
    shell: "sudo grep /home /etc/passwd | awk -F: '{ print $1 }'"
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - remedy
      - all
      
  - name: 6.2.8 - Changing users' home directories permissions are 750 or more restrictive
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0700
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - remedy
      - all 

  - name: 6.2.9 - Fetch the userownhdir value from ansible facts
    shell: echo "{{ ansible_local.userownhdir_629_audit }}" 
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.9 - Grepping user
    shell: "cat /etc/passwd | grep '/home/*' | awk -F: '$3>=500 { print $1 }'"
    register: user
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.9 - Grepping user
    shell: "cat /etc/passwd | grep '/home/*' | awk -F: '$3>=500 { print $6 }'"
    register: dir
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.9 - Ensure users own their home directories
    shell: "stat -L -c '%U' {{ item }}"
    loop: "{{ dir.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.9 - Ensure users own their home directories
    shell: "find /home/* -nouser | awk -F'/' {'print '/'$2'/'$3'} | uniq"
    register: echo
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.9 - Change the ownership of any home directories to the correct user
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all
      
  - name: 6.2.10 - Ensure users dot files are not group or world writable
    shell: echo "{{ ansible_local.dotfiles_6210_audit }}" 
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - remedy
      - all
      
  - name: 6.2.10 - Finding users have dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - remedy
      - all
      
  - name: 6.2.10 - Changing ownership to dotfiles
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - remedy
      - all 

  - name: 6.2.11 - Fetch the forwardfiles value from ansible facts
    shell: echo "{{ ansible_local.forwardfiles_6211_audit }}" 
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - remedy
      - all
      
  - name: 6.2.11 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: forwardfiles_result
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - creating backup directory
    file:
      path: /etc/ansible/backup/forwardfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - backing up files
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/forwardfiles"
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - remedy
      - all
      
  - name: 6.2.11 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - remedy
      - all 

  - name: 6.2.12 - Fetch the netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_6212_audit }}" 
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - remedy
      - all
  
  - name: 6.2.12 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: netrcfiles_result
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - creating backup directory
    file:
      path: /etc/ansible/backup/netrcfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/netrcfiles"
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - remedy
      - all
      
  - name: 6.2.12 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - remedy
      - all 

  - name: 6.2.13 - Fetch the grpnetrcfiles value from ansible facts
    shell: echo "{{ ansible_local.grpnetrcfiles_6213_audit }}" 
    register: grpnetrcfiles
    ignore_errors: True
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - remedy
      - all
      
  - name: 6.2.13 - Finding users having .netrc Files are not group or world writable
    shell: "find /home/ -name '.netrc' -perm /g+w,o+w"
    register: echo
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - remedy
      - all
      
  - name: 6.2.13 - Changing ownership to .netrc Files 
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - remedy
      - all 

  - name: 6.2.14 - Fetch the rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6214_audit }}" 
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all
      
  - name: 6.2.14 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts'"
    register: rhosts_result
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - creating backup directory
    file:
      path: /etc/ansible/backup/rhosts
      state: directory
      mode: '0750'
      recurse: yes
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/rhosts"
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all
      
  - name: 6.2.14 - Removing .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all 

  - name: 6.2.15 - Fetch the groups value from ansible facts
    shell: echo "{{ ansible_local.groups_6215_audit }}" 
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - remedy
      - all

  - name: 6.2.15 - Adding groups to correct if any discrepancies found
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              groupadd $a
              usermod -g $a $a
            fi
        done
    failed_when: no
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - remedy
      - all 

  - name: 6.2.16 - Fetch the duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6216_audit }}" 
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all
      
  - name: 6.2.16 - Checking for duplicate UID
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all
      
  - name: 6.2.16 - Checking for duplicate UID
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when: 
     - duplicateuid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all
      
  - name: 6.2.16 - Checking for duplicate UID
    shell: "b=$(cut -f 3 -d: /etc/passwd | sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c || true"
    register: val
    when: 
     - duplicateuid.stdout.find("FAILED") != -1
     - echo.stdout != "" 
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Assign an unique UID 
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
     - duplicateuid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all 

  - name: 6.2.17 - Fetch the duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6217_audit }}" 
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all
      
  - name: 6.2.17 - Checking for duplicate GID
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all
      
  - name: 6.2.17 - Checking for duplicate GID
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when: 
     - duplicategid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all
      
  - name: 6.2.17 - Checking for duplicate GID
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when: 
     - duplicategid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.17 - Assign an unique GID 
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
     - duplicategid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all 

  - name: 6.2.18 - Fetch the duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6218_audit }}" 
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all
      
  - name: 6.2.18 - Checking if duplicate user name exist
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all
      
  - name: 6.2.18 - Checking if duplicate user name exist
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when:  
     - duplicateuser.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all
      
  - name: 6.2.18 - Displaying if duplicate user name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
     - duplicateuser.stdout.find("FAILED") != -1
     - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all

  - name: 6.2.19 - Fetch the duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6219_audit }}" 
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all
      
  - name: 6.2.19 - Checking if duplicate group name exist
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all
      
  - name: 6.2.19 - Checking if duplicate group name exist
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'"
    register: val
    when: 
     - duplicategroup.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all
      
  - name: 6.2.19 - Displaying if duplicate group name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
     - duplicategroup.stdout.find("FAILED") != -1
     - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all

  - name: Include Database
    include: tasks/after_linux.yml
