---
  - name: Include Actualfact
    include: tasks/actualfact_sles15.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

####REMEDY####
  - name: 1.1.1.1 - Fetching squashfs value from ansible facts
    shell: echo "{{ ansible_local.squashfs_1111_audit }}" 
    register: squashfs
    ignore_errors: True
    become: yes
    tags:
      - squashfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.1 - Creating squashfs configuration file
    lineinfile:
      path: /etc/modprobe.d/squashfs.conf
      line: "install squashfs /bin/true # Disable squashfs filesystems"
      state: present
      create: yes
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.1
      - one
      - all
      - remedy
      
  - name: 1.1.1.1 - Unloading squashfs module
    shell: "modprobe -r squashfs"
    failed_when: no
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Fetching udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1112_audit }}" 
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Creating udf configuration file
    lineinfile:
      path: /etc/modprobe.d/udf.conf
      line: "install udf /bin/true # Disable udf Filesystems"
      state: present
      create: yes
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - unloading udf module
    shell: "modprobe -r udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Fetching fat value from ansible facts
    shell: echo "{{ ansible_local.fat_1113_audit }}" 
    register: fat
    ignore_errors: True
    become: yes
    tags:
      - fat
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Creating fat configuration file
    lineinfile:
      path: /etc/modprobe.d/fat.conf
      line: "{{item}}"
      state: present
      create: yes
    with_items:
      - "install fat /bin/true"
      - "install vfat /bin/true"
      - "install msdos /bin/true"
    when: fat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fat
      - 1.1.1.3
      - one
      - all
      - remedy
  
  - name: 1.1.1.3 - unloading fat module
    command: "{{ item }}"
    with_items:
      - sudo modprobe -r msdos
      - sudo modprobe -r vfat
      - sudo modprobe -r fat
    when: fat.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - fat
      - 1.1.1.3
      - one
      - all
      - remedy
      
  - name: 1.1.2 - Fetching the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}" 
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 - Configuring /etc/fstab
    lineinfile:
      path: /etc/fstab
      line: tmpfs  /tmp  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0
      state: present
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: noexec,nodev,nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.3 - Fetching tmpnoexec value from ansible facts
    shell: echo "{{ ansible_local.tmpnoexec_113_audit }}" 
    register: tmpnoexec
    ignore_errors: True
    become: yes
    tags:
      - tmpnoexec
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.3 - remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnoexec
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.4 - Fetching tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_114_audit }}" 
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.4
      - one
      - all
      - remedy

  - name: 1.1.4 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnodev
      - 1.1.4
      - one
      - all
      - remedy
  
  - name: 1.1.5 - Fetching tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_115_audit }}" 
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.5 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnosuid
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.6 - Fetching shmnconfig value from ansible facts
    shell: echo "{{ ansible_local.shmconfig_116_audit }}"
    register: shmnconfig
    ignore_errors: True
    become: yes
    tags:
      - shmnconfig
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 - Editing /etc/fstab
    lineinfile:
      path: /etc/fstab
      line: tmpfs  /dev/shm  tmpfs   defaults,noexec,nodev,nosuid,seclabel  0 0
      state: present
    when: shmnconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnconfig
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 - remounting /dev/shm
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec,nodev,nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnconfig
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.7 - Fetching shmnoexec value from ansible facts 
    shell: echo "{{ ansible_local.shmnoexec_117_audit }}" 
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.7
      - one
      - all
      - remedy
 
  - name: 1.1.7 - Remounting /dev/shm
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: shmnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnoexec
      - 1.1.7
      - one
      - all
      - remedy

  - name: 1.1.8 - Fetching shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_118_audit }}" 
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.8
      - one
      - all
      - remedy

  - name: 1.1.8 - Remountinh /dev/shm
    mount:
      path: /dev/shm
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: shmnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnodev
      - 1.1.8
      - one
      - all
      - remedy

  - name: 1.1.9 - Fetching shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_119_audit }}" 
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.9
      - one
      - all
      - remedy
 
  - name: 1.1.9 - Remounting /dev/shm
    mount:
      path: /dev/shm
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnosuid
      - 1.1.9
      - one
      - all
      - remedy

  - name: 1.1.10 - Fetching var value from ansible facts
    shell: echo "{{ ansible_local.var_1110_audit }}" 
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.10 - Greping var in /etc/fstab
    shell: (sudo grep " /var" /etc/fstab | wc -l)
    register: var_result
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.10 - Message
    debug: msg="Suggestion to create /var partition"
    when:
      - var.stdout.find("FAILED") != -1
      - var_result.stdout != "0"  
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.11 - Fetching vartmp value from ansible facts
    shell: echo "{{ ansible_local.vartmp_1111_audit }}" 
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 - Greping /var/tmp in /etc/fstab
    shell: (sudo grep " /var/tmp " /etc/fstab | wc -l)
    register: vartmp_result
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 - Message
    debug: msg="Suggestion to create a partition /var/tmp"
    when:
      - vartmp.stdout.find("FAILED") != -1
      - vartmp_result.stdout != "0" 
    become: yes
    tags: 
      - vartmp
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.12 - Fetching vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_1112_audit }}" 
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.12 - Remounting /var/tmp[noexec]
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: non
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnoexec
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.13 - Fetching vtnodev value from ansible facts
    shell: echo "{{ ansible_local.vtnodev_1113_audit }}" 
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.13 - Remounting /var/tmp[nodev]
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: vtnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnodev
      - 1.1.13
      - one
      - all
      - remedy
      
  - name: 1.1.14 - Fetching vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_1114_audit }}" 
    register:  vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.14
      - one
      - all
      - remedy
    
  - name: 1.1.14 - Remounting /var/tmp[nosuid]
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: vtnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnosuid
      - 1.1.14
      - one
      - all
      - remedy

  - name: 1.1.15 - Fetching varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1115_audit }}" 
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.15 - Greping /var/log in /etc/fstab
    shell: (sudo grep " /var/log " /etc/fstab | wc -l)
    ignore_errors: yes
    register: varlog_result
    when: varlog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.15 - Ensure separate partition exists for /var/log
    debug: msg="Suggestion to create a partition /var/log"
    when:
      - varlog.stdout.find("FAILED") != -1
      - varlog_result.stdout != "0"
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.16 - Fetching varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1116_audit }}" 
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.16 - Grepping /var/log/audit in /etc/fstab 
    shell: (sudo grep " /var/log/audit" /etc/fstab | wc -l)
    register: varlogaudit_result
    when: varlogaudit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.16 - Ensure separate partition exists for /var/log/audit
    debug: msg="Suggestion to create /var/log/audit partition"
    when:
      - varlogaudit.stdout.find("FAILED") != -1
      - varlogaudit_result.stdout != "0" 
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.17 - Fetching home value from ansible facts
    shell: echo "{{ ansible_local.home_1117_audit }}" 
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - all
      - remedy

  - name: 1.1.17 - Greping /home in /etc/fstab   
    shell: '(sudo grep " /home " /etc/fstab | wc -l)'
    register: home_result
    when: home.stdout.find("FAILED") != -1
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - all
      - remedy

  - name: 1.1.17 - Ensure separate partition exists for /home
    debug: msg="suggestion to create /var/log/audit partition"
    when:
      - home.stdout.find("FAILED") != -1
      - home_result.stdout != "0"  
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - all
      - remedy

  - name: 1.1.18 - Fetching homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1118_audit }}" 
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.18
      - one
      - all
      - remedy

  - name: 1.1.18 - Remounting /home[nodev]
    mount:
      path: /home
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - homenodev
      - 1.1.18 
      - one
      - all
      - remedy

  - name: 1.1.19 - Fetching the medianoexec value from ansible facts
    shell: echo "{{ ansible_local.medianoexec_1119_audit }}"
    register: medianoexec
    ignore_errors: True
    become: yes
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - noexec option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,noexec/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianoexec.stdout.find("FAILED") != -1
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.20 - Fetching the medianodev value from ansible facts
    shell: echo "{{ ansible_local.medianodev_1120_audit }}"
    register: medianodev
    ignore_errors: True
    become: yes
    tags:
      - medianodev
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.20 - nodev option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nodev/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes	
    when: medianodev.stdout.find("FAILED") != -1	
    tags:
      - medianodev
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.21 - Fetching the medianosuid value from ansible facts
    shell: echo "{{ ansible_local.medianosuid_1121_audit }}"
    register: medianosuid
    ignore_errors: True
    become: yes
    tags:
      - medianosuid
      - 1.1.21
      - one
      - remedy
      - all

  - name: 1.1.21 - nosuid option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nosuid/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianosuid.stdout.find("FAILED") != -1	
    tags:
      - medianosuid
      - 1.1.21
      - one
      - remedy	  
      - all
      
  - name: 1.1.22 - Fetching stickybit value from ansible facts
    shell: echo "{{ ansible_local.stickybit_1122_audit }}" 
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.22
      - one
      - all
      - remedy

  - name: 1.1.22 - Setting sticky bit on all world-writable directories
    shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - stickybit
      - 1.1.22
      - one
      - all  
      - remedy

  - name: 1.1.23 - Fetching automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1123_audit }}" 
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.23
      - one
      - all
      - remedy
 
  - name: 1.1.23 - masking autofs
    systemd:
      name: autofs   
      masked: yes    
    failed_when: no
    when: automount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - automount
      - 1.1.23
      - one
      - all
      - remedy
      
  - name: 1.2.1 - Fetching gpgkey value from ansible facts
    shell: echo "{{ ansible_local.gpgkey_121_audit }}" 
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - gpgkey
      - 1.2.1
      - one
      - all
      - remedy

  - name: 1.2.1 - Ensure GPG keys are configured 
    command: "sudo rpm -qa gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'"
    when: gpgkey.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - gpgkey
      - 1.2.1
      - one
      - all
      - remedy

  - name: 1.2.2 - Fetching repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_122_audit }}" 
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
     - repoconfig
     - 1.2.2
     - one
     - all

  - name: 1.2.2 - Configuring package manager repositories
    shell: "zypper repos"
    failed_when: no
    when: repoconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
     - repoconfig
     - 1.2.2
     - one
     - all

  - name: 1.2.3 - Fetching gpgcheck value from ansible facts
    shell: echo "{{ ansible_local.gpgcheck_123_audit }}" 
    register: gpgcheck
    ignore_errors: True
    become: yes
    tags:
      - gpgcheck
      - 1.2.3
      - one
      - all
      - remedy

  - name: 1.2.3 - Setting gpgcheck to 1
    replace:
      path: /etc/zypp/zypp.conf
      regexp: "^(gpgcheck=0)"
      replace: "gpgcheck=1"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - gpgcheck
      - 1.2.3
      - one
      - all
      - remedy

  - name: 1.2.3 - Searching gpgcheck=0
    shell: grep -iRl '^gpgcheck=0' /etc/zypp/repos.d/*.repo
    register: gpgcheck_result
    failed_when: no
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - all
      - remedy

  - name: 1.2.3 - Change gpgcheck to 1 in /etc/yum.repos.d/*
    shell: "sed -i 's/gpgcheck=0/gpgcheck=1/g' {{item}}"
    loop: "{{ gpgcheck_result.stdout_lines }}"
    failed_when: no
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgcheck
      - one
      - all
      - remedy
      
  - name: 1.3.1 - Fetching sudo value from ansible facts
    shell: echo "{{ ansible_local.sudo_131_audit }}" 
    register: sudo
    ignore_errors: True
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 - Installing sudo
    zypper:
      name: sudo
      state: present
    failed_when: no
    when: sudo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.2 - Fetching sudopty value from ansible facts
    shell: echo "{{ ansible_local.sudopty_132_audit }}" 
    register: sudopty
    ignore_errors: True
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy
      
  - name: 1.3.2 - Adding a line in /etc/sudoers
    lineinfile:
      path: /etc/sudoers
      state: present
      line: "Defaults use_pty"
    when: sudopty.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy

  - name: 1.3.3 - Fetching sudologfiles value from ansible facts
    shell: echo "{{ ansible_local.sudologfiles_133_audit }}" 
    register: sudologfiles
    ignore_errors: True
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy
      
  - name: 1.3.3 - Adding a line in /etc/sudoers
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^(Defaults logfile=*|#Defaults logfile=*)'
      line: 'Defaults logfile="/var/log/sudo.log"' 
    failed_when: no
    when: sudologfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name: 1.4.1 - Fetching aide value from ansible facts
    shell: echo "{{ ansible_local.aide_141_audit }}" 
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - all
      - remedy

  - name: 1.4.1 - Installing aide
    zypper:
      name: aide
      state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - all
      - remedy

  - name: 1.4.1 - Initializing aide
    command: '{{ item }}'
    with_items:
      - aide --init
      - mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    when: aide.stdout.find("FAILED") != -1   
    failed_when: no
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - all
      - remedy

  - name: 1.4.2 - Fetching fsintegrity vslue from ansible facts
    shell: echo "{{ ansible_local.fsintegrity_142_audit }}" 
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - fsintegrity
      - 1.4.2
      - one
      - all
      - remedy

  - name: 1.4.2 - Scheduling aide check
    cron:
      name: Run Aide integrity check daily
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "/usr/sbin/aide --check"
    when: fsintegrity.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsintegrity
      - 1.4.2
      - one
      - all
      - remedy
   
  - name: 1.5.1 - Fetching bootloadpass value from ansible facts
    shell: echo "{{ ansible_local.bootloadpass_151_audit }}" 
    register: bootloadpass
    ignore_errors: True
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy
 
  - name: 1.5.1 - Installing pip2
    yum: name=python-pip state=present
    when: 
      - ansible_python_version <= "3.0.0"
      - bootloadpass.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Installing pip2 package[pexpect]
    pip:
      name: pexpect
    failed_when: no
    when: 
      - bootloadpass.stdout.find("FAILED") != -1
      - ansible_python_version <= "3.0.0"
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Checking if pexpect package available
    shell: (pip3 search pexpect | grep INSTALLED | wc -l)
    register: check_pexpect
    ignore_errors: yes
    when: 
      - bootloadpass.stdout.find("FAILED") != -1
      - ansible_python_version >= "3.0.0"
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Installing pip3 package[pexpect]
    pip:
      name: pexpect
    when:
      - bootloadpass.stdout.find("FAILED") != -1
      - ansible_python_version >= "3.0.0"
      - check_pexpect.stdout == "0"
    failed_when: no
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy
 
  - name: 1.5.1 - Setting the boot loader password
    expect:
      command: grub2-mkpasswd-pbkdf2
      responses:
        Enter password: "{{ bootloader_password_suse15 }}"
        Confirm password: "{{ bootloader_password_suse15 }}"
    when: bootloadpass.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Configuring boot loader 
    shell: "grub2-mkconfig -o /boot/grub2/grub.cfg"
    failed_when: no
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - all
      - remedy
  
  - name: 1.5.2 - Fetching bootloadperm value from ansible facts
    shell: echo "{{ ansible_local.bootloadperm_152_audit }}"
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - bootloadperm
      - 1.5.2
      - one
      - all
      - remedy
    
  - name: 1.5.2 - Setting ownership and permissions
    file:
      path: /boot/grub2/grub.cfg
      owner: root
      group: root
      mode: '0600'
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadperm
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.3 - Fetching the singleusermode value from ansible facts
    shell: echo "{{ ansible_local.singleusermode_153_audit }}" 
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - all
      - remedy

  - name: 1.5.3 - Editing /usr/lib/systemd/system/rescue.service  
    lineinfile:
      path: /usr/lib/systemd/system/rescue.service
      regexp: '^(ExecStart=*)'
      line: 'ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue'
      state: present
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - all
      - remedy
    
  - name: 1.5.3 - Editing /usr/lib/systemd/system/emergency.service     
    lineinfile:
      path: /usr/lib/systemd/system/emergency.service
      regexp: '^(ExecStart=*)'
      line: 'ExecStart=-/usr/lib/systemd/systemd-sulogin-shell emergency'
      state: present
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - all
      - remedy

  - name: 1.6.1 - Fetching coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_161_audit }}" 
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - Adding line to /etc/security/limits.conf
    lineinfile:
      state: present
      path: /etc/security/limits.conf
      regexp: '^#?\\*.*core'
      line: '* hard core 0'
      insertbefore: '^# End of file'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "^(fs.suid_dumpable*|#fs.suid_dumpable*)"
      line: 'fs.suid_dumpable=0'
      insertbefore: '^# End of file'      
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - Activating kernel parameter
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - checking if systemd-coredump is installed
    shell: (rpm -qa systemd-coredump | wc -l)
    register: coredumps_check
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy
    
  - name: 1.6.1 - Editing /etc/systemd/coredump.conf
    lineinfile:
      state: present
      path: /etc/systemd/coredump.conf
      regexp: "^(Storage*|#Storage*)"
      line: 'Storage=none'
    failed_when: no
    when:
      - coredumps.stdout.find("FAILED") != -1
      - coredumps_check.stdout == "1"
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy
      
  - name: 1.6.1 - Editing /etc/systemd/coredump.conf
    lineinfile:
      state: present
      path: /etc/systemd/coredump.conf
      regexp: "^(ProcessSizeMax*|#ProcessSizeMax*)"
      line: 'ProcessSizeMax=0'
    failed_when: no
    when:
      - coredumps.stdout.find("FAILED") != -1
      - coredumps_check.stdout == "1"
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - Reloading daemon
    systemd:
       daemon-reload: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.2 - Fetching the xdnx value from ansible facts
    shell: echo "{{ ansible_local.xdnx_162_audit }}" 
    register: xdnx
    ignore_errors: True
    become: yes
    tags:
      - xdnx
      - 1.6.2 
      - one
      - all
      - remedy
 
  - name: 1.6.2 - Grepping NX
    shell: "(journalctl | grep 'NX.*protection: active' | wc -l)"
    failed_when: no
    register: xdenb
    when: xdnx.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xdnx
      - 1.6.2 
      - one
      - all
      - remedy

  - name: 1.6.2 - Ensure XD/NX support is enabled
    debug: msg="XD/NX support is enabled"
    when: 
      - xdnx.stdout.find("FAILED") != -1
      - xdenb.stdout == "1"
    become: yes
    tags:
      - xdnx
      - 1.6.2
      - one
      - all
      - remedy
          
  - name: 1.6.2 - Ensure XD/NX support is enabled for 32bit system
    debug: msg="Install kernel with PAE support for 32-bit system"
    when:
      - xdnx.stdout.find("FAILED") != -1
      - xdenb.stdout == "0"
    become: yes
    tags:
      - xdnx
      - 1.6.2
      - one
      - all
      - remedy

  - name: 1.6.3 - Fetching aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_163_audit }}" 
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - aslr
      - 1.6.3
      - one
      - all
      - remedy

  - name: 1.6.3 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      regexp: "^(kernel.randomize_va_space*|#kernel.randomize_va_space*)"
      line: "kernel.randomize_va_space=2"
      state: present
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - aslr
      - 1.6.3
      - one
      - all
      - remedy

  - name: 1.6.3 - Activating kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - aslr
      - 1.6.3
      - one
      - all
      - remedy
      
  - name: 1.6.4 - Fetching prelink value from ansible facts
    shell: echo "{{ ansible_local.prelink_164_audit }}" 
    register: prelink
    ignore_errors: True
    become: yes
    tags:
      - prelink
      - 1.6.4
      - one
      - all
      - remedy

  - name: 1.6.4 - restoring binaries to normal
    shell: prelink -ua
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - prelink
      - 1.6.4
      - one
      - all
      - remedy

  - name: 1.6.4 - Uninstalling prelink
    zypper:
      name: prelink
      state: absent
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - prelink
      - 1.6.4
      - one
      - all
      - remedy
      
  - name: 1.7.1.1 - Fetching apprmor value from ansible facts
    shell: echo "{{ ansible_local.apparmor_1711_audit }}" 
    register: apparmor
    ignore_errors: True
    become: yes
    tags:
      - apparmor
      - 1.7.1.1
      - one
      - all
      - remedy

  - name: 1.7.1.1 - Install apparmor
    shell: "zypper install -y -t pattern apparmor"
    failed_when: no
    when: apparmor.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmor
      - 1.7.1.1
      - one
      - all
      - remedy
  
  - name: 1.7.1.2 - Fetching apparmorenb value from ansible facts
    shell: echo "{{ ansible_local.apparmorenb_1712_audit }}" 
    register: apparmorenb
    ignore_errors: True
    become: yes
    tags:
      - apparmorenb
      - 1.7.1.2
      - one
      - all
      - remedy

  - name: 1.7.1.2 - Setting parameters in GRUB_CMDLINE_LINUX
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& apparmor=1 security=apparmor/' /etc/default/grub
    failed_when: no
    when: apparmorenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorenb
      - 1.7.1.2
      - one
      - all
      - remedy

  - name: 1.7.1.2 - Updating grub2 configuration 
    command: sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    when: apparmorenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorenb
      - 1.7.1.2
      - one
      - all
      - remedy
      
  - name: 1.7.1.3 - Fetching apparmorprof value from ansible facts 
    shell: echo "{{ ansible_local.apparmorprof_1713_audit }}" 
    register: apparmorprof
    ignore_errors: True
    become: yes
    tags:
      - apparmorprof
      - 1.7.1.3 
      - one
      - all
      - remedy
  
  - name: 1.7.1.3 - Installing apparmor-utils
    zypper: 
      name: apparmor-utils
      state: present
    failed_when: no
    when: apparmorprof.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorprof
      - 1.7.1.3 
      - one
      - all
      - remedy
      
  - name: 1.7.1.3 - Ensure all AppArmor Profiles are in enforce or complain mode
    command: aa-{{ apparmorprofile_suse15 }} /etc/apparmor.d/*
    failed_when: no
    when: apparmorprof.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorprof
      - 1.7.1.3 
      - one
      - all
      - remedy
     
  - name: 1.7.1.3 -  list unconfined processes
    command: sudo aa-unconfined
    failed_when: no
    when: apparmorprof.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorprof
      - 1.7.1.3 
      - one
      - all
      - remedy
      
  - name: 1.7.1.4 - Fetching apparmorenforce value from ansible facts
    shell: echo "{{ ansible_local.apparmorenforce_1714_audit }}" 
    register: apparmorenforce
    ignore_errors: True
    become: yes
    tags:
      - apparmorenforce
      - 1.7.1.4
      - one
      - all
      - remedy
      
  - name: 1.7.1.4 - Ensure all AppArmor Profiles are enforcing
    command: aa-enforce /etc/apparmor.d/*
    failed_when: no
    when: apparmorenforce.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorenforce
      - 1.7.1.4
      - one
      - all
      - remedy
      
  - name: 1.7.1.4 - list unconfined processes
    command: aa-unconfined
    failed_when: no
    when: apparmorenforce.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmorenforce
      - 1.7.1.4
      - one
      - all
      - remedy
      
  - name: 1.8.1.1 - Fetching msgday value from ansible facts
    shell: echo "{{ ansible_local.msgday_1811_audit }}" 
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - all
      - remedy

  - name: 1.8.1.1 - removing any instances of \m , \r , \s , \v
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/motd
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - all
      - remedy

  - name: 1.8.1.1 - Adding a line in /etc/motd
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to Suse linux 15"
      create: yes
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - all
      - remedy

  - name: 1.8.1.2 - Fetching locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_1812_audit }}" 
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - locallogin
      - 1.8.1.2
      - one
      - all
      - remedy

  - name: 1.8.1.2 - Removing contents in /etc/issue
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - locallogin
      - 1.8.1.2
      - one
      - all
      - remedy
      
  - name: 1.8.1.2 - Editing the /etc/issue
    lineinfile:
      path: /etc/issue
      create: yes
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    failed_when: no
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - locallogin
      - 1.8.1.2
      - one
      - all
      - remedy

  - name: 1.8.1.3 - Fetching remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_1813_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - remotelogin
      - 1.8.1.3
      - one
      - all
      - remedy

  - name: 1.8.1.3 - Removing contents in /etc/issue
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue.net
    failed_when: no
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotelogin
      - 1.8.1.3
      - one
      - all
      - remedy
  
  - name: 1.8.1.3 - Adding a line in /etc/issue.net
    lineinfile:
      path: /etc/issue.net
      state: present
      create: yes
      line: "Authorized uses only. All activity may be monitored and reported"
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotelogin
      - 1.8.1.3
      - one
      - all
      - remedy

  - name: 1.8.1.4 - Fetching the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_1814_audit }}" 
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - motdperm
      - 1.8.1.4
      - one
      - all
      - remedy

  - name: 1.8.1.4 - Changing File permissions to /etc/motd
    file:
      dest: /etc/motd
      state: file
      owner: root
      group: root
      mode: 0644
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - motdperm
      - 1.8.1.4
      - one
      - all
      - remedy

  - name: 1.8.1.5 - Fetching the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_1815_audit }}" 
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - issueperm
      - 1.8.1.5
      - one
      - all
      - remedy

  - name: 1.8.1.5 - Change file permissions on /etc/issue 
    file:
      dest: /etc/issue
      state: file
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - issueperm
      - 1.8.1.5
      - one
      - all
      - remedy

  - name: 1.8.1.6 - Fetching the issuenetperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_1816_audit }}" 
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - issuenetperm
      - 1.8.1.6
      - one
      - all
      - remedy

  - name: 1.8.1.6 - Change file permissions on /etc/issue.net
    file:
      dest: /etc/issue.net
      state: file
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - issuenetperm
      - 1.8.1.6
      - one
      - all
      - remedy

  - name: 1.10 - Fetching the gdm value from ansible facts
    shell: echo "{{ ansible_local.gdm_110_audit }}" 
    register: gdm
    ignore_errors: True
    become: yes
    tags:
      - '1.10'
      - gdm
      - one
      - all
      - remedy
 
  - name: 1.10 - Ensure GDM login banner is configured 
    lineinfile:
      dest: "{{ item.file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
      create: yes
    with_items:
      - { file: '/etc/dconf/profile/gdm', regexp: 'user-db', line: 'user-db:user' }
      - { file: '/etc/dconf/profile/gdm', regexp: 'system-db', line: 'system-db:gdm' }
      - { file: '/etc/dconf/profile/gdm', regexp: 'file-db', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults' }
      - { file: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-enable', line: 'banner-message-enable=true' }
      - { file: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-text', line: "banner-message-text='Authorized uses only. All activity may be monitored and reported." }
      - { file: '/etc/dconf/db/gdm.d/00-login-screen', regexp: 'disable-user-list=', line: "[org/gnome/login-screen]\n# Do not show the user list \ndisable-user-list=true"}
    when: gdm.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - gdm
      - '1.10'
      - one
      - all
      - remedy

  - name: 1.10 - Adding a line to gdm files
    lineinfile:
      path: "/etc/dconf/db/gdm.d/01-banner-message"
      insertbefore: "banner-message-enable=true"
      line: "[org/gnome/login-screen]"
    failed_when: no
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.10'
      - gdm
      - one
      - remedy
      - all

  - name: 1.10 - update the system databases
    shell: "dconf update"
    failed_when: no
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - gdm
      - '1.10'
      - one
      - all
      - remedy

##################### CHAPTER-2 ###############################

  - name: 2.1.1 - Fetching the xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_211_audit }}"
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - xinetd
      - 2.1.1
      - two
      - all
      - remedy

  - name: 2.1.1 - Uninstalling xinetd
    zypper:
      name: xinetd
      state: absent
    failed_when: no
    when: xinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xinetd
      - 2.1.1
      - two
      - all 
      - remedy

  - name: 2.2.1.1 - Fetching the timesync value from ansible facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - all
      - remedy

  - name: 2.2.1.1 - Installing chrony
    zypper:
      name: chrony
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - all      
      - remedy

  - name: 2.2.1.2 - Fetching systimesyncd value from ansible facts 
    shell: echo "{{ ansible_local.systimesyncd_2212_audit }}"
    register: systimesyncd
    ignore_errors: True
    become: yes
    tags:
      - systimesyncd
      - 2.2.1.2
      - two
      - all
      - remedy
      
  - name: 2.2.1.2 - Adding line to file /etc/systemd/timesyncd.conf 
    lineinfile:
      path: /etc/systemd/timesyncd.conf
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^(NTP=*|#NTP=*)', line: "NTP=0.suse.pool.ntp.org 1.suse.pool.ntp.org #Servers listed should be In Accordance With Local Policy" }
      - { regexp: '^(FallbackNTP=*|#FallbackNTP=*)', line: "FallbackNTP=2.suse.pool.ntp.org 3.suse.pool.ntp.org #Servers listed should be In Accordance With Local Policy" }
    when: systimesyncd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - systimesyncd
      - 2.2.1.2
      - two
      - all
      - remedy

  - name: 2.2.1.2 - Adding line to file /etc/systemd/timesyncd.conf
    lineinfile:
      path: /etc/systemd/timesyncd.conf
      state: present
      line: "RootDistanceMax=1 #should be In Accordance With Local Policy"
    when: systimesyncd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - systimesyncd
      - 2.2.1.2
      - two
      - all
      - remedy
      
  - name: 2.2.1.2 - Enable and start systemd-timesyncd
    shell: "{{ item }}"
    with_items:
      - systemctl --now enable systemd-timesyncd.service
      - timedatectl set-ntp true
    failed_when: no
    when: systimesyncd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - systimesyncd
      - 2.2.1.2
      - two
      - all
      - remedy
      
  - name: 2.2.1.3 - Fetching the chrony value from ansible facts 
    shell: echo "{{ ansible_local.chrony_2213_audit }}"
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - all
      - remedy

  - name: 2.2.1.3 - Editing server lines
    lineinfile:
      path: /etc/chrony.conf
      state: present
      line: server {{ remote_server_chrony_suse15 }}
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - all
      - remedy

  - name: 2.2.1.3 - Editing in /etc/sysconfig/chronyd
    lineinfile:
      path: /etc/sysconfig/chronyd
      state: present
      regexp: "^(OPTIONS=*)"
      line: 'OPTIONS="-u chrony"'
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - all 
      - remedy

  - name: 2.2.2 - Fetching the xorg value from ansible facts
    shell: echo "{{ ansible_local.xorg_222_audit }}"
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - all
      - remedy

  - name: 2.2.2 - Uninstalling xorg-xll-server
    zypper:
      name: "xorg-xll-server*"
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - all      
      - remedy

  - name: 2.2.3 - Fetching the avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_223_audit }}"
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.3 - Stopping avahi-daemon.socket
    systemd:
      name: avahi-daemon.socket
      state: stopped
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.3 - Stopping avahi-daemon.service
    systemd:
      name: avahi-daemon.service
      state: stopped
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.3 - Uninstalling avahi-autoipd and avahi
    zypper:
      name: "{{item}}"
      state: absent
    with_items:
      - avahi
      - avahi-autoipd
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.4 - Fetching the cups value from ansible facts
    shell: echo "{{ ansible_local.cups_224_audit }}"
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - all
      - remedy

  - name: 2.2.4 - Uninstalling cups
    zypper:
      name: cups
      state: absent
    failed_when: no
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - all
      - remedy

  - name: 2.2.5 - Fetching the dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_225_audit }}"
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - all
      - remedy

  - name: 2.2.5 - Uninstalling dhcp
    zypper:
      name: dhcp
      state: absent
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - all
      - remedy

  - name: 2.2.6 - Fetching the ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_226_audit }}"
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - all
      - remedy

  - name: 2.2.6 - Uninstalling openldap2
    zypper:
      name: openldap2
      state: absent
    failed_when: no
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - all 
      - remedy
      
  - name: 2.2.7 - Fetching the nfs value from ansible facts
    shell: echo "{{ ansible_local.nfs_227_audit }}"
    register: nfs
    ignore_errors: True
    become: yes
    tags:
      - nfs
      - 2.2.7
      - two
      - all
      - remedy

  - name: 2.2.7 - Uninstalling nfs-utils
    zypper:
      name: nfs-utils
      state: absent
    failed_when: no
    when: nfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfs
      - 2.2.7
      - two
      - all
      - remedy

  - name: 2.2.7 - Uninstalling nfs-kernel-server
    zypper:
      name: nfs-kernel-server
      state: absent
    failed_when: no
    when: nfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfs
      - 2.2.7
      - two
      - all
      - remedy
      
  - name: 2.2.8 - Fetching the rpcbind value from ansible facts        
    shell: echo "{{ ansible_local.rpcbind_228_audit }}"
    register: rpcbind
    ignore_errors: True
    become: yes
    tags:
      - rpcbind
      - 2.2.8
      - two
      - all
      - remedy

  - name: 2.2.8 - Uninstalling rpcbind      
    zypper:
      name: rpcbind
      state: absent
    failed_when: no
    when: rpcbind.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rpcbind
      - 2.2.8
      - two
      - all
      - remedy

  - name: 2.2.9 - Fetching dns value from ansible facts
    shell: echo "{{ ansible_local.dns_229_audit }}"
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - dns
      - 2.2.9
      - two
      - all
      - remedy

  - name: 2.2.9 - Uninstalling bind
    zypper:
      name: bind
      state: absent
    failed_when: no
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dns
      - 2.2.9
      - two
      - all
      - remedy

  - name: 2.2.10 - Fetching the ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_2210_audit }}"
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - ftp
      - 2.2.10
      - two
      - all
      - remedy

  - name: 2.2.10 - Uninstalling vsftpd
    zypper:
      name: vsftpd
      state: absent
    failed_when: no
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ftp
      - 2.2.10
      - two
      - all      
      - remedy

  - name: 2.2.11 - Fetching the http value from ansible facts
    shell: echo "{{ ansible_local.http_2211_audit }}"
    register: http
    ignore_errors: True
    become: yes
    tags:
      - http
      - 2.2.11
      - two
      - all
      - remedy

  - name: 2.2.11 - Uninstalling apache2
    zypper:
      name: apache2
      state: absent
    failed_when: no
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - http
      - 2.2.11
      - two
      - all
      - remedy

  - name: 2.2.12 - Fetching the imap value from ansible facts
    shell: echo "{{ ansible_local.imap_2212_audit }}"
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - imap
      - 2.2.12
      - two
      - all 
      - remedy

  - name: 2.2.12 - Uninstalling dovecot
    zypper:
      name: dovecot
      state: absent
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.12
      - two
      - all
      - remedy

  - name: 2.2.13 - Fetching the samba value from ansible facts
    shell: echo "{{ ansible_local.samba_2213_audit }}"
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - samba
      - 2.2.13
      - two
      - all
      - remedy

  - name: 2.2.13 - Uninstalling samba
    zypper:
      name: samba
      state: absent
    failed_when: no
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - samba
      - 2.2.13
      - two
      - all
      - remedy

  - name: 2.2.14 - Fetching the proxy value from ansible facts 
    shell: echo "{{ ansible_local.proxy_2214_audit }}"
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - proxy
      - 2.2.14
      - two
      - all
      - remedy

  - name: 2.2.14 - Uninstalling squid
    zypper:
      name: squid
      state: absent
    failed_when: no
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - proxy
      - 2.2.14
      - two
      - all
      - remedy

  - name: 2.2.15 - Fetching the snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_2215_audit }}"
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - snmp
      - 2.2.15
      - two
      - all
      - remedy

  - name: 2.2.15 - Uninstalling net-snmp
    zypper:
      name: net-snmp
      state: absent
    failed_when: no
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - snmp
      - 2.2.15
      - two
      - all
      - remedy

  - name: 2.2.16 - Fetching the mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2216_audit }}"
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - mail
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.16 - Installing postfix
    zypper: name=postfix state=present
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.16 - Adding a line to /etc/postfix/main.cf
    lineinfile:
      path: /etc/postfix/main.cf
      state: present
      regexp: "^(inet_interfaces = localhost)"
      line: "inet_interfaces = loopback-only"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.16 - Restarting postfix
    service:
      name: postfix
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.17 - Fetching the rsync value from ansible facts 
    shell: echo "{{ ansible_local.rsync_2217_audit }}"
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - rsync
      - 2.2.17
      - two
      - all
      - remedy

  - name: 2.2.17 - Uninstalling rsync
    zypper:
      name: rsync
      state: absent
    failed_when: no
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsync
      - 2.2.17
      - two
      - all
      - remedy

  - name: 2.2.18 - Fetching the nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2218_audit }}"
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - nis
      - 2.2.18
      - two
      - all
      - remedy

  - name: 2.2.18 - Uninstalling ypserv
    zypper:
      name: ypserv
      state: absent
    failed_when: no
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nis
      - 2.2.18
      - two
      - all
      - remedy

  - name: 2.2.19 - Fetching the telnet value from ansible facts
    shell: echo "{{ ansible_local.telnet_2219_audit }}"
    register: telnet
    ignore_errors: True
    become: yes
    tags:
      - telnet
      - 2.2.19
      - two
      - all
      - remedy

  - name: 2.2.19 - Uninstalling telnet
    zypper:
      name: telnet
      state: absent
    failed_when: no
    when: telnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnet
      - 2.2.19
      - two
      - all     
      - remedy

  - name: 2.3.1 - Fetching the nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}"
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - all
      - remedy

  - name: 2.3.1 - Uninstalling ypbind
    zypper:
      name: ypbind
      state: absent
    failed_when: no
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - all
      - remedy

  - name: 2.3.2 - Fetching the rshc value from ansible facts
    shell: echo "{{ ansible_local.rshc_232_audit }}"
    register: rshc
    ignore_errors: True
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - all
      - remedy

  - name: 2.3.2 - Uninstalling rsh
    zypper:
      name: rsh
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - all
      - remedy

  - name: 2.3.3 - Fetching the talkc value from ansible facts
    shell: echo "{{ ansible_local.talkc_233_audit }}"
    register: talkc
    ignore_errors: True
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - all
      - remedy

  - name: 2.3.3 - Uninstalling talk
    zypper:
      name: talk
      state: absent
    failed_when: no
    when: talkc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - all
      - remedy

  - name: 2.3.4 - Fetching the telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_234_audit }}"
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - all
      - remedy

  - name: 2.3.4 - Uninstalling telnet
    zypper:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - all
      - remedy

  - name: 2.3.5 - Fetching the ldapc value from ansible facts
    shell: echo "{{ ansible_local.ldapc_235_audit }}"
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - all
      - remedy

  - name: 2.3.5 - Uninstalling openldap2-clients
    zypper:
      name: openldap2-clients
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - all
      - remedy

  - name: 2.4 - Fetching the nonessenserv value from ansible facts
    shell: echo "{{ ansible_local.nonessenserv_24_audit }}"
    register: nonessenserv
    ignore_errors: True
    become: yes
    tags:
      - nonessenserv
      - 2.4
      - two
      - all
      - remedy

  - name: 2.4 - Uninstalling nonessenserv
    zypper:
      name: "{{ item }}"
      state: absent
    when: "{{ nonessen_service_suse15.split(',') }}"
    failed_when: no
    when: nonessenserv.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nonessenserv
      - 2.4
      - two
      - all
      - remedy

######################### CHAPTER-3 ###########################

  - name: 3.1.1 - Fetching ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_311_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - all
      - remedy
      
  - name: 3.1.1 - Disabling IPv6 through the GRUB2 config
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& ipv6.disable=1/' /etc/default/grub
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - all
      - remedy
      
  - name: 3.1.1 - Updating the grub2 configuration
    command: grub2-mkconfig –o /boot/grub2/grub.cfg
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.2 - Fetching wireless value from ansible facts
    shell: echo "{{ ansible_local.wireless_312_audit }}"
    register: wireless
    ignore_errors: True
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.1.2 - Installing wireless-tools
    zypper: name=wireless-tools state=present
    failed_when: no
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.1.2 - Grepping wireless interfaces
    shell: "ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w' | wc -l"
    register: iplink
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Disabling wireless interfaces
    shell: "wifi=$(ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w') && sudo ip link set $wifi down"
    when:
      - wireless.stdout.find("FAILED") != -1
      - iplink.stdout != "0"
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - remedy
      - all

  - name: Checking if ipv6 is enabled or disabled before excecuting ipforward, routedpacket, icmp
    shell: |
        if [ $(cat /proc/cmdline | grep ipv6.disable=1 | wc -l) -eq 0 ] && [ $(sysctl net.ipv6.conf.all.disable_ipv6 | grep 1 | wc -l) -eq 0 ]; then
          echo "enabled"
        else
          echo "disabled"
        fi
    register: ip6_en_dis
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - routedpacket
      - 3.3.1
      - three
      - icmp
      - 3.3.2
      - all
      - remedy

  - name: 3.2.1 - Fetching ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_321_audit }}"
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - all
      - remedy
      
  - name: 3.2.1 - Adding ipforward parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.ip_forward*|#net.ipv4.ip_forward*)"
      line: "net.ipv4.ip_forward=0"
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - all      
      - remedy

  - name: 3.2.1 - Adding ipforward parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.forwarding*|#net.ipv6.conf.all.forwarding*)"
      line: "net.ipv6.conf.all.forwarding=0"
    failed_when: no
    when:
      - ipforward.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.forwarding
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when:
      - ipforward.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.2 - Fetching packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_322_audit }}"
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Adding packetredirect parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - { regexp: '^(net.ipv4.conf.all.send_redirects*|#net.ipv4.conf.all.send_redirects*)', line: 'net.ipv4.conf.all.send_redirects=0' }
      - { regexp: '^(net.ipv4.conf.default.send_redirects*|#net.ipv4.conf.default.send_redirects*)', line: 'net.ipv4.conf.default.send_redirects=0'}
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.send_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.send_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - all      
      - remedy

  - name: 3.3.1 - Fetching routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_331_audit }}"
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - all
      - remedy
      
  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - { regexp: '^(net.ipv4.conf.all.accept_source_route*|#net.ipv4.conf.all.accept_source_route*)', line: 'net.ipv4.conf.all.accept_source_route=0' }
      - { regexp: '^(net.ipv4.conf.default.accept_source_route*|#net.ipv4.conf.default.accept_source_route*)', line: 'net.ipv4.conf.default.accept_source_route=0' }
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_source_route 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.accept_source_route*|#net.ipv6.conf.all.accept_source_route*)"
      line: "net.ipv6.conf.all.accept_source_route=0"
    with_items:
      - { regexp: '^(net.ipv6.conf.all.accept_source_route*|#net.ipv6.conf.all.accept_source_route*)', line: 'net.ipv6.conf.all.accept_source_route=0' }
      - { regexp: '^(net.ipv6.conf.default.accept_source_route*|#net.ipv6.conf.default.accept_source_route*)', line: 'net.ipv6.conf.default.accept_source_route=0' }
    failed_when: no
    when:
      - routedpacket.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    when:
      - routedpacket.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.2 - Fetching icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_332_audit }}"
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - all
      - remedy
      
  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^(net.ipv4.conf.all.accept_redirects*|#net.ipv4.conf.all.accept_redirects*)', line: 'net.ipv4.conf.all.accept_redirects=0'  }
      - { regexp: '^(net.ipv4.conf.default.accept_redirects*|#net.ipv4.conf.default.accept_redirects*)', line: 'net.ipv4.conf.default.accept_redirects=0'  }
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - { regexp: '^(net.ipv6.conf.all.accept_redirects*|#net.ipv6.conf.all.accept_redirects*)', line: 'net.ipv6.conf.all.accept_redirects=0' }
      - { regexp: '^(net.ipv6.conf.default.accept_redirects*|#net.ipv6.conf.default.accept_redirects*)', line: 'net.ipv6.conf.default.accept_redirects=0' }
    failed_when: no
    when:
      - icmp.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when:
      - icmp.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.3 - Fetching secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_333_audit }}"
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - all
      - remedy
   
  - name: 3.3.3 - Adding secureicmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - { regexp: '^(net.ipv4.conf.all.secure_redirects*|#net.ipv4.conf.all.secure_redirects*)', line: 'net.ipv4.conf.default.secure_redirects=0' }
      - { regexp: '^(net.ipv4.conf.default.secure_redirects*|#net.ipv4.conf.default.secure_redirects*)', line: 'net.ipv4.conf.default.secure_redirects=0' }
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - all
      - remedy

  - name: 3.3.3 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.secure_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.secure_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - all      
      - remedy

  - name: 3.3.4 - Fetching suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_334_aduit }}"
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - all   
      - remedy

  - name: 3.3.4 - Adding suspicious parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - { regexp: '^(net.ipv4.conf.all.log_martians*|#net.ipv4.conf.all.log_martians*)', line: 'net.ipv4.conf.all.log_martians=1' }
      - { regexp: '^(net.ipv4.conf.default.log_martians*|#net.ipv4.conf.default.log_martians*)', line: 'net.ipv4.conf.default.log_martians=1' }
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - all
      - remedy

  - name: 3.3.4 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.log_martians 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.log_martians
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - all      
      - remedy

  - name: 3.3.5 - Fetching broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_335_audit }}"
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - all   
      - remedy

  - name: 3.3.5 - Adding broadcasticmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_echo_ignore_broadcasts*|#net.ipv4.icmp_echo_ignore_broadcasts*)"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - all
      - remedy

  - name: 3.3.5 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - all
      - remedy

  - name: 3.3.6 - Fetching bogusicmp value from ansible facts 
    shell: echo "{{ ansible_local.bogusicmp_336_audit }}"
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - all
      - remedy
      
  - name: 3.3.6 - Adding bogusicmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_ignore_bogus_error_responses*|#net.ipv4.icmp_ignore_bogus_error_responses*)"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - all
      - remedy

  - name: 3.3.6 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - all      
      - remedy

  - name: 3.3.7 - Fetching reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_337_audit }}"
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - all
      - remedy
      
  - name: 3.3.7 - Adding reversepathfilter parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^(net.ipv4.conf.all.rp_filter*|#net.ipv4.conf.all.rp_filter*)" ,line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^(net.ipv4.conf.default.rp_filter*|#net.ipv4.conf.default.rp_filter*)" ,line: "net.ipv4.conf.default.rp_filter=1"}
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - all
      - remedy

  - name: 3.3.7 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - all       
      - remedy

  - name: 3.3.8 - Fetching tcpsyncookies value from ansible facts  
    shell: echo "{{ ansible_local.tcpsyncookies_338_audit }}"
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - all   
      - remedy

  - name: 3.3.8 - Adding tcpsyncookies parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.tcp_syncookies*|#net.ipv4.tcp_syncookies*)"
      line: "net.ipv4.tcp_syncookies=1"
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - all
      - remedy

  - name: 3.3.8 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - all
      - remedy

  - name: 3.3.9 - Fetching ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_339_audit }}"
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - all   
      - remedy

  - name: 3.3.9 - Adding ipv6router parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.regexp }}'
    with_items:
      - { regexp: '^(net.ipv6.conf.all.accept_ra*|#net.ipv6.conf.all.accept_ra*)', line: 'net.ipv6.conf.all.accept_ra=0' }
      - { regexp: '^(net.ipv6.conf.default.accept_ra*|#net.ipv6.conf.default.accept_ra*)', line: 'net.ipv6.conf.default.accept_ra=0' }
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - all
      - remedy

  - name: 3.3.9 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_ra 
        value: '0'
        sysctl_set: yes    
      - name: net.ipv6.conf.default.accept_ra
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - all      
      - remedy

  - name: 3.4.1 - Fetching dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_341_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.4.1
      - three
      - all      
      - remedy
      
  - name: 3.4.1 - Creating dccp configuration file
    lineinfile:
      path: /etc/modprobe.d/dccp.conf
      state: present
      line: "install dccp /bin/true"
      create: yes
    failed_when: no
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.4.1
      - three
      - all 
      - remedy

  - name: 3.4.2 - Fetching sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_342_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.4.2
      - three
      - all   
      - remedy

  - name: 3.4.2 - Creating sctp configuration file
    lineinfile:
      path: /etc/modprobe.d/sctp.conf
      state: present
      line: "install sctp /bin/true"
      create: yes
    failed_when: no
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.4.2
      - three
      - all
      - remedy

  - name: 3.5.1.1 - Fetching firewallpack value from ansible facts
    shell: echo "{{ ansible_local.firewallpack_3511_audit }}"
    register: firewallpack
    ignore_errors: True
    become: yes
    tags:
      - firewallpack
      - 3.5.1.1
      - three
      - all
      - remedy
      
  - name: 3.5.1.1 - Installing firewalld
    zypper: name=firewalld  state=present
    failed_when: no
    when: firewallpack.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - firewallpack
      - 3.5.1.1
      - three
      - all
      - remedy

  - name: 3.5.1.1 - Installing iptables
    zypper: name=iptables  state=present
    failed_when: no
    when: firewallpack.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - firewallpack
      - 3.5.1.1
      - three
      - all
      - remedy
      
  - name: 3.5.1.2 - Ensure nftables is not installed or stopped and masked 
    shell: echo "{{ ansible_local.nftablestop_3512_audit }}"
    register: nftablestop
    ignore_errors: True
    become: yes
    tags:
      - nftablesstop
      - 3.5.1.2
      - three
      - all
      - remedy

  - name: 3.5.1.2 - Uninstalling nftables
    zypper:  
      name: nftables
      state: absent
    when: nftablestop.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablestop
      - 3.5.1.2
      - three
      - all      
      - remedy

  - name: 3.5.1.3 - Fetching firewallenb value from ansible facts 
    shell: echo "{{ ansible_local.firewallenb_3513_audit }}"
    register: firewallenb
    ignore_errors: True
    become: yes
    tags:
      - firewallenb
      - 3.5.1.3
      - three
      - all
      - remedy
      
  - name: 3.5.1.3 - Unmasking firewalld
    systemd:
      name: firewalld
      masked: no
    failed_when: no
    when: firewallenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallenb
      - 3.5.1.3
      - three
      - all      
      - remedy

  - name: 3.5.1.3 - Enabling firewalld 
    systemd:
      name: firewalld
      enabled: yes
    failed_when: no
    when: firewallenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallenb
      - 3.5.1.3
      - three
      - all           
      - remedy

  - name: 3.5.1.4 - Fetching defaultzone value from ansible facts
    shell: echo "{{ ansible_local.defaultzone_3514_audit }}"
    register: defaultzone
    ignore_errors: True
    become: yes
    tags:
      - defaultzone
      - 3.5.1.4
      - three
      - all
      - remedy

  - name: 3.5.1.4 - Setting the default zone
    command: firewall-cmd --set-default-zone=public
    failed_when: no
    when: defaultzone.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultzone
      - 3.5.1.4
      - three
      - all           
      - remedy

  - name: 3.5.1.5 - Fetching netinterface value from ansible facts 
    shell: echo "{{ ansible_local.netinterface_3515_audit }}"
    register: netinterface
    ignore_errors: True
    become: yes
    tags:
      - netinterface
      - 3.5.1.5
      - three
      - all
      - remedy

  - name: 3.5.1.5 - Assigning an interfaces appropriate zone 
    command: firewall-cmd --zone={{ zone_name_suse15 }} --change-interface={{ interface_name_suse15 }}
    failed_when: no
    when: netinterface.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netinterface
      - 3.5.1.5
      - three
      - all           
      - remedy

  - name: 3.5.1.6 - Fetching unnecservport value from ansible facts
    shell: echo "{{ ansible_local.unnecservport_3516_audit }}"
    register: unnecservport
    ignore_errors: True
    become: yes
    tags:
      - unnecservport
      - 3.5.1.6
      - three
      - all
      - remedy

  - name: 3.5.1.6 - Removing an unnecessary service  
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: disabled
    failed_when: no
    loop: "{{ unnecservport_service_suse15.split(',') }}"
    when: unnecservport.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unnecservport
      - 3.5.1.6
      - three
      - all  
      - remedy

  - name: 3.5.1.6 - Removing an unnecessary ports 
    firewalld:
      port: "{{ item }}"
      permanent: yes
      state: disabled
    failed_when: no
    loop: "{{ unnecservport_port_suse15.split(',') }}"
    when: unnecservport.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unnecservport
      - 3.5.1.6
      - three
      - all        
      - remedy

  - name: 3.5.1.6 - reloading the firewalld
    shell: firewall-cmd --reload
    failed_when: no
    when: unnecservport.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unnecservport
      - 3.5.1.6
      - three
      - all
      - remedy

  - name: 3.5.2.1 - Fetching the nftablesins value from ansible facts
    shell: echo "{{ ansible_local.nftablesins_3521_audit }}"
    register: nftablesins
    ignore_errors: True
    become: yes
    tags:
      - nftablesins
      - 3.5.2.1
      - three
      - remedy
      - all

  - name: 3.5.2.1 - Installing nftables
    yum:
      name: nftables
      state: present
    when: nftablesins.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - nftablesins
      - 3.5.2.1
      - three
      - remedy
      - all

  - name: 3.5.2.2 - Fetching the firewallno value from ansible facts
    shell: echo "{{ ansible_local.firewallno_3522_audit }}"
    register: firewallno
    ignore_errors: True
    become: yes
    tags:
      - firewallno
      - 3.5.2.2
      - three
      - remedy
      - all

  - name: 3.5.2.2 - Masking firewalld
    systemd:
      name: firewalld
      masked: yes
    when: firewallno.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallno
      - 3.5.2.2
      - three
      - remedy
      - all

  - name: 3.5.2.3 - Fetching the iptablesflush value from ansible facts
    shell: echo "{{ ansible_local.iptablesflush_3523_audit }}"
    register: iptablesflush
    ignore_errors: True
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all

  - name: 3.5.2.3 - Creating a directory
    file:
      path: /etc/ansible/backup/iptablesflush
      state: directory
      mode: '0750'
      recurse: yes
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all

  - name: 3.5.2.3 - Saving iptablesrules
    shell: "{{ item }}"
    with_items:
      - 'iptables-save >> /etc/ansible/backup/iptablesflush/iptables_rules_{{ansible_hostname}}'
      - 'ip6tables-save >> /etc/ansible/backup/iptablesflush/ip6tables_rules_{{ansible_hostname}}'
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all

  - name: 3.5.2.4 - Fetching the tablexists value from ansible facts
    shell: echo "{{ ansible_local.tablexists_3524_audit }}"
    register: tablexists
    ignore_errors: True
    become: yes
    tags:
      - tablexists
      - 3.5.2.4
      - three
      - remedy
      - all

  - name: 3.5.2.4 - Creating a table in nftables
    command: nft create table inet {{ table_name_suse15 }}
    failed_when: no
    when: tablexists.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tablexists
      - 3.5.2.4
      - three
      - remedy
      - all

  - name: 3.5.2.5 - Fetching the basechains value from ansible facts
    shell: echo "{{ ansible_local.basechains_3525_audit }}"
    register: basechains
    ignore_errors: True
    become: yes
    tags:
      - basechains
      - 3.5.2.5
      - three
      - remedy
      - all

  - name: 3.5.2.5 - Creating the base chains
    shell: '{{ item }}'
    with_items:
      - nft create chain inet {{ table_name_bc_suse15 }} {{ base_chain_name_input_suse15 }} { type filter hook input priority 0 \; }
      - nft create chain inet {{ table_name_bc_suse15 }} {{ base_chain_name_output_suse15 }} { type filter hook output priority 0 \; }
      - nft create chain inet {{ table_name_bc_suse15 }} {{ base_chain_name_forward_suse15 }} { type filter hook forward priority 0 \; }
    failed_when: no
    when: basechains.stdout.find("FAILED") != -1
    become: yes
    tags:
      - basechains
      - 3.5.2.5
      - three
      - remedy
      - all

  - name: 3.5.2.6 - Fetching the nfloopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.nfloopbacktraffic_3526_audit }}"
    register: nfloopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.6 - Implementing the loopback rules for ipv6
    command: "{{ item }}"
    with_items:
      - nft add rule inet filter input iif lo accept
      - nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop
    failed_when: no
    when: nfloopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.6 - Checking if ipv6 is enabled or disabled
    shell: |
        if [ $(cat /proc/cmdline | grep ipv6.disable=1 | wc -l) -eq 0 ] && [ $(sysctl net.ipv6.conf.all.disable_ipv6 | grep 1 | wc -l) -eq 0 ]; then
          echo "enabled"
        else
          echo "disabled"
        fi
    register: ip6_en_dis_nfloopbacktraffic
    become: yes
    when: nfloopbacktraffic.stdout.find("FAILED") != -1
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.6 - adding loopback rules for ipv6
    shell: 'nft add rule inet filter input ip6 saddr ::1 counter drop'
    become: yes
    when:
      - nfloopbacktraffic.stdout.find("FAILED") != -1
      - ip6_en_dis_nfloopbacktraffic.stdout == "enabled"
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.7 - Fetching the nfoutbound value from ansible facts
    shell: echo "{{ ansible_local.nfoutbound_3527_audit }}"
    register: nfoutbound
    ignore_errors: True
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - name: 3.5.2.7 - Checking out if outbound connections and establish connections
    shell: |
       if [ $(sudo nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ] || [ $(sudo nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ]; then
            echo "not present"
       else
            echo "present"
            exit 1
       fi
    register: nftables_outbound
    failed_when: no
    when: nfoutbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - debug: msg="Add the outbound rules in nftables"
    when:
      - nfoutbound.stdout.find("FAILED") != -1
      - nftables_outbound.stdout == "not present"
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - name: 3.5.2.8 - Fetching the nffirewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.nffirewallpolicy_3528_audit }}"
    register: nffirewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.8 - Checking out if outbound connections and establish connections
    shell: |
       if [ $(sudo nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ] || [ $(sudo nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ]; then
            echo "not present"
       else
            echo "present"
            exit 1
       fi
    register: nftables_nff_outbound
    failed_when: no
    when: nffirewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - debug: msg="Add the outbound rules in nftables"
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "not present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.8 - creating a directory iptables_nft
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.8 - saving the existing nftables ruleset
    shell: '{{ item }}'
    with_items:
      - nft list ruleset > /etc/ansible/backup/iptables_nft/nft_rules
      - sed -i '1s/^/#!\/sbin\/nft -f\nflush ruleset\n/' /etc/ansible/backup/iptables_nft/nft_rules
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.8 - adding the inbound rules before droping the policy
    shell: nft add rule inet {{ table_name_suse15 }} input {{ item.split(' ')[0] }} dport {{ item.split(' ')[1] }} accept
    loop: "{{ inbound_nft_suse15.split(',') }}"
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.9 - Implementing a default DROP policy
    shell: '{{item}}'
    with_items:
      - nft chain {{ table_family_suse15 }} {{ table_name_nf_suse15 }} input { policy drop \; }
      - nft chain {{ table_family_suse15 }} {{ table_name_nf_suse15 }} output { policy drop \; }
      - nft chain {{ table_family_suse15 }} {{ table_name_nf_suse15 }} forward { policy drop \; }
    failed_when: no
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - Fetching the nftablesenb value from ansible facts
    shell: echo "{{ ansible_local.nftablesenb_3529_audit }}"
    register: nftablesenb
    ignore_errors: True
    become: yes
    tags:
      - nftablesenb
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - Enabling nftables
    service:
      name: nftables
      enabled: yes
    failed_when: no
    when: nftablesenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablesenb
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.10 - Fetching the nftablesrules value from ansible facts
    shell: echo "{{ ansible_local.nftablesrules_35210_audit }}"
    register: nftablesrules
    ignore_errors: True
    become: yes
    tags:
      - nftablesrules
      - 3.5.2.10
      - three
      - remedy
      - all

  - name: 3.5.2.10 - Setting up nftables ruleset on boot
    lineinfile:
      path: /etc/sysconfig/nftables.conf
      line: 'include "/etc/nftables/nftables.rules"'
      state: present
    failed_when: no
    when: nftablesrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablesrules
      - 3.5.2.10
      - three
      - remedy
      - all

  - name: 3.5.3.1.1 - Fetching iptablesins value from ansible facts
    shell: echo "{{ ansible_local.iptablesins_35311_audit }}"
    register: iptablesins
    ignore_errors: True
    become: yes
    tags:
      - iptablesins
      - 3.5.3.1.1
      - three
      - all
      - remedy
      
  - name: 3.5.3.1.1 - Installing iptables
    zypper: 
      name: iptables
      state: present
    failed_when: no
    when: iptablesins.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesins
      - 3.5.3.1.1
      - three
      - all
      - remedy

  - name: 3.5.3.1.2 - Fetching nftables value from ansible facts
    shell: echo "{{ ansible_local.nftables_35312_audit }}"
    register: nftables
    ignore_errors: True
    become: yes
    tags:
      - nftables
      - 3.5.3.1.2
      - three
      - all
      - remedy
      
  - name: 3.5.3.1.2 - Uninstalling nftables
    zypper: 
      name: nftables
      state: absent
    failed_when: no
    when: nftables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftables
      - 3.5.3.1.2
      - three
      - all
      - remedy

  - name: 3.5.3.1.3 - Fetching firewalldis value from ansible facts
    shell: echo "{{ ansible_local.firewalldis_35313_audit }}"
    register: firewalldis
    ignore_errors: True
    become: yes
    tags:
      - firewalldis
      - 3.5.3.1.3
      - three
      - all
      - remedy

  - name: 3.5.3.1.3 - Masking firewalld
    systemd:
      name: firewalld
      masked: yes
    when: firewalldis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewalldis
      - 3.5.3.1.3
      - three
      - all      
      - remedy

  - name: 3.5.3.2.2 - Fetching the loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.loopbacktraffic_35322_audit }}"
    register: loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - loopbacktraffic
      - 3.5.3.2.2
      - three
      - remedy
      - all

  - name: 3.5.3.2.2 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT
      - iptables -A OUTPUT -o lo -j ACCEPT
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktraffic
      - 3.5.3.2.2
      - three
      - remedy
      - all

  - name: 3.5.3.2.3 - Fetching the outbound value from ansible facts
    shell: echo "{{ ansible_local.outbound_35323_audit }}"
    register: outbound
    ignore_errors: True
    become: yes
    tags:
      - outbound
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - name: 3.5.3.2.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outbound.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_35324_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_suse15.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_35321_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_suse15.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.2 - Fetching the ipv6loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.ipv6loopbacktraffic_35332_audit }}"
    register: ipv6loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.5.3.3.2
      - three
      - remedy
      - all

  - name: 3.5.3.3.2 - Implementing the loopback rules
    command: "{{item}}"
    with_items:
      - ip6tables -A INPUT -i lo -j ACCEPT
      - ip6tables -A OUTPUT -o lo -j ACCEPT
      - ip6tables -A INPUT -s ::1 -j DROP
    failed_when: no
    when: ipv6loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.5.3.3.2
      - three
      - remedy
      - all

  - name: 3.5.3.3.3 - Fetching the ipv6outbound value from ansible facts
    shell: echo "{{ ansible_local.ipv6outbound_35333_audit }}"
    register: ipv6outbound
    ignore_errors: True
    become: yes
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - name:  3.5.3.3.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_outbound
    failed_when: no
    when: ipv6outbound.stdout.find("FAILED") != -1
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6outbound.stdout.find("FAILED") != -1
      - ip6tables_outbound.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Fetching the ipv6firewallrules value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallrules_35334_audit }}"
    register: ipv6firewallrules
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - saving the rules
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_fir_rules
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Adding the ipv6 firewallrules
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv6_suse15.split(',') }}"
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - Fetching the ipv6firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallpolicy_35331_audit }}"
    register: ipv6firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_ipv6fir
    failed_when: no
    when: ipv6firewallpolicy.stdout.find("FAILED") != -1
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - saving the ip6tables
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_rules
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - adding the necessary ports to ip6tables before droping the policy
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv6_suse15.split(',') }}"
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - Implementing a default DROP policy
    command: "{{item}}"
    with_items:
      - ip6tables -P INPUT DROP
      - ip6tables -P OUTPUT DROP
      - ip6tables -P FORWARD DROP
    failed_when: no
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

####################### CHAPTER-4 ########################

  - name: 4.1.1.1 - Fetching the auditd value from ansible facts
    shell: echo "{{ ansible_local.auditd_4111_audit }}" 
    register: auditd
    ignore_errors: True
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - all
      - remedy
 
  - name: 4.1.1.1 - Installing audit
    zypper:
      name: audit
      state: present
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Fetching the auditdservice value from ansible facts
    shell: echo "{{ ansible_local.auditdservice_4112_audit }}" 
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - all
      - remedy
      
  - name: 4.1.1.2 - Enabling and starting auditd
    systemd:
      name: auditd
      enabled: yes
    failed_when: no
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Fetching the auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_4113_audit }}" 
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all
      - remedy
      
  - name: 4.1.1.3 - Adding parameter in GRUB_CMDLINE_LINUX
    command: '{{ item }}'
    with_items:
      - sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit=1/' /etc/default/grub
      - grub2-mkconfig -o /boot/grub2/grub.cfg
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.2.1 - Fetching auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4121_audit }}" 
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - all
      - remedy
      
  - name: 4.1.2.1 - Adding audit log storage size parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*|#max_log_file =*)"
      line: "max_log_file = {{ audit_log_size_suse15 }}"
    failed_when: no
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - all      
      - remedy

  - name: 4.1.2.2 - Fetching the auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4122_audit }}" 
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - all
      - remedy
      
  - name: 4.1.2.2 - Adding audit log delete parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file_action =*|#max_log_file_action =*)"
      line: 'max_log_file_action = keep_logs'
    failed_when: no
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - all      
      - remedy

  - name: 4.1.2.3 - Fetching sysdisable value from ansible facts
    shell: echo "{{ ansible_local.sysdisable_4123_audit }}" 
    register: sysdisable
    ignore_errors: True
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy
      
  - name: 4.1.2.3 - Adding space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(space_left_action =*|#space_left_action =*)"
      line: 'space_left_action = email'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy
      
  - name: 4.1.2.3 - Adding action mail acct parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(action_mail_acct =*|#action_mail_acct =*)"
      line: 'action_mail_acct = root'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy
      
  - name: 4.1.2.3 - Adding admin space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(admin_space_left_action =*|#admin_space_left_action =*)"
      line: 'admin_space_left_action = halt'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all      
      - remedy

  - name: 4.1.2.4 - Fetching auditdbacklog value from ansible facts
    shell: echo "{{ ansible_local.auditdbacklog_4124_audit }}" 
    register: auditdbacklog
    ignore_errors: True
    become: yes
    tags:
      - auditdbacklog
      - 4.1.2.4
      - four
      - all
      - remedy
      
  - name: 4.1.2.4 - Adding parameter in GRUB_CMDLINE_LINUX
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit_backlog_limit=8192/' /etc/default/grub
    failed_when: no
    when: auditdbacklog.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditdbacklog
      - 4.1.2.4
      - four
      - all
      - remedy

  - name: 4.1.2.4 - Updating the grub2 configuration
    command: grub2-mkconfig -o /boot/grub2/grub.cfg
    ignore_errors: yes
    when: auditdbacklog.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditdbacklog
      - 4.1.2.4
      - four
      - all      
      - remedy

  - name: 4.1.3 - Fetching moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_413_audit }}" 
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - all
      - remedy
      
  - name: 4.1.3 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - all
      - remedy
      
  - name: 4.1.3 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - all
      - remedy
   
  - name: 4.1.3 - Reloading auditd
    systemd:
      name: auditd
      state: reloaded
    when: moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.4 - Fetching modusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_414_audit }}" 
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - all
      - remedy
      
  - name: 4.1.4 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/identity.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/group -p wa -k identity"
      - "-w /etc/passwd -p wa -k identity"
      - "-w /etc/gshadow -p wa -k identity"
      - "-w /etc/shadow -p wa -k identity"
      - "-w /etc/security/opasswd -p wa -k identity"
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.5 - Fetching modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_415_audit }}" 
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - all
      - remedy
      
  - name: 4.1.5 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/system_locale.rules
      state: present
      line: "{{item}}"
      create: yes      
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/network -p wa -k system-locale"
    when:
      - modsysnet.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - all
      - remedy
      
  - name: 4.1.5 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/system_locale.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/network -p wa -k system-locale"
    when:
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - all
      - remedy

  - name: 4.1.6 - Fetching the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_416_audit }}" 
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - all
      - remedy
      
  - name: 4.1.6 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/MAC_policy.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/selinux/ -p wa -k MAC-policy"
      - "-w /usr/share/selinux/ -p wa -k MAC-policy"
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - all
      - remedy
      
  - name: 4.1.6 - Restarting auditd
    service:
      name: auditd
      state: restarted
    failed_when: no
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.7 - Fetching the loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_417_audit }}" 
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/logins.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/log/lastlog -p wa -k logins"
      - "-w /var/log/faillog -p wa -k logins"
      - "-w /var/log/tallylog -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.8 - Fetching session value from ansible facts
    shell: echo "{{ ansible_local.session_418_audit }}" 
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - all
      - remedy
     
  - name: 4.1.8 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/session.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/run/utmp -p wa -k session"
      - "-w /var/log/wtmp -p wa -k logins"
      - "-w /var/log/btmp -p wa -k logins"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - all
      - remedy
      
  - name: 4.1.8 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.9 - Fetching dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_419_audit }}" 
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - all
      - remedy
      
  - name: 4.1.9 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295"
      - "-k perm_mod"
    when:
     - dacperm.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - all
      - remedy
      
  - name: 4.1.9 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:
      - dacperm.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - all
      - remedy
      
  - name: 4.1.9 - Restarting auditd
    service:
      name: auditd
      state: restarted
    failed_when: no
    when: dacperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.10 - Fetching fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_4110_audit }}" 
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - all
      - remedy
    
  - name: 4.1.10 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes      
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - all
      - remedy
    
  - name: 4.1.10 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - all
      - remedy
      
  - name: 4.1.10 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: fileaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - all
      - remedy

  - name: 4.1.11 - Fetching the privilegecmd value from ansible facts
    shell: echo "{{ ansible_local.privilegecmd_4111_audit }}" 
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - all
      - remedy
      
  - name: 4.1.11 - Editing or creating a file in the /etc/audit/rules.d/ directory
    shell: find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>='"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/privileged.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - Reloading auditd   
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - all
      - remedy
      
  - name: 4.1.12 - Fetching the fsmount value from ansible facts
    shell: echo "{{ ansible_local.fsmount_4112_audit }}" 
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - all
      - remedy
      
  - name: 4.1.12 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/audit.rules
      state: present
      line: "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - all
      - remedy
  
  - name: 4.1.12 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
      - "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - all
      - remedy
    
  - name: 4.1.12 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: fsmount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.13 - Fetching the filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4113_audit }}" 
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy
    
  - name: 4.1.13 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      create: yes
      state: present
      line: "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when: 
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when: 
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy
  
  - name: 4.1.13 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: filedeletion.stdout.find("FAILED") != -1
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy
      
  - name: 4.1.14 - Fetching the sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_4114_audit }}" 
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - all
      - remedy
      
  - name: 4.1.14 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/scope.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/sudoers -p wa -k scope"
      - "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - all
      - remedy
    
  - name: 4.1.14 - Restarting auditd
    service:
      name: auditd
      state: restarted
    failed_when: no
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.15 - Fetching the sudolog value from ansible facts
    shell: echo "{{ ansible_local.sudolog_4115_audit }}" 
    register: sudolog
    ignore_errors: True
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy
    
  - name: 4.1.15 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/actions.rules
      create: yes
      state: present
      line: "-w /var/log/sudo.log -p wa -k actions"
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy
    
  - name: 4.1.15 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.16 - Fetching the kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4116_audit }}" 
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - all
      - remedy
      
  - name: 4.1.16 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - all
      - remedy
    
  - name: 4.1.16 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - all
      - remedy
    
  - name: 4.1.16 - Reloading auditd
    service:
      name: auditd
      state: reloaded
    failed_when: no
    when: kernelmodule.stdout.find("FAILED") != -1
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - all      
      - remedy

  - name: 4.1.17 - Fetching the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4117_audit }}" 
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - all    
      - remedy
    
  - name: 4.1.17 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path:  /etc/audit/rules.d/99-finalize.rules   
      create: yes
      state: present
      line: "-e 2"
    when: auditconfig.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - all
      - remedy
    
  - name: 4.1.17 - Restarting auditd
    service:
      name: auditd
      state: restarted
    failed_when: no
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - all
      - remedy

  - name: 4.2.1.1 - Fetching the rsyslog value from ansible facts
    shell: echo "{{ ansible_local.rsyslog_4211_audit }}" 
    register: rsyslog
    ignore_errors: True
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - all
      - remedy
    
  - name: 4.2.1.1 - Installing rsyslog
    zypper:
      name: rsyslog
      state: present
    failed_when: no
    when: rsyslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - all
      - remedy

  - name: 4.2.1.2 - Fetching the rsyslogenb value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4212_audit }}" 
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - all
      - remedy
    
  - name: 4.2.1.2 - Enabling rsyslog
    service:
      name: rsyslog
      enabled: yes
    failed_when: no
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - all
      - remedy

  - name: 4.2.1.3 - Fetching the rsyslogperm value from ansible facts
    shell: echo "{{ ansible_local.rsyslogperm_4213_audit }}" 
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy
    
  - name: 4.2.1.3 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      regexp: "^($FileCreateMode*|#$FileCreateMode*)"
      line: "$FileCreateMode 0640"
    when: rsyslogperm.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.3 - configuring rsyslogperm file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    register: rsyslogperm_result
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.3 - configuring rsyslogperm file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "$FileCreateMode 0640"
    loop: '{{ rsyslogperm_result.stdout_lines }}'
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Fetching the rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4214_audit }}" 
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy
    
  - name: 4.2.1.4 - Adding lines to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy
 
  - name: 4.2.1.4 - Reloading rsyslog configuration
    systemd: 
      name: rsyslog
      state: reloaded
    failed_when: no
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Fetching the rsyslogsendlogs value from ansible facts
    shell: echo "{{ ansible_local.rsyslogsendlogs_4215_audit }}" 
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy
    
  - name: 4.2.1.5 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    register: rsyslogsendlogs_result
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "*.* @@loghost.example.com"
    loop: '{{ rsyslogsendlogs_result.stdout_lines }}'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy
         
  - name: 4.2.1.5 - Reloading rsyslogd configuration
    service: 
      name: rsyslog
      state: reloaded
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Fetching the remotesyslogmsg value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogmsg_4216_audit }}" 
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy
    
  - name: 4.2.1.6 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: '/etc/rsyslog.conf'
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "#$ModLoad imtcp", line: "$ModLoad imtcp" }
      - { regexp: "#$InputTCPServerRun 514",line: "$InputTCPServerRun 514" }
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy
   
  - name: 4.2.1.6 - Adding line to /etc/rsyslog.conf
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    register: remotesyslogmsg_result
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all
    
  - name: 4.2.1.6 - Reloading rsyslog
    systemd: 
      name: rsyslog
      state: reloaded
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy

  - name: 4.2.2.1 - Fetching the journalsendlogs value from ansible facts
    shell: echo "{{ ansible_local.journalsendlogs_4221_audit }}" 
    register: journalsendlogs
    ignore_errors: True
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - all
      - remedy
    
  - name: 4.2.2.1 - Adding line to /etc/systemd/journald.conf
    lineinfile:
      path: /etc/systemd/journald.conf
      state: present
      regexp: "^(ForwardToSyslog=*|#ForwardToSyslog=*)"
      line: "ForwardToSyslog=yes"
    when: journalsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Fetching the journalcompresslog value from ansible facts
    shell: echo "{{ ansible_local.journalcompresslog_4222_audit }}" 
    register: journalcompresslog
    ignore_errors: True
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - all
      - remedy
      
  - name: 4.2.2.2 - Adding line to /etc/systemd/journald.conf
    lineinfile:
      path: /etc/systemd/journald.conf 
      state: present
      regexp: "^(Compress=*|#Compress=*)"
      line: "Compress=yes"
    when: journalcompresslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.3 - Fetching the journalpersisdisk value from ansible facts
    shell: echo "{{ ansible_local.journalpersisdisk_4223_audit }}" 
    register: journalpersisdisk
    ignore_errors: True
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - all
      - remedy
    
  - name: 4.2.2.3 - Adding line to /etc/systemd/journald.conf
    lineinfile:
      path: /etc/systemd/journald.conf
      state: present
      regexp: "^(Storage=*|#Storage=*)"
      line: "Storage=persistent"
    when: journalpersisdisk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - all
      - remedy

  - name: 4.2.3 - Fetching the permlogfiles value from ansible facts
    shell: echo "{{ ansible_local.permlogfiles_423_audit }}" 
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - all
      - remedy
      
  - name: 4.2.3 - Configuring permissions to all logfiles
    shell: 'find /var/log -type f -exec chmod g-wx,o-rwx "{}" + -o -type d -exec chmod g-wx,o-rwx "{}" +'
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - all
      - remedy
      
  - name: 4.2.4 - Fetching the logrotate value from ansible facts
    shell: echo "{{ ansible_local.logrotate_424_audit }}" 
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - 4.2.4
      - four
      - all
      - remedy
    
  - name: 4.2.4 - Adding a line in /etc/logrotate.conf
    lineinfile:
      path: '/etc/logrotate.conf'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    failed_when: no
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - 4.2.4
      - four
      - all
      - remedy

  - name: 4.2.4 - configuring logrotate file
    shell: find /etc/logrotate.d/* -name "*"
    failed_when: no
    register: logrotate_result
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - 4.2.4
      - four
      - all
      - remedy

  - name: 4.2.4 - configuring logrotate file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    loop: '{{ logrotate_result.stdout_lines }}'
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - 4.2.4
      - four
      - all  
      - remedy

###################### CHAPTER-5 #####################

  - name: 5.1.1 - Fetching the cron value from ansible facts
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy
      
  - name: 5.1.1 - Enabling crond
    systemd:
      name: cron
      enabled: yes
    when: cron.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy

  - name: 5.1.2 - Fetching the permcrontab value from ansible facts
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all    
      - remedy
 
  - name: 5.1.2 - Setting permissions to /etc/crontab
    file:
      path: "/etc/crontab"
      mode: 0600
      owner: root
      group: root
    when: permcrontab.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all
      - remedy

  - name: 5.1.3 - Fetching the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all    
      - remedy

  - name: 5.1.3 - Setting permissions to /etc/cron.hourly
    file:
      path: "/etc/cron.hourly"
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all
      - remedy

  - name: 5.1.4 - Fetching the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy
      
  - name: 5.1.4 - Setting permissions to /etc/cron.daily
    file:
      path: "/etc/cron.daily"
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy

  - name: 5.1.5 - Fetching the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy
      
  - name: 5.1.5 - Setting permissions to /etc/cron.weekly
    file:
      path: "/etc/cron.weekly"
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy
      
  - name: 5.1.6 - Fetching the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy
      
  - name: 5.1.6 - Setting permissions to/etc/cron.monthly
    file:
      path: "/etc/cron.monthly"
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy
      
  - name: 5.1.7 - Fetching the permcrond value from ansible facts
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy
      
  - name: 5.1.7 - Setting permissions to /etc/cron.d
    file:
      path: "/etc/cron.d"
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy

  - name: 5.1.8 - Fetching the cronuser value from ansible facts
    shell: echo "{{ ansible_local.cronuser_518_audit }}"
    register: cronuser
    ignore_errors: True
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Creating a directory
    file:
      path: /etc/ansible/backup/cronuser
      state: directory
      mode: '0755'
      recurse: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Backing up cron.deny
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/cronuser/cron_deny_{{ansible_hostname}}
      remote_src: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Removing /etc/cron.deny file
    file:
      path: "/etc/cron.deny"
      state: absent
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Creating /etc/cron.allow file
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - all      
      - remedy

  - name: 5.1.9 - Fetching the atcron value from ansible facts
    shell: echo "{{ ansible_local.atcron_519_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - all
      - remedy

  - name: 5.1.9 - Creating directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0755'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - all
      - remedy

  - name: 5.1.9 - Backing up at.deny
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - all
      - remedy

  - name: 5.1.9 - Removing /etc/at.deny file
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - all
      - remedy

  - name: 5.1.9 - Creating /etc/at.allow file
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - all
      - remedy

  - name: 5.2.1 - Fetching the sshdperm value from ansible facts
    shell: echo "{{ ansible_local.sshdperm_521_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all    
      - remedy

  - name: 5.2.1 - Setting permissions /etc/ssh/sshd_config
    file:
      path: "/etc/ssh/sshd_config"
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all
      - remedy

  - name: 5.2.2 - Fetching the sshpermpvtkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpvtkey_522_audit }}"
    register: sshpermpvtkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.2
      - five
      - all 
      - remedy
  
  - name: 5.2.2 - Setting permissions to SSH private host key files 
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} \;
    failed_when: no
    when: sshpermpvtkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.2
      - five 
      - all
      - remedy
  
  - name: 5.2.3 - Fetching the sshpermpubkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpubkey_523_audit }}"
    register: sshpermpubkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.3
      - five
      - all 
      - remedy
  
  - name: 5.2.3 - Setting permissions to SSH public host key files 
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod u-x,go-wx {} \;
    failed_when: no
    when: sshpermpubkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.3
      - five
      - all
      - remedy

  - name: 5.2.4 - Fetching the sshaccess value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_524_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.2.4
      - five
      - all
      - remedy
    
  - name: 5.2.4 - Adding SSH access to allowusers in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "{{item}}"
    with_items:
      - "AllowUsers   {{ allowusers_suse15 }}"
      - "AllowGroups  {{ allowgroups_suse15 }}"
      - "DenyUsers    {{ denyusers_suse15 }}"
      - "DenyGroups   {{ denygroups_suse15 }}"
    failed_when: no
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.4
      - five
      - all
      - remedy

  - name: 5.2.5 - Fetching the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_525_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.2.5
      - five
      - all
      - remedy
      
  - name: 5.2.5 - Adding SSH LogLevel to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - sshloglevel
      - 5.2.5
      - five
      - all
      - remedy

  - name: 5.2.6 - Fetching the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_526_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.2.6
      - five
      - all
      - remedy
  
  - name: 5.2.6 - Adding SSH X11 forwarding to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshx11forward
      - 5.2.6
      - five
      - all
      - remedy

  - name: 5.2.7 - Fetching the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_527_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.7
      - five
      - all
      - remedy
  
  - name: 5.2.7 - Limiting SSH MaxAuthTries to 4 or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries_suse15 }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.7
      - five
      - all
      - remedy

  - name: 5.2.8 - Fetching the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_528_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.8
      - five
      - all
      - remedy
  
  - name: 5.2.8 - Adding SSH IgnoreRhosts to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "IgnoreRhosts yes"
    failed_when: no
    when: sshignorerhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.8
      - five
      - all
      - remedy
 
  - name: 5.2.9 - Fetching the sshauthentication value from ansible facts
    shell: echo "{{ ansible_local.sshauthentication_529_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.2.9
      - five
      - all
      - remedy
  
  - name: 5.2.9 - Adding SSH HostbasedAuthentication to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "HostbasedAuthentication no"
    failed_when: no
    when: sshauthentication.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshauthentication
      - 5.2.9
      - five
      - all
      - remedy

  - name: 5.2.10 - Fetching the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_5210_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.2.10
      - five
      - all 
      - remedy

#  - name: 5.2.10 - Adding SSH root login to /etc/ssh/sshd_config
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      regexp: "^(PermitRootLogin*|#PermitRootLogin*)"
#      line: "{{ PermitRootLogin_suse15 }}"
#    when: sshrootlogin.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshrootlogin
#      - 5.2.10
#      - five
#      - all
#      - remedy

  - name: 5.2.11 - Fetching the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_5211_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.2.11
      - five
      - all
      - remedy
  
  - name: 5.2.11 - Adding SSH PermitEmptyPasswords to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "PermitEmptyPasswords no"
    failed_when: no
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.2.11
      - five
      - all
      - remedy

  - name: 5.2.12 - Fetching the sshpue value from ansible facts
    shell: echo "{{ ansible_local.sshpue_5212_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.2.12
      - five
      - all
      - remedy
  
  - name: 5.2.12 - Adding SSH PermitUserEnvironment to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "PermitUserEnvironment no"
    failed_when: no
    when: sshpue.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpue
      - 5.2.12
      - five
      - all
      - remedy

  - name: 5.2.13 - Fetching the sshchipers value from ansible facts
    shell: echo "{{ ansible_local.sshchipers_5213_audit }}"
    register: sshchipers
    ignore_errors: True
    become: yes
    tags:
      - sshchipers
      - 5.2.13
      - five
      - all
      - remedy
    
  - name: 5.2.13 - Adding strong Ciphers to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Ciphers*|#Ciphers*)"
      line: "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
    failed_when: no
    when: sshchipers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshchipers
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.14 - Fetching the sshmacalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshmacalgorithm_5214_audit }}"
    register: sshmacalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshmacalgorithm
      - 5.2.14
      - five
      - all
      - remedy
  
#  - name: 5.2.14 - Adding strong MAC algorithms to /etc/ssh/sshd_config
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256"
#    when: sshmacalgorithm.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.2.14
#      - five
#      - all
#      - remedy

  - name: 5.2.15 - Fetching the sshkeyexalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshkeyexalgorithm_5215_audit }}"
    register: sshkeyexalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshkeyexalgorithm
      - 5.2.15
      - five
      - all
      - remedy
    
#  - name: 5.2.15 - Adding strong Key Exchange algorithms to /etc/ssh/sshd_config
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      line: "KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellmangroup14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffiehellman-group-exchange-sha256"
#    failed_when: no
#    when: sshkeyexalgorithm.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshkeyexalgorithm
#      - 5.2.15
#      - five
#      - all
#      - remedy

  - name: 5.2.16 - Fetching the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5216_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.16
      - five
      - all
      - remedy
  
  - name: 5.2.16 - Adding SSH Idle Timeout Interval to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval_suse15 }}"
    failed_when: no
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.16
      - five
      - all
      - remedy
 
  - name: 5.2.16 - Adding SSH Idle Timeout Interval to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: {{ "ClientAliveCountMax_suse15 }} "
    failed_when: no
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.16
      - five
      - all
      - remedy

  - name: 5.2.17 - Fetching the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5217_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.17
      - five
      - all
      - remedy
    
  - name: 5.2.17 - Setting SSH LoginGraceTime to one minute or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "LoginGraceTime 60"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.17
      - five
      - all
      - remedy

  - name: 5.2.18 - Fetching the sshwarningbanner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5218_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.18
      - five
      - all
      - remedy
  
  - name: 5.2.18 - Adding SSH warning banner to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.18
      - five
      - all
      - remedy

  - name: 5.2.19 - Fetching the sshpam value from ansible facts
    shell: echo "{{ ansible_local.sshpam_5219_audit }}"
    register: sshpam
    ignore_errors: True
    become: yes
    tags:
      - sshpam
      - 5.2.19
      - five
      - all
      - remedy
  
  - name: 5.2.19 - Enabling SSH PAM in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(UsePAM*|#UsePAM*)"
      line: "UsePAM yes"
    failed_when: no
    when: sshpam.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpam
      - 5.2.19
      - five
      - all
      - remedy

  - name: 5.2.20 - Fetching the sshdistcpforward value from ansible facts
    shell: echo "{{ ansible_local.sshdistcpforward_5220_audit }}"
    register: sshdistcpforward
    ignore_errors: True
    become: yes
    tags:
      - sshdistcpforward
      - 5.2.20
      - five
      - all
      - remedy
  
  - name: 5.2.20 - Disabling SSH AllowTcpForwarding in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(AllowTcpForwarding*|#AllowTcpForwarding*)"
      line: "AllowTcpForwarding no"
    failed_when: no
    when: sshdistcpforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdistcpforward
      - 5.2.20
      - five
      - all
      - remedy

  - name: 5.2.21 - Fetching the sshmaxstartups value from ansible facts
    shell: echo "{{ ansible_local.sshmaxstartups_5221_audit }}"
    register: sshmaxstartups
    ignore_errors: True
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.21
      - five
      - all
      - remedy
  
  - name: 5.2.21 - Adding SSH MaxStartups in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxStartups*|#MaxStartups*)"
      line: "MaxStartups 10:30:60"
    failed_when: no
    when: sshmaxstartups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.21
      - five
      - all
      - remedy

  - name: 5.2.22 - Fetching the sshmaxsessions value from ansible facts
    shell: echo "{{ ansible_local.sshmaxsessions_5222_audit }}"
    register: sshmaxsessions
    ignore_errors: True
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.22
      - five
      - all
      - remedy
    
  - name: 5.2.22 - Limiting SSH MaxSessions in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxSessions*|#MaxSessions*)"
      line: "MaxSessions 10"
    failed_when: no
    when: sshmaxsessions.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.22
      - five
      - all
      - remedy

  - name: 5.3.1 - Fetching the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_531_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Ensure password creation requirements are configured
    shell: (cat /etc/pam.d/common-password | grep "^password.*requisite.*pam_cracklib.so.*retry.*minlen.*dcredit.*ucredit.*ocredit.*lcredit" | wc -l)
    register: passcre
    failed_when: no
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      regexp: '^(password.*requisite.*pam_cracklib.so.*)$'
      line: '\1 retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1'
      backrefs: yes
    failed_when: no
    when:
      - passwdcreation.stdout.find("FAILED") != -1  
      - passcre.stdout == "0"
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      regexp: '^(password.*requisite.*pam_cracklib.so.*)$'
      line: '# \1'
      backrefs: yes
    failed_when: no
    when:
      - passwdcreation.stdout.find("FAILED") != -1
      - passcre.stdout == "1"
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile: 
      path: /etc/pam.d/common-password
      state: present
      line: "password    requisite    pam_cracklib.so   retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1"
    failed_when: no
    when:
      - passwdcreation.stdout.find("FAILED") != -1
      - passcre.stdout == "1"
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.2 - Fetching the lockout value from ansible facts
    shell: echo "{{ ansible_local.lockout_532_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Ensure lockout for failed password attempts is configured
    shell: (cat /etc/pam.d/common-auth | grep "^auth.*required.*pam_tally2.so" | wc -l)
    register: locko
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy
      
  - name: 5.3.2 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-auth
      state: present
      insertafter: "^auth.*required.*pam_env.so"
      line: "auth required pam_tally2.so deny=5 onerr=fail unlock_time=900"
    when: 
      - lockout.stdout.find("FAILED") != -1  
      - locko.stdout == "0"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-auth
      state: present
      regexp: '^(auth.*required.*pam_tally2.so)$'
      line: '# \1'
      backrefs: yes
    failed_when: no
    when:
      - lockout.stdout.find("FAILED") != -1
      - locko.stdout == "1"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-auth
      state: present
      line: "auth required pam_tally2.so deny=5 onerr=fail unlock_time=900"
    when:
      - lockout.stdout.find("FAILED") != -1
      - locko.stdout == "1"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Adding parameters to conform site policy
    shell: (cat /etc/pam.d/common-account | grep "^account.*required.*pam_tally2.so" | wc -l)
    register: lockac
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Ensure lockout for failed password attempts is configured
    lineinfile:
      path: /etc/pam.d/common-account
      state: present
      line: "account required pam_tally2.so"
    when:
      - lockout.stdout.find("FAILED") != -1  
      - lockac.stdout == "0"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy
 
  - name: 5.3.3 - Fetching the passwdreuse value from ansible facts 
    shell: echo "{{ ansible_local.passwdreuse_533_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 - Ensure password reuse is limited
    shell: (cat /etc/pam.d/common-password | grep "password.*required.*pam_pwhistory.so" | wc -l)
    register: reuse
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      regexp: '^(password.*required.*pam_pwhistory.so.*)$'
      line: '\1 remember=5'
      backrefs: yes
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "1"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      line: 'password   required   pam_pwhistory.so remember=5'
    failed_when: no
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "0"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy
 
  - name: 5.4.1.1 - Fetching the passwdhashing value from ansible facts
    shell: echo "{{ ansible_local.passwdhashing_5411_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.4.1.1
      - five
      - all 
      - remedy
      
  - name: 5.4.1.1 - Adding parameters to conform site policy
    lineinfile:
      path: etc/login.defs
      state: present
      regexp: "^(#ENCRYPT_METHOD*|ENCRYPT_METHOD*)"
      line: 'ENCRYPT_METHOD sha512'
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.4.1.1
      - five
      - all
      - remedy

  - name: 5.4.1.2 - Fetching the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5412_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.2
      - five
      - all
      - remedy
      
  - name: 5.4.1.2 - Setting PASS_MAX_DAYS parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MAX_DAYS.*)"
      line: "PASS_MAX_DAYS {{ Pass_max_days_suse15 }}"
    when: passwdexpiration.stdout.find("FAILED") != -1
    ignore_errors: True   
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.2
      - five
      - all
      - remedy

  - name: 5.4.1.2 - Grepping users
    shell: "grep ':$6' /etc/shadow | cut -d: -f1,5 | awk -F: '$2>=365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.2
      - five
      - all
      - remedy
  
  - name: 5.4.1.2 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_max="{{ Pass_max_days_suse15 }}"
    loop: "{{ echo.stdout_lines }}"
    when:     
      - passwdexpiration.stdout.find("FAILED") != -1 
      - item != "root" 
    ignore_errors: True   
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.2
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Fetching the minidays value from ansible facts 
    shell: echo "{{ ansible_local.minidays_5413_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.3
      - five
      - all
      - remedy
      
  - name: 5.4.1.3 - Setting PASS_MIN_DAYS parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MIN_DAYS*)"
      line: "PASS_MIN_DAYS {{ Pass_min_days_suse15 }}"
    when: minidays.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_min="{{ Pass_min_days_suse15 }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
      - minidays.stdout.find("FAILED") != -1
      - item != "root"
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.4 - Fetching the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5414_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.4.1.4
      - five
      - all
      - remedy
      
  - name: 5.4.1.4 - Setting PASS_WARN_AGE parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_WARN_AGE*)"
      line: "PASS_WARN_AGE {{ Pass_warn_age_suse15 }}"
    failed_when: no
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.4
      - five
      - all
      - remedy

  - name: 5.4.1.4 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.4
      - five
      - all
      - remedy

  - name: 5.4.1.4 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_warn="{{ Pass_warn_age_suse15 }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
      - warningdays.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.4.1.4
      - five
      - all
      - remedy

  - name: 5.4.1.5 - Fetching the inactivepasswdlock value from ansible facts
    shell: echo "{{ ansible_local.inactivepasswdlock_5415_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.5
      - five
      - all
      - remedy

  - name: 5.4.1.5 - Setting parameter to conform site policy
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.5
      - five
      - all
      - remedy

  - name: 5.4.1.5 - Grepping users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=1000 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.5
      - five
      - all
      - remedy

  - name: 5.4.1.5 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when: 
    - inactivepasswdlock.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.5
      - five
      - all
      - remedy

  - name: 5.4.1.6 - Fetching the lastpasswdchange value from ansible facts
    shell: echo "{{ ansible_local.lastpasswdchange_5416_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.6
      - five
      - all
      - remedy
      
  - name: 5.4.1.6 - Locking if users password change date is not in the past
    shell: |
       count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
                fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.6
      - five
      - all
      - remedy

  - name: 5.4.2 - Fetching the sysaccnonloginvalue from ansible facts
    shell: echo "{{ ansible_local.sysaccnonlogin_542_audit }}"
    register: sysaccnonlogin
    ignore_errors: True
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy
      
  - name: 5.4.2 - Greping users
    shell: |
       cat /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!="'"$(which nologin)"'" && $7!="/bin/false") {print $1}'
    register: echo
    when: sysaccnonlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - Locking users
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when:
      - sysaccnonlogin.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - Changing users shell
    user:
      name: "{{ item }}"
      shell: '/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when: 
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.3 - Fetching the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_543_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - all
      - remedy
      
  - name: 5.4.3 - Ensure default group for the root account is GID 0
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - all
      - remedy

  - name: 5.4.4 - Fetching the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_544_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.4.4
      - five
      - all
      - remedy
      
  - name: 5.4.4 - Adding a line to /etc/profile
    lineinfile:
      path: /etc/bash.bashrc
      state: present
      line: 'readonly TMOUT=900 ; export TMOUT'
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - usershelltimeout
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.4 Ensure default user shell timeout is configured
    lineinfile:
      path: /etc/profile
      state: present
      line: 'readonly TMOUT=900 ; export TMOUT'
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - usershelltimeout
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.5 - Fetching the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_545_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.4.5
      - five
      - all
      - remedy

  - name: 5.4.5 - Add or modify UMASK line in file
    lineinfile:
      path: /etc/login.defs 
      state: present
      regexp: '^(UMASK*|#UMASK*)'
      line: "UMASK 027" 
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultuser
      - 5.4.5
      - five
      - all
      - remedy

  - name: 5.5 - Fetching the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.rootlogin_55_audit }}"
    register: rootlogin
    ignore_errors: True
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - all
      - remedy
      
  - name: 5.5 - Removing entries for any consoles that are not in a physically secure location
    shell: sed -i '/^tty/!d'  /etc/securetty
    when: rootlogin.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - all
      - remedy

  - name: 5.6 - Fetching the suaccess value from ansible facts
    shell: echo "{{ ansible_local.suaccess_56_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - all 
      - remedy

  - name: 5.6 - Creating an empty group
    command: groupadd sugroup
    failed_when: no
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all

  - name: 5.6 - Uncommenting pam_wheel line
    replace:
      path: /etc/pam.d/su
      regexp: '^(auth.*required.*pam_wheel.so.*)'
      replace: '#\1'
    failed_when: no
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all

  - name: 5.6 - Adding group to pam_wheel
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: 'auth required pam_wheel.so use_uid group=sugroup'
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - all
      - remedy


##################### CHAPTER-6 #########################

  - name: 6.1.1 - Fetching auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}" 
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy
 
  - name: 6.1.1 - Reviewing all installed packages
    shell: "rpm -Va --nomtime --nosize --nomd5 --nolinkto"
    register: eho
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.1 - Investigate the results to ensure any discrepancies found are understood and support proper secure operation of the system
    shell: "rpm -qf {{ item }} 2>/dev/null "
    loop: "{{ eho.stdout_lines }}"
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.2 - Fetching permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}"
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.2 - Setting permissions on /etc/passwd
    file:
      path: "/etc/passwd"
      mode: 0644
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.3 - Fetching permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_613_audit }}" 
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.3 - Setting permissions on /etc/shadow
    file:
      path: "/etc/shadow"
      mode: 0640
      owner: root
      group: root
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.4 - Fetching ansible value from ansible facts
    shell: echo "{{ ansible_local.permgroup_614_audit }}" 
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy
  
  - name: 6.1.4 - Setting permissions on /etc/group
    file:
      path: "/etc/group"
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy

  - name: 6.1.5 - Fetching permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_615_audit }}" 
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.5 - Setting permissions on /etc/passwd-
    file:
      path: "/etc/passwd-"
      mode: 0644
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswdi
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.6 - Fetching permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_616_audit }}" 
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.6 - Setting permissions on /etc/shadow-
    file:
      path: "/etc/shadow-"
      mode: 0640
      owner: root
      group: root
    when: permshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadowi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.7 - Fetchign permgroupi value from ansible facts
    shell: echo "{{ ansible_local.permgroupi_617_audit }}" 
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.7 - Setting permissions on /etc/group-
    file:
      path: "/etc/group-"
      mode: 0644
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.8 - Fetching wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_618_audit }}" 
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.8 - Fetching world writable files
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.8 - Changing ownership to world writable files
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.8
      - six
      - all
      - remedy

  - name:  6.1.9 - Fetching unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_619_audit }}" 
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Fetching unowned files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Fetching unowned files or directories exist
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6110_audit }}" 
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching ungrouped files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching ungrouped files or directories exist
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.2.1 - Fetching shadowpassd value from ansible facts
    shell: echo "{{ ansible_local.shadowpasswd_621_audit }}" 
    register: shadowpasswd
    ignore_errors: True
    become: yes
    tags:
      - shadowpasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Removing single x in the password field  
    shell: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
    when: shadowpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shadowpasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.2 - Fetching emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_622_audit }}" 
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.2 - Grepping users
    shell: "grep '/home' /etc/passwd | awk  -F: '$3>=1000 {print $1}'"
    register: echo
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.2 - Grepping users password fields that are empty
    shell: "grep '{{ echo.stdout }}' /etc/shadow | awk -F':' '$2==\"!\" || $2==\"\" || $2==\"!!\"{print $1}'"
    register: ech
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.2 - Locking users for password fields are empty
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ ech.stdout_lines }}"
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.3 - Fetching rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_623_audit }}" 
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.3
      - six
      - all
      - remedy

  - name: 6.2.3 - Ensure root is the only UID 0 account
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - rootuid
      - 6.2.3
      - six
      - all
      - remedy

  - name: 6.2.5 - Fetching userhdir value from ansible facts
    shell: echo "{{ ansible_local.userhdir_625_audit }}" 
    register: userhdir
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.5 - Grepping users home directories that do not exist
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=1000 && $7!=/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: userhdir.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.5 - Creating home directory for user
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
      owner: "{{ item }}"
      group: users
    loop: "{{ echo.stdout_lines }}"
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.6 - Fetching userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_626_audit }}" 
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.6
      - six
      - all
      - remedy

  - name: 6.2.6 - Grepping users home directories permissions are 750 or more restrictive
    shell: "cat /etc/passwd | awk -F: '($3>=1000 && $7 != '/sbin/nologin' && $7 != '/bin/false') { print $1 }' | sort"
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.6
      - six
      - all
      - remedy

  - name: 6.2.6 - Changing users' home directories permissions are 750 or more restrictive
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.6
      - six
      - all
      - remedy

  - name: 6.2.7 - Fetching userownhdir value from ansible facts
    shell: echo "{{ ansible_local.userownhdir_627_audit }}" 
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Checking the ownership of any home directories that are not owned by the defined user to the correct user
    shell: |
       cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | grep -v 'root 0 /root' | while read user uid dir; do
       if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
             owner=$(stat -L -c "%U" "$dir")
             if [ "$owner" != "$user" ]; then
                 echo "$dir:$user:$owner" >> /tmp/cisuserhdir
             fi
       fi
       done
          a=$(sed -i 's/\/:nobody.*//g' /tmp/cisuserhdir)
          b=$(cat /tmp/cisuserhdir | grep -v '^[[:space:]]*$')
          echo "$b"
          rm -rf /tmp/cisuserhdir
    register: userhdirreg
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Change the ownership of any home directories to the correct user
    file:
      path: "{{ item.split(':')[0] }}"
      owner: "{{ item.split(':')[1] }}"
      group: "{{ item.split(':')[1] }}"
    loop: "{{ userhdirreg.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.8 - Fetching the dotfiles value from ansible facts
    shell: echo "{{ ansible_local.dotfiles_628_audit }}" 
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.8
      - six
      - all
      - remedy
   
  - name: 6.2.8 - Finding users have dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.8 - Changing ownership to dotfiles
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.9 - Fetching forwardfiles value from ansible facts
    shell: echo "{{ ansible_local.forwardfiles_629_audit }}" 
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.9
      - six
      - all
      - remedy
 
  - name: 6.2.9 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: forwardfiles_result
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.9
      - six
      - all
      - remedy
	  
  - name: 6.2.9 - creating backup directory
    file:
      path: /etc/ansible/backup/forwardfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - backing up files
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/forwardfiles"
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.10 - Fetching netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_6210_audit }}" 
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.10 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: netrcfiles_result
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.10 - creating backup directory
    file:
      path: /etc/ansible/backup/netrcfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/netrcfiles"
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.11 - Fetching the grpnetrcfiles value from ansible facts
    shell: echo "{{ ansible_local.grpnetrcfiles_6211_audit }}" 
    register: grpnetrcfiles
    ignore_errors: True
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - Finding users having .netrc Files are not group or world writable
    shell: "find /home/ -name '.netrc' -perm /g+w,o+w"
    register: echo
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - Changing ownership to .netrc Files 
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.12 - Fetching the rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6212_audit }}"
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.12 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts'"
    register: rhosts_result
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - creating backup directory
    file:
      path: /etc/ansible/backup/rhosts
      state: directory
      mode: '0750'
      recurse: yes
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/rhosts"
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - Removing .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.13 - Fetching the groups value from ansible facts
    shell: echo "{{ ansible_local.groups_6213_audit }}"
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.13 - Adding groups to proper manner if any discrepancies found
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              usermod -g root $a
            fi
        done
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.14 - Fetching the duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6214_audit }}" 
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Checking for duplicate UID
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Checking for duplicate UID 
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when:
      - duplicateuid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Checking for duplicate UID
    shell: "b=$(grep '/home/' /etc/passwd | cut -d':' -f3 |  sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c || true"
    register: val
    when:
      - duplicateuid.stdout.find("FAILED") != -1
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Assign an unique UID 
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicateuid.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.15 - Fetching the duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6215_audit }}" 
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Checking for duplicate GIDs
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Checking for duplicate GIDs
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Checking for duplicate GIDs
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Assign an unique UID
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.16 - Fetching duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6216_audit }}" 
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Checking if duplicate user name exist
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Checking if duplicate user name exist
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when:
      - duplicateuser.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Displaying if duplicate user name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicateuser.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.17 - Fetching the duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6217_audit }}" 
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.17
      - six
      - all
      - remedy
 
  - name: 6.2.17 - Checking if duplicate group name exist
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Checking if duplicate group name exist
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}' | awk 'FNR != 1'"
    register: val
    when:
      - duplicategroup.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Displaying if duplicate group name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicategroup.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.18 - Fetching the shadowgroup value from ansible facts
    shell: echo "{{ ansible_local.shadowgroup_6218_audit }}"
    register: shadowgroup
    ignore_errors: True
    become: yes
    tags:
      - shadowgroup
      - 6.2.18
      - six
      - all
      - remedy
      
  - name: 6.2.18 - Clearing groups assigned to shadow group
    shell: |
       a=$(cat /etc/group | grep "^shadow" | awk -F: '{print $3}')
       if [ $(cat /etc/group | grep "^shadow" | wc -l) -gt 0 ]; then
           for i in $(cat /etc/passwd | cut -d, -f1-3 | grep "$a" | awk -F: '{print $1}'); do
              usermod -g users $i
            done
       fi
    failed_when: no
    when: shadowgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shadowgroup
      - 6.2.18
      - six
      - all
      - remedy

  - name: 1.9 - Fetching the updates value from ansible facts
    shell: echo "{{ ansible_local.updates_19_audit }}"
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - updates
      - '1.9'
      - one
      - all
      - remedy

  - name: 1.9 - Updating all packages on the system
    zypper:
      name: '*'
      state: latest
    when: updates.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - updates
      - '1.9'
      - one
      - all
      - remedy

  - name: Include Database
    include: tasks/after_linux.yml
