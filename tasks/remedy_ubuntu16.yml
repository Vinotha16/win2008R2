---
  - name: Include Actualfact
    include: tasks/actualfact_ubuntu16.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

####DEPENDENCY PACKAGE####
  - name: install [auditd]
    apt:
      name: auditd
      state: present
    failed_when: no
    become: yes
    tags:
      - four
      - all
      - remedy

####REMEDY####
  - name: Create /etc/modprobe.d/CIS.conf with root ownership 
    file: path=/etc/modprobe.d/CIS.conf state=touch owner=root group=root mode=0600
    changed_when: false
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - freevxfs
      - 1.1.1.2
      - jffs2
      - 1.1.1.3
      - hfs
      - 1.1.1.4
      - hfsplus
      - 1.1.1.5
      - udf
      - 1.1.1.6
      - one
      - dccp
      - 3.5.1
      - sctp
      - 3.5.2
      - rds
      - 3.5.3
      - tipc
      - 3.5.4
      - three        
      - all
      - remedy
      
  - name: 1.1.1.1 - Fetching the cramfsvalue from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit }}"
    register: cramfs
    ignore_errors: True
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.1 - Creating cramfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install cramfs /bin/true"
      state: present
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.1 - Unloading cramfs module
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Fetching the freevxfs value from ansible facts
    shell: echo "{{ ansible_local.freevxfs_1112_audit }}"
    register: freevxfs
    ignore_errors: True
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Creating freevxfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install freevxfs /bin/true"
      state: present
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Unloading freevxfs module
    shell: "rmmod freevxfs"
    failed_when: no
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Fetching the jffs2 value from ansible facts
    shell: echo "{{ ansible_local.jffs2_1113_audit }}"
    register: jffs2
    ignore_errors: True
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Creating jffs2 configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install jffs2 /bin/true"
      state: present
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Unloading jffs2 module
    shell: "rmmod jffs2"
    failed_when: no
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Fetching the hfs value from ansible facts
    shell: echo "{{ ansible_local.hfs_1114_audit }}"
    register: hfs
    ignore_errors: True
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Creating hfs configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install hfs /bin/true"
      state: present
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Unloading hfs module
    shell: "rmmod hfs"
    failed_when: no
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.1.5 - Fetching the hfsplus value from ansible facts
    shell: echo "{{ ansible_local.hfsplus_1115_audit }}"
    register: hfsplus
    ignore_errors: True
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - all
      - remedy

  - name: 1.1.1.5 - Creating hfsplus configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install hfsplus /bin/true"
      state: present
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - all
      - remedy

  - name: 1.1.1.5 -  Unloading hfsplus module
    shell: "rmmod hfsplus"
    failed_when: no
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - all
      - remedy

  - name: 1.1.1.6 - Fetching the udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1116_audit }}"
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - all
      - remedy

  - name: 1.1.1.6 - Creating udf configuration file
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      line: "install udf /bin/true "
      state: present
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - all
      - remedy

  - name: 1.1.1.6 - Unloading udf module
    shell: "rmmod udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - all
      - remedy

  - name: 1.1.2 - Fetching the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}"
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 - Check whether tmp is present in /etc/fstab 
    shell: (sudo grep " /tmp.*tmpfs" /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname12_result
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 - Ensure separate partition exists for /tmp
    debug: msg="The partition /tmp is already created"
    when:  
    - tmp.stdout.find("FAILED") != -1
    - uname12_result.stdout != "0"
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy
      
  - name: 1.1.2 - suggestion to create a /tmp partition
    debug: msg="suggestion to create a /tmp partition"
    when:  
    - tmp.stdout.find("FAILED") != -1
    - uname12_result.stdout == "0" 
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.3 - Fetching the tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_113_audit }}"
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.3 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.4 - Fetching the tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_114_audit }}"
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - all
      - remedy

  - name: 1.1.4 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - all
      - remedy

  - name: 1.1.5 - Fetching var value from ansible facts
    shell: echo "{{ ansible_local.var_115_audit }}"
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.5 - Check whether var is present in /etc/fstab
    shell: sudo grep "/var " /etc/fstab | wc -l
    ignore_errors: yes
    register: uname_result
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.5 - Ensure separate partition exists for /var
    debug: msg="The partition /var is already created"
    when:  
    - var.stdout.find("FAILED") != -1
    - uname_result.stdout != "0"  
    become: yes
    tags:
      - var
      - 1.1.5
      - one
      - all 
      - remedy

  - name: 1.1.5 - suggestion to create a /var partition
    debug: msg="suggestion to create a /var partition"
    when:
    - var.stdout.find("FAILED") != -1
    - uname12_result.stdout == "0"
    become: yes
    tags:
      - var
      - 1.1.5
      - one
      - all
      - remedy


  - name: 1.1.6 - Fetching the vartmp from ansible facts
    shell: echo "{{ ansible_local.vartmp_116_audit }}"
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 - Check whether var/tmp is present in /etc/fstab
    shell: (sudo grep "/var/tmp " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 - Ensure separate partition exists for /var/tmp
    debug: msg="The partition /var/tmp is already created"
    when: 
    - vartmp.stdout.find("FAILED") != -1    
    - uname_result.stdout != "0" 
    become: yes
    tags:
      - vartmp
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.7 - Fetching the vtnodev value from ansible facts
    shell: echo "{{ ansible_local.vtnodev_117_audit }}"
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.7
      - one
      - all
      - remedy

  - name: 1.1.7 - Remounting /var/tmp
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: vtnodev.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - vtnodev
      - 1.1.7
      - one
      - all
      - remedy
 
  - name: 1.1.8 - Fetching the vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_118_audit }}"
    register: vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.8
      - one
      - all
      - remedy
 
  - name: 1.1.8 - Remounting /var/tmp partition
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: vtnosuid.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - vtnosuid
      - 1.1.8
      - one
      - all
      - remedy

  - name: 1.1.9 - Fetching the vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_119_audit }}"
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.9
      - one
      - all
      - remedy

  - name: 1.1.9 - Remounting /var/tmp
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - vtnoexec
      - 1.1.9
      - one
      - all
      - remedy

  - name: 1.1.10 - Fetching the varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1110_audit }}"
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.10 - Check whether /var/log is present in /etc/fstab
    shell: (sudo grep "/var/log" /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: varlog.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - varlog
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.10 - Ensure separate partition exists for /var/log 
    debug: msg="The partition /var/log is already created"
    when:  
    - varlog.stdout.find("FAILED") != -1  
    - uname_result.stdout != "0"
    become: yes
    tags:
      - varlog
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.11 - Fetching the varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1111_audit }}"
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 - Check whether /var/log/audit is present in /etc/fstab
    shell: (sudo grep "/var/log/audit" /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: varlogaudit.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - varlogaudit
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 Ensure separate partition exists for /var/log/audit 
    debug: msg="The partition /var/log/audit is already created"
    when:  
    - varlogaudit.stdout.find("FAILED") != -1 
    - uname_result.stdout != "0"
    become: yes
    tags:
      - varlogaudit
      - 1.1.11
      - one
      - all  
      - remedy

  - name: 1.1.12 - Fetching the home value from ansible facts
    shell: echo "{{ ansible_local.home_1112_audit }}"
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.12 - Check whether /home is present in /etc/fstab
    shell: (sudo grep /home /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_result
    when: home.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - home
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.12 Ensure separate partition exists for /home 
    debug: msg="The partition /var/log/audit is already created"
    when:  
    - home.stdout.find("FAILED") != -1 
    - uname_result.stdout != "0"
    become: yes
    tags:
      - home
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.13 - Fetching the homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1113_audit }}"
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.13 - Remounting /home
    mount:
      path: /home
      src: tmpfs
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - homenodev
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.14 - Fetching the shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_1114_audit }}" 
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.14
      - one
      - all
      - remedy

  - name: 1.1.14 - Remounting /dev/shm
    mount:
      path: /dev/shm
      src: tmpfs
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: shmnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnodev
      - 1.1.14
      - one
      - all
      - remedy
  
  - name: 1.1.15 - Fetching the shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_1115_audit }}" 
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.15 - Remounting nosuid in /dev/shm
    mount:
      path: /dev/shm
      src: tmpfs
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnosuid
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.16 - Fetching the shmnoexec value from ansible facts
    shell: echo "{{ ansible_local.shmnoexec_1116_audit }}" 
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.16 - Remounting noexec in /dev/shm 
    mount:
      path: /dev/shm
      src: tmpfs
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: shmnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnoexec
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.17 - Fetching the medianodev value from ansible facts
    shell: echo "{{ ansible_local.medianodev_1117_audit }}"
    register: medianodev
    ignore_errors: True
    become: yes
    tags:
      - medianodev
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.17 - nodev option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nodev/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes	
    when: medianodev.stdout.find("FAILED") != -1	
    tags:
      - medianodev
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.18 - Fetching the medianosuid value from ansible facts
    shell: echo "{{ ansible_local.medianosuid_1118_audit }}"
    register: medianosuid
    ignore_errors: True
    become: yes
    tags:
      - medianosuid
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.18 - nosuid option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nosuid/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianosuid.stdout.find("FAILED") != -1	
    tags:
      - medianosuid
      - 1.1.18
      - one
      - remedy	  
      - all

  - name: 1.1.19 - Fetching the medianoexec value from ansible facts
    shell: echo "{{ ansible_local.medianoexec_1119_audit }}"
    register: medianoexec
    ignore_errors: True
    become: yes
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - noexec option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,noexec/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianoexec.stdout.find("FAILED") != -1
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all
      
  - name: 1.1.20 - Fetching the stickybit value from ansible facts
    shell: echo "{{ ansible_local.stickybit_1120_audit }}"
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.20
      - one
      - all
      - remedy

  - name: 1.1.20 - setting the sticky bit on all world writable directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    changed_when: no
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - stickybit
      - 1.1.20
      - one
      - all   
      - remedy
 
  - name: 1.1.21 - Fetching the automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1121_audit }}"
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.21
      - one
      - all
      - remedy

  - name: 1.1.21 - Disable Automounting
    service:
      name: autofs
      enabled: no
    failed_when: no
    when: automount.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - automount
      - 1.1.21
      - one
      - all
      - remedy

  - name: 1.2.1 - Fetching the repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_121_audit }}"
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
      - repoconfig
      - 1.2.1
      - one
      - all
      - remedy

  - name: 1.2.1 - Configuring package manager repositories
    apt:
      name: cache policy
      state: present
    failed_when: no
    when: repoconfig.stdout.find("FAILED") != -1 
    become: yes
    tags:
     - 1.2.1
     - repoconfig
     - one
     - all

  - name: 1.2.2 - Fetching the gpgkey value from ansible facts
    shell: echo "{{ ansible_local.gpgkey_122_audit }}"
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - gpgkey
      - 1.2.2
      - one
      - all
      - remedy

  - name: 1.2.2 - Ensure GPG keys are configured 
    command: apt-key list
    changed_when: no
    failed_when: no
    when: gpgkey.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - 1.2.2
      - gpgkey
      - one
      - all
      - remedy

  - name: 1.3.1 - Fetching the aide value from ansible facts
    shell: echo "{{ ansible_local.aide_131_audit }}"
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - aide
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 - Installing aide-common
    apt:
      name:
        - aide
        - aide-common
      state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - all
      - remedy

  - name: 1.3.1 - Initializing aide in database
    command: aideinit
    when: aide.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - all
      - remedy

  - name: 1.3.2 - Fetching the fsintegrity value from ansible facts 
    shell: echo "{{ ansible_local.fsintegrity_132_audit }}"
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - fsintegrity
      - 1.3.2
      - one
      - all
      - remedy

  - name: 1.3.2 - Checking filesystem integrity regularly
    cron:
      name: Run Aide integrity check weekly
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "/usr/bin/aide --config /etc/aide/aide.conf --check"
    when: fsintegrity.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - 1.3.2
      - fsintegrity
      - one
      - all
      - remedy
 
  - name: 1.4.1 - Fetching the bootloadperm value from ansible facts
    shell: echo "{{ ansible_local.bootloadperm_141_audit }}"
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - bootloadperm
      - 1.4.1
      - one
      - all
      - remedy

  - name: 1.4.1 - Setting permission in grub configuration file
    file:
      path: /boot/grub/grub.cfg
      owner: root
      group: root
      mode: 0400
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.1
      - bootloadperm
      - one
      - all
      - remedy

  - name: 1.4.2 - Fetching the bootloadpass value from ansible facts
    shell: echo "{{ ansible_local.bootloadpass_142_audit }}"
    register: bootloadpass
    ignore_errors: True
    become: yes
    tags:
      - bootloadpass
      - 1.4.2
      - one
      - all
      - remedy

  - name: 1.4.2 - Selecting root user
    shell: "awk -F: '$3==0 {print $1}' /etc/passwd"
    register: bootloaduser
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - bootloadpass
      - one
      - all
      - remedy

  - name: 1.4.2 - Setting up the bootloadpass and encrypting
    shell: "set -o pipefail;
        if [ '{{ bootloader_password }}' == 'random' ];
        then PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c12); else PASSWORD='{{ bootloader_password }}';
        fi;
        echo -e \"$PASSWORD\n$PASSWORD\" | grub-mkpasswd-pbkdf2 | awk '/grub.pbkdf/{print$NF}'"
    register: grub_pass
    args:
      executable: /bin/bash
    when:
    - bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - bootloadpass
      - one
      - all
      - remedy

  - name: 1.4.2 - Entering encrypted pass in grub 
    copy:
      dest: /etc/grub.d/40_custom
      content: "cat << EOF\nset superusers=\"{{ bootloaduser.stdout }}\"\npassword_pbkdf2 {{ bootloaduser.stdout }} {{ grub_pass.stdout }}\nEOF"
      owner: root
      group: root
      mode: 0755
    register: grub_pass
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - bootloadpass
      - one
      - all
      - remedy

  - name: 1.4.2 - Updating the grub
    command: update-grub
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.4.2
      - one
      - all
      - remedy
     
  - name: 1.4.3 - Fetching the singleusermode value from ansible facts
    shell: echo "{{ ansible_local.singleusermode_143_audit }}"
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
      - singleusermode
      - 1.4.3
      - one
      - all
      - remedy

  - name: 1.4.3 - Ensure authentication required for single user mode
    shell: sudo echo -e "{{ singleusermode }}\n{{ singleusermode }}" | sudo passwd root
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - singleusermode
      - 1.4.3
      - one
      - all
      - remedy
    

  - name: 1.5.1 - Fetching the coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_151_audit }}"
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - coredumps
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Adding line to /etc/security/limits.conf
    lineinfile:
      state: present
      dest: /etc/security/limits.conf
      regexp: '^#?\\*.*core'
      line: '* hard core 0'
      insertbefore: '^# End of file'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.5.1 - Setting up parameter in /etc/sysctl.conf
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "fs.suid_dumpable="
      line: 'fs.suid_dumpable=0'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.5.1 - Activating kernel parameter
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.5.2 - Fetching the xdnx value from ansible facts
    shell: echo "{{ ansible_local.xdnx_152_audit }}"
    register: xdnx
    ignore_errors: True
    become: yes
    tags:
      - xdnx
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Grepping nx and xd
    shell: dmesg|grep - E "NX|XD" | grep "active"
    register: xdenb
    failed_when: no
    when: xdnx.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - all
      - remedy
      
  - name: 1.5.2 - Message
    debug: msg="XD/NX support is enabled"
    when: 
      - xdnx.stdout.find("FAILED") != -1
      - xdenb.stdout == "1"
    become: yes
    tags:
      - xdnx
      - 1.5.2
      - one
      - all
      - remedy
          
  - name: 1.5.2 - Message
    debug: msg="Install kernel with PAE support for 32-bit system"
    when:
      - xdnx.stdout.find("FAILED") != -1
      - xdenb.stdout == "0"
    become: yes
    tags:
      - xdnx
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.3 - Fetching the aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_153_audit }}"
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - aslr
      - 1.5.3
      - one
      - all
      - remedy

  - name: 1.5.3 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      line: 'kernel.randomize_va_space = 2'
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - all
      - remedy

  - name: 1.5.3 - Activating kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - all
      - remedy
      
  - name: 1.5.4 - Fetching the prelink value from ansible facts
    shell: echo "{{ ansible_local.prelink_154_audit }}"
    register: prelink
    ignore_errors: True
    become: yes
    tags:
      - prelink
      - 1.5.4
      - one
      - all
      - remedy

  - name: 1.5.4 - Uninstalling prelink
    apt:
      name: prelink
      state: absent
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - all
      - remedy

  - name: 1.6.1.1 - Fetching the prelink value from ansible facts
    shell: echo "{{ ansible_local.seldisable_1611_audit }}"
    register: seldisable
    ignore_errors: True
    become: yes
    tags:
      - seldisable
      - 1.6.1.1
      - one
      - all
      - remedy

  - name: 1.6.1.1 - Removing selinux=0 and enforcing=0 from CMDLINE_LINUX
    replace:
      dest: /etc/default/grub
      regexp: '(selinux|enforcing)\s*=\s*0\s*'
      follow: yes
    failed_when: no
    when: seldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.1
      - seldisable
      - one
      - all
      - remedy

  - name: 1.6.1.1 - Updating the grub2 configuration
    command: update-grub
    when: seldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.1
      - seldisable
      - one
      - all
      - remedy

  - name: 1.6.1.2 - Fetching the selstate value from ansible fact
    shell: echo "{{ ansible_local.selstate_1612_audit }}"
    register: selstate
    ignore_errors: True
    become: yes
    tags:
      - selstate
      - 1.6.1.2
      - one
      - all
      - remedy

  - name: 1.6.1.2 - Setting the SELINUX parameter
    replace:
      path: /etc/selinux/config
      regexp: "^(SELINUX=.*)"
      replace: 'SELINUX=enforcing'
    failed_when: no
    when: selstate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.2
      - selstate
      - one
      - all 
      - remedy

  - name: 1.6.1.3 - Fetching the selpolicy value from ansible fact
    shell: echo "{{ ansible_local.selpolicy_1613_audit }}"
    register: selpolicy
    ignore_errors: True
    become: yes
    tags:
      - selpolicy
      - 1.6.1.3
      - one
      - all
      - remedy

  - name: 1.6.1.3 - Setting SELINUXTYPE parameter
    replace:
      path: /etc/selinux/config
      regexp: '^(SELINUXTYPE=.*)'
      replace: "SELINUXTYPE=ubuntu"
    failed_when: no
    when: selpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.3
      - selpolicy
      - one
      - all
      - remedy
      
  - name: 1.6.2.1 - Fetching the armordisable value from ansible fact
    shell: echo "{{ ansible_local.armordisable_1621_audit }}"
    register: armordisable
    ignore_errors: True
    become: yes
    tags:
      - armordisable
      - 1.6.2.1
      - one
      - all
      - remedy

  - name: 1.6.2.1 - Removing apparmor from CMDLINE_LINUX parameters
    replace:
      dest: /etc/default/grub
      regexp: '(apparmor)\s*=\s*0\s*'
      follow: yes
    failed_when: no
    when: armordisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2.1
      - armordisable
      - one
      - all
      - remedy

  - name: 1.6.2.1 - Update grub2 configuration
    command: update-grub
    when: armordisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2.1
      - armordisable
      - one
      - all
      - remedy

  - name: 1.6.2.2 - Fetching the armorenforce value from ansible fact 
    shell: echo "{{ ansible_local.armorenforce_1622_audit }}"
    register: armorenforce
    ignore_errors: True
    become: yes
    tags:
      - armorenforce
      - 1.6.2.2
      - one
      - all
      - remedy

  - name: 1.6.2.2 - Enable AppArmor Profiles to enforcing
    command:  aa-enforce /etc/apparmor.d/*
    failed_when: no
    when: armorenforce.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2.2
      - armorenforce
      - one
      - all
      - remedy

  - name: 1.6.3 - Fetching the selinappar value from ansible fact 
    shell: echo "{{ ansible_local.selinappar_163_audit }}"
    register: selinappar
    ignore_errors: True
    become: yes
    tags:
      - selinappar
      - 1.6.3
      - one
      - all
      - remedy

  - name: 1.6.3 - Installing apparmor
    apt:
      name: apparmor
      state: present
    when: selinappar.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.3
      - selinappar
      - one
      - all
      - remedy

  - name: 1.7.1.1 - Fetching the msgday value from ansible fact
    shell: echo "{{ ansible_local.msgday_1711_audit }}"
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - msgday
      - 1.7.1.1
      - one
      - all
      - remedy

  - name: 1.7.1.1 - Removing few instance
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/motd
    when: msgday.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - 1.7.1.1
      - msgday
      - one
      - all
      - remedy

  - name: 1.7.1.1 - Ensure message of the day is configured properly
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to ubuntu16"
      create: yes
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.1
      - msgday
      - one
      - all
      - remedy

  - name: 1.7.1.2 - Fetching locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_1712_audit }}"
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - locallogin
      - 1.7.1.2
      - one
      - all
      - remedy

  - name: 1.7.1.2 - Removing contents in /etc/issue
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.2
      - locallogin
      - one
      - all
      - remedy

  - name: 1.7.1.2 - Ensure local login warning banner is configured properly
    lineinfile:
      path: /etc/issue
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.2
      - locallogin
      - one
      - all
      - remedy

  - name: 1.7.1.3 - Fetching the remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_1713_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - remotelogin
      - 1.7.1.3
      - one
      - all
      - remedy

  - name: 1.7.1.3 - Removing contents in /etc/issue
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue.net
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.3
      - remotelogin
      - one
      - all
      - remedy
  
  - name: 1.7.1.3 - Ensure remote login warning banner is configured properly
    lineinfile:
      path: /etc/issue.net
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.3
      - remotelogin
      - one
      - all
      - remedy

  - name: 1.7.1.4 - Fetching the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_1714_audit }}"
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - motdperm
      - 1.7.1.4
      - one
      - all
      - remedy

  - name: 1.7.1.4 - set permissions on /etc/motd
    file:
      dest: /etc/motd
      state: file
      owner: root
      group: root
      mode: 0644
    failed_when: no
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.4
      - motdperm
      - one
      - all
      - remedy

  - name: 1.7.1.5 - Fetching the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_1715_audit }}"
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - issueperm
      - 1.7.1.5
      - one
      - all
      - remedy

  - name: 1.7.1.5 - set permissions on /etc/issue
    file:
      dest: /etc/issue
      state: file
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.5
      - issueperm
      - one
      - all
      - remedy

  - name: 1.7.1.6 - Fetching the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_1716_audit }}"
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - issuenetperm
      - 1.7.1.6
      - one
      - all
      - remedy

  - name: 1.7.1.6 - set permissions on /etc/issue
    file:
      dest: /etc/issue.net
      state: file
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.6
      - issuenetperm
      - one
      - all
      - remedy

  - name: 1.7.2 - Fetching the gdm value from ansible facts
    shell: echo "{{ ansible_local.gdm_172_audit }}"
    register: gdm
    ignore_errors: True
    become: yes
    tags:
      - gdm
      - 1.7.2
      - one
      - all
      - remedy


  - name: 1.7.2 - Adding contents to gdm file
    lineinfile:
      path: /etc/dconf/profile/gdm
      state: present
      line: "{{item}}"
    failed_when: no
    with_items:
       - "user-db:user"
       - "system-db:gdm"
       - "file-db:/usr/share/gdm/greeter-dconf-defaults"
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.2
      - gdm
      - one
      - all
      - remedy

  - name: 1.7.2 - Adding contents to 01-banner-message file
    lineinfile:
      path: /etc/dconf/db/gdm.d/01-banner-message
      state: present
      line: "{{item}}"
      create: yes
    failed_when: no
    with_items:
       - "[org/gnome/login-screen]"
       - "banner-message-enable=true"
       - "banner-message-text='Authorized uses only. All activity may be monitored and reported'"
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.2
      - gdm
      - one
      - all
      - remedy
      
  - name: 1.7.2 - Updating the system databases
    shell: "dconf update"
    failed_when: no
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.2
      - gdm
      - one
      - all    
      - remedy

  - name: 2.1.1 - Fetching chargen value from ansible facts
    shell: echo "{{ ansible_local.chargen_211_audit }}" 
    register: chargen
    ignore_errors: True
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
      - all
      - remedy

  - name: 2.1.1 - Commenting out or removing any lines starting with chargen
    shell: "{{ item }}"
    with_items:
      - sed -i '/^chargen/s/chargen/\#chargen/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\schargen/s/chargen/\#chargen/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/chargen
    failed_when: no
    when: chargen.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
            - remedy
      - all
      - remedy

  - name: 2.1.2 - Fetching daytime value from ansible facts
    shell: echo "{{ ansible_local.daytime_212_audit }}" 
    register: daytime
    ignore_errors: True
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
      - all
      - remedy

  - name: 2.1.2 - Commenting out or removing any lines starting with daytime
    shell: "{{ item }}"
    with_items:
      - sed -i '/^daytime/s/daytime/\#daytime/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdaytime/s/daytime/\#daytime/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/daytime
    failed_when: no
    when: daytime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
            - remedy
      - all
      - remedy
 
  
  - name: 2.1.3 - Fetching discard value from ansible value
    shell: echo "{{ ansible_local.discard_213_audit }}" 
    register: discard
    ignore_errors: True
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
      - all
      - remedy

  - name: 2.1.3 - Commenting out or removing any lines starting with discard
    shell: "{{ item }}"
    with_items:
      - sed -i '/^discard/s/discard/\#discard/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdiscard/s/discard/\#discard/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/discard
    failed_when: no
    when: discard.stdout.find("FAILED") != -1
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
            - remedy
      - all
      - remedy

  - name: 2.1.4 - Fetching echo value from ansible facts
    shell: echo "{{ ansible_local.echo_214_audit }}"
    register: echo
    ignore_errors: True
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - all
      - remedy

  - name: 2.1.4 - Commenting out or removing any lines starting with echo from /etc/inetd.conf and /etc/inetd.d/*
    command: "{{ item }}"
    with_items:
      - sed -i '/^echo/s/echo/\#echo/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\secho/s/echo/\#echo/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/*echo
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf/echo
    failed_when: no
    when: echo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - a

  - name: 2.1.5 - Fetching time value from ansible facts
    shell: echo "{{ ansible_local.time_215_audit }}"
    register: time
    ignore_errors: True
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - all
      - remedy

  - name: 2.1.5 - Commenting out or removing any lines starting with time from /etc/inetd.conf and /etc/inetd.d/*
    command: "{{ item }}"
    with_items:
      - sed -i '/^time/s/time/\#time/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\stime/s/time/\#time/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/*time
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf/time
    failed_when: no
    when: time.stdout.find("FAILED") != -1
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - all
      - remedy

  - name: 2.1.6 - Fetching rsh value from ansible facts
    shell: echo "{{ ansible_local.rsh_216_audit }}"
    register: rsh
    ignore_errors: True
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - all
      - remedy

  - name: 2.1.6 - Commenting out or removing any lines starting with shell, login, or exec from /etc/inetd.conf and /etc/inetd.d/*.
    shell: "{{ item }}"
    with_items:
      - sed -i '/^shell/s/shell/\#shell/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sshell/s/shell/\#shell/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/^login/s/login/\#login/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\slogin/s/login/\#login/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/^exec/s/exec/\#exec/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sexec/s/exec/\#exec/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/rsh /etc/xinetd/rlogin /etc/xinetd/rexec
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf/
    failed_when: no
    when: rsh.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - all
      - remedy


  - name: 2.1.7 - Fetching talk value from ansible facts
    shell: echo "{{ ansible_local.talk_217_audit }}" 
    register: talk
    ignore_errors: True
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - all
      - remedy

  - name: 2.1.7- Comment out or remove any lines starting with talk or ntalk from /etc/inetd.conf and /etc/inetd.d/*
    command: "{{ item }}"
    with_items:
      - sed -i '/^talk/s/talk/\#talk/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\stalk/s/talk/\#talk/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/^ntalk/s/ntalk/\#ntalk/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sntalk/s/ntalk/\#ntalk/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf
    failed_when: no
    when: talk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - all
      - remedy

  - name: 2.1.8 - Fetching telnet value from ansible facts
    shell: echo "{{ ansible_local.telnet_218_audit }}"
    register: telnet
    ignore_errors: True
    become: yes
    tags:
      - telnet
      - 2.1.8
      - two
      - all
      - remedy

  - name: 2.1.8 - Commenting out or removing any lines starting with telnet from /etc/inetd.conf and /etc/inetd.d/*.
    command: "{{ item }}"
    with_items:
      - sed -i '/^telnet/s/telnet/\#telnet/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\stelnet/s/telnet/\#telnet/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf
    failed_when: no
    when: telnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnet
      - 2.1.8
      - two
      - all
      - remedy


  - name: 2.1.9 - Fetching tftp value from ansible facts
    shell: echo "{{ ansible_local.tftp_219_audit }}" 
    register: tftp
    ignore_errors: True
    become: yes
    tags:
      - tftp
      - 2.1.9
      - two
      - all
      - remedy

  - name: 2.1.9 - Commenting out or removing any lines starting with tftp from /etc/inetd.conf and /etc/inetd.d/*
    command: "{{ item }}"
    with_items:
      - sed -i '/^tftp/s/tftp/\#tftp/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\stftp/s/tftp/\#tftp/g' /etc/inetd.conf /etc/inetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.d/*
      - sed -i '/\sdisable/s/no/yes/g' /etc/xinetd.conf
    failed_when: no
    when: tftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tftp
      - 2.1.9
      - two
      - all
      - remedy



  - name: 2.1.10 - Fetching xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_2110_audit }}"
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - xinetd
      - 2.1.10
      - two
      - all
      - remedy

  - name: 2.1.10 - Disabling xinetd 
    service:
      name: xinetd
      enabled: no
    failed_when: no
    when: xinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xinetd
      - 2.1.10
      - two
      - all
      - remedy

  - name: 2.1.11 - Fetching openxinetd value from ansible facts
    shell: echo "{{ ansible_local.openxinetd_2111_audit }}" 
    register: openxinetd
    ignore_errors: True
    become: yes
    tags:
      - openxinetd
      - 2.1.11
      - two
      - all
      - remedy

  - name: 2.1.11 - Uninstalling openbsd-inetd
    apt:
      name: "openbsd-inetd"
      state: absent
    failed_when: no
    when: openxinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - openxinetd
      - 2.1.11
      - all
      - remedy

  - name: 2.2.1.1 - Fetching timesync value from ansibe facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - all
      - remedy

  - name: 2.2.1.1 - Installing ntp, chrony
    apt:
      name: ntp
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - timesync
      - 2.2.1.1
      - all
      - remedy

  - name: 2.2.1.2 - Fetching ntp value from ansible facts
    shell: echo "{{ ansible_local.ntp_2212_audit }}"
    register: ntp
    ignore_errors: True
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - all
      - remedy

  - name: 2.2.1.2 - Adding restrict lines and Editing server or pool lines
    lineinfile:
      path: /etc/ntp.conf
      state: present
      line: "{{item}}"
    with_items:
       - "restrict -4 default kod nomodify notrap nopeer noquery"
       - "restrict -6 default kod nomodify notrap nopeer noquery"
       - "server {{ remote_server }}"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - ntp
      - 2.2.1.2
      - all
      - remedy

  - name: 2.2.1.2 - Configure ntp to run as the ntp user by adding or editing the /etc/init.d/ntp file
    lineinfile:
      path: /etc/init.d/ntp
      state: present
      line: 'RUNASUSER=ntp'
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - ntp
      - 2.2.1.2
      - all
      - remedy

  - name: 2.2.1.2 - Restarting ntp
    service:
      name: ntpd
      state: restarted
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.2
      - two
      - all
      - remedy

  - name: 2.2.1.3 - Fetching chrony value from ansible facts
    shell: echo "{{ ansible_local.chrony_2213_audit }}" 
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - all
      - remedy

  - name: 2.2.1.3 - Add or edit server or pool lines to /etc/chrony/chrony.conf
    lineinfile:
      path: /etc/chrony/chrony.conf
      state: present
      line: server {{ remote_server }}
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - chrony
      - 2.2.1.3
      - all
      - remedy

  - name: 2.2.1.3 - Restarting chrony
    service:
      name: chronyd
      state: restarted
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - all
      - remedy

  - name: 2.2.2 - Fetching xorg value from ansible facts
    shell: echo "{{ ansible_local.xorg_222_audit }}" 
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - all
      - remedy

  - name: 2.2.2 - Uninstalling xorg-xll-server
    apt:
      name: "xserver-xorg*"
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - all
      - remedy


  - name: 2.2.3 - Fetching avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_223_audit }}" 
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.3 - Disabling avahi-daemon
    service:
      name: avahi-daemon
      enabled: no
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - all
      - remedy

  - name: 2.2.4 - Fetching cups value from ansible facts
    shell: echo "{{ ansible_local.cups_224_audit }}" 
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - all
      - remedy

  - name: 2.2.4 - disabling cups
    service:
      name: cups
      enabled: no
    failed_when: no
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - all
      - remedy

  - name: 2.2.5 - Fetching dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_225_audit }}"
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - all
      - remedy

  - name: 2.2.5 - Disabling dhcpd
    service:
      name: isc-dhcp-server
      enabled: no
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - all
      - remedy

  - name: 2.2.5 - Disabling dhcpd
    service:
      name: isc-dhcp-server6
      enabled: no
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - all
      - remedy

  - name: 2.2.6 - Fetching ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_226_audit }}"
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - all
      - remedy

  - name: 2.2.6 - Disable slapd
    service:
      name: slapd
      enabled: no
    failed_when: no
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - all
      - remedy

  - name: 2.2.7 - Fetching nfsrpc value from ansible facts
    shell: echo "{{ ansible_local.nfsrpc_227_audit }}" 
    register: nfsrpc
    ignore_errors: True
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - all
      - remedy

  - name: 2.2.7 - Disabling nfs-server
    service:
      name: nfs-server
      enabled: no
    failed_when: no
    when: nfsrpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - all
      - remedy

  - name: 2.2.7 - Disabling rpcbind
    service:
      name: rpcbind
      enabled: no
    failed_when: no
    when: nfsrpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfsrpc
      - 2.2.7
      - two
      - all
      - remedy

  - name: 2.2.8 - Fetching dns value from ansible facts
    shell: echo "{{ ansible_local.dns_228_audit }}" 
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - all
      - remedy

  - name: 2.2.8 - Disabling bind9
    service:
      name: bind9
      enabled: no
    failed_when: no
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - all
      - remedy

  - name: 2.2.9 - Fetching ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_229_audit }}" 
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - all
      - remedy

  - name: 2.2.9 - Disabling vsftpd
    service:
      name: vsftpd
      enabled: no
    failed_when: no
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - all
      - remedy

  - name: 2.2.10 - Fetching http value from ansible facts
    shell: echo "{{ ansible_local.http_2210_audit }}" 
    register: http
    ignore_errors: True
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - all
      - remedy

  - name: 2.2.10 - Disabling apache2
    service:
      name: apache2
      enabled: no
    failed_when: no
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - all
      - remedy

  - name: 2.2.11 - Fetching imap from ansible facts
    shell: echo "{{ ansible_local.imap_2211_audit }}" 
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - all
      - remedy

  - name: 2.2.11 - Disabling dovecot
    service:
      name: dovecot
      enabled: no
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - all
      - remedy

  - name: 2.2.12 - Fetching samba value from ansible facts
    shell: echo "{{ ansible_local.samba_2212_audit }}" 
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - all
      - remedy

  - name: 2.2.12 - Disabling smbd
    service:
      name: smbd
      enabled: no
    failed_when: no
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - all
      - remedy

  - name: 2.2.13 - Fetching proxy value from ansible facts
    shell: echo "{{ ansible_local.proxy_2213_audit }}" 
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - proxy
      - 2.2.13
      - two
      - all
      - remedy

  - name: 2.2.13 - Disabling squid
    service:
      name: squid
      enabled: no
    failed_when: no
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - proxy
      - 2.2.13
      - two
      - all
      - remedy

  - name: 2.2.14 - Fetching snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_2214_audit }}" 
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - snmp
      - 2.2.14
      - two
      - all
      - remedy

  - name: 2.2.14 - Disable snmpd
    service:
      name: snmpd
      enabled: no
    failed_when: no
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - snmp
      - 2.2.14
      - two
      - all
      - remedy


  - name: 2.2.15 - Fetching mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2215_audit }}"
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - all
      - remedy

  - name: 2.2.15 - Installing postfix
    apt:
      name: postfix
      state: present
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - mail
      - 2.2.15
      - all
      - remedy

  - name: 2.2.15 - Replacing lines to /etc/postfix/main.cf
    replace:
      path: /etc/postfix/main.cf
      regexp: "inet_interfaces = all" 
      replace: "inet_interfaces = loopback-only"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - all
      - remedy

  - name: 2.2.15 - Restarting postfix
    service:
      name: postfix
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - all
      - remedy

  - name: 2.2.16 - Fetching rsync value from ansible facts
    shell: echo "{{ ansible_local.rsync_2216_audit }}" 
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - rsync
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.16 - Disable rsync
    service:
      name: rsync
      enabled: no
    failed_when: no
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsync
      - 2.2.16
      - two
      - all
      - remedy

  - name: 2.2.17 - Fetching nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2217_audit }}" 
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - nis
      - 2.2.17
      - two
      - all
      - remedy

  - name: 2.2.17 - Disable nis
    service:
      name: nis
      enabled: no
    failed_when: no
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nis
      - 2.2.17
      - two
      - all
      - remedy

  - name: 2.3.1 - Fetching nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}"
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - two
      - nisc
      - 2.3.1
      - all
      - remedy

  - name: 2.3.1 - Uninstalling nis
    apt:
      name: nis
      state: absent
    failed_when: no
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - nisc
      - 2.3.1
      - all
      - remedy
      
  - name: 2.3.2 - Fetching rshc value from ansible facts    
    shell: echo "{{ ansible_local.rshc_232_audit }}"
    register: rshc
    ignore_errors: True
    become: yes
    tags:
      - two
      - rshc
      - 2.3.2
      - all
      - remedy

  - name: 2.3.2 - Uninstalling rsh
    apt:
      name: rsh-client
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - rshc
      - 2.3.2
      - all
      - remedy

  - name: 2.3.2 - Uninstalling rsh client
    apt:
      name: rsh-redone-client 
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - rshc
      - 2.3.2
      - all
      - remedy

  - name: 2.3.3 - Fetching talkc value from ansible facts
    shell: echo "{{ ansible_local.talkc_233_audit }}"
    register: talkc
    ignore_errors: True
    become: yes
    tags:
      - two
      - talkc
      - 2.3.3
      - all
      - remedy

  - name: 2.3.3 - Uninstalling talk
    apt:
      name: talk
      state: absent
    failed_when: no
    when: talkc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - talkc
      - 2.3.3
      - all
      - remedy

  - name: 2.3.4 - Fetching telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_234_audit }}"
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - two
      - telnetc
      - 2.3.4
      - all
      - remedy
      
  - name: 2.3.4 - Uninstalling telnet
    apt:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - telnetc
      - 2.3.4
      - all
      - remedy

  - name: 2.3.5 - Fetching ldapc from ansible facts
    shell: echo "{{ ansible_local.ldapc_235_audit }}"
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - two
      - ldapc
      - 2.3.5
      - all
      - remedy

  - name: 2.3.5 - Uninstalling ldap-utils
    apt:
      name: ldap-utils
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - ldapc
      - 2.3.5
      - all
      - remedy
   
  - name: 3.1.1 - Fetching ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_311_audit }}"
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.1 - Setting up the parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.ip_forward*|#net.ipv4.ip_forward*)"
      line: "net.ipv4.ip_forward=0"
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.1 - Activating kernel parameter
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.2 - Fetching packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_312_audit }}"
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy
   
  - name: 3.1.2 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.send_redirects*|#net.ipv4.conf.all.send_redirects*)"
      line: "net.ipv4.conf.all.send_redirects=0"
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.1.2 - Setting parameter in /etc/sysctl.conf 
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.send_redirects*|#net.ipv4.conf.default.send_redirects*)"
      line: "net.ipv4.conf.default.send_redirects=0"
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.send_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.send_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes  
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.2.1 - Fetching the routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_321_audit }}"
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy
   
  - name: 3.2.1 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.accept_source_route*|#net.ipv4.conf.all.accept_source_route*)"
      line: "net.ipv4.conf.all.accept_source_route=0"
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 - Setting parameter in /etc/sysctl.conf
    ignore_errors: True
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.accept_source_route*|#net.ipv4.conf.default.accept_source_route*)"
      line: "net.ipv4.conf.default.accept_source_route=0"
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_source_route 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - all
      - remedy

  - name: 3.2.2 - Fetching icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_322_audit }}"
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.accept_redirects*|#net.ipv4.conf.all.accept_redirects*)"
      line: "net.ipv4.conf.all.accept_redirects=0"
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.accept_redirects*|#net.ipv4.conf.default.accept_redirects*)"
      line: "net.ipv4.conf.default.accept_redirects=0"
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes  
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.3 - Fetching secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_323_audit }}"
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.3 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.secure_redirects*|#net.ipv4.conf.all.secure_redirects*)"
      line: "net.ipv4.conf.all.secure_redirects=0"
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.3 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.secure_redirects*|#net.ipv4.conf.default.secure_redirects*)"
      line: "net.ipv4.conf.default.secure_redirects=0"
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.3 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.secure_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.secure_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.4 - Fetching suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_324_audit }}"
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.log_martians*|#net.ipv4.conf.all.log_martians*)"
      line: "net.ipv4.conf.all.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.log_martians*|#net.ipv4.conf.default.log_martians*)"
      line: "net.ipv4.conf.default.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.log_martians 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.log_martians
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.5 - Fetching broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_325_audit }}"
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.5 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_echo_ignore_broadcasts*|#net.ipv4.icmp_echo_ignore_broadcasts*)"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.5 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.6 - Fetching the bogusicmp value from ansible facts
    shell: echo "{{ ansible_local.bogusicmp_326_audit }}"
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.6 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_ignore_bogus_error_responses*|#net.ipv4.icmp_ignore_bogus_error_responses*)"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.6 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.7 - Fetching the reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_327_audit }}"
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - all
      - remedy

  - name: 3.2.7 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^(net.ipv4.conf.all.rp_filter*|#net.ipv4.conf.all.rp_filter*)" ,line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^(net.ipv4.conf.default.rp_filter*|#net.ipv4.conf.default.rp_filter*)" ,line: "net.ipv4.conf.default.rp_filter=1"}
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - all
      - remedy

  - name: 3.2.7 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
     - reversepathfilter
     - 3.2.7
     - three
     - all

  - name: 3.2.8 - Fetching the tcpsyncookies value from ansible facts 
    shell: echo "{{ ansible_local.tcpsyncookies_328_audit }}"
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all
      - remedy
      
  - name: 3.2.8 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.tcp_syncookies*|#net.ipv4.tcp_syncookies*)"
      line: "net.ipv4.tcp_syncookies=1"
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all
      - remedy

  - name: 3.2.8 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all   
      - remedy

  - name: 3.3.1 - Fetching the ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_331_audit }}"
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.accept_ra*|#net.ipv6.conf.all.accept_ra*)"
      line: "net.ipv6.conf.all.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.default.accept_ra*|#net.ipv6.conf.default.accept_ra*)"
      line: "net.ipv6.conf.default.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_ra 
        value: '0'
        sysctl_set: yes    
      - name: net.ipv6.conf.default.accept_ra
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.2 - Fetching the ipv6redirects values from ansible facts
    shell: echo "{{ ansible_local.ipv6redirects_332_audit }}"
    register: ipv6redirects
    ignore_errors: True
    become: yes
    tags:
      - ipv6redirects
      - 3.3.2
      - three
      - all
      - remedy
   
  - name: 3.3.2 - Setting parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^(net.ipv6.conf.default.accept_redirects*|#net.ipv6.conf.default.accept_redirects*)" ,line: "net.ipv6.conf.default.accept_redirects=0"}
      - {regexp: "^(net.ipv6.conf.all.accept_redirects*|#net.ipv6.conf.all.accept_redirects*)" ,line: "net.ipv6.conf.all.accept_redirects=0"}
    failed_when: no
    when: ipv6redirects.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6redirects
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
     - name: net.ipv6.conf.all.accept_redirects
       value: '0'
       sysctl_set: yes
     - name: net.ipv6.conf.default.accept_redirects
       value: '0'
       sysctl_set: yes
     - name: net.ipv4.route.flush
       value: '1'
       sysctl_set: yes
    failed_when: no
    when: ipv6redirects.stdout.find("FAILED") != -1
    become: yes
    tags:
     - ipv6redirects
     - 3.3.2
     - three
     - all

  - name: 3.3.3 - Fetching the ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_333_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - 3.3.3
      - three
      - all
      - remedy

  - name: 3.3.3 - Disabling IPv6 through the GRUB2 config
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& ipv6.disable=1/' /etc/default/grub
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.3.3
      - three
      - all
      - remedy

  - name: 3.3.3 - Updating the grub2 configuration
    shell: 'sudo update-grub'
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.3.3
      - three
      - all
      - remedy

  - name: 3.4.1 - Fetching the tcpwrappers values from ansible facts
    shell: echo "{{ ansible_local.tcpwrappers_341_audit }}"
    register: tcpwrappers
    ignore_errors: True
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - all
      - remedy
   
  - name: 3.4.1 - installing tcpwrappers
    apt: name=tcpd state=present
    failed_when: no 
    when: tcpwrappers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - all
      - remedy

  - name: 3.4.2 - Fetching the hostsallow values from ansible facts
    shell: echo "{{ ansible_local.hostsallow_342_audit }}"
    register: hostsallow
    ignore_errors: True
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - all
      - remedy

  - name: 3.4.2 - creating /etc/hosts.allow file
    lineinfile:
      path: /etc/hosts.allow 
      state: present
      line: "{{ hosts_allow }}" 
    failed_when: no
    when: hostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - all
      - remedy

  - name: 3.4.3 - Fetching the hostsdeny values from ansible facts 
    shell: echo "{{ ansible_local.hostsdeny_343_audit }}"
    register: hostsdeny
    ignore_errors: True
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - all
      - remedy

  - name: 3.4.3 - creating /etc/hosts.deny file
    lineinfile:
      path: /etc/hosts.deny
      state: present
      line: "{{ hosts_deny }}"
    failed_when: no
    when: hostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - all
      - remedy

  - name: 3.4.4 - Fetching the permhostsallow values from ansible facts
    shell: echo "{{ ansible_local.permhostsallow_344_audit }}"
    register: permhostsallow
    ignore_errors: True
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - all
      - remedy

  - name: 3.4.4 - setting permissions on /etc/hosts.allow  
    file:
      path: /etc/hosts.allow
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permhostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - all
      - remedy

  - name: 3.4.5 - Fetching the permhostsdeny values from ansible facts
    shell: echo "{{ ansible_local.permhostsdeny_345_audit }}"
    register: permhostsdeny
    ignore_errors: True
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - all
      - remedy

  - name: 3.4.5 - setting permissions on /etc/hosts.deny
    file:
      path: /etc/hosts.deny
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permhostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - all
      - remedy

  - name: 3.5.1 - Fetching the dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_351_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - all
      - remedy

  - name: 3.5.1 - Creating dccp configuration file and adding its content
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install dccp /bin/true "
    failed_when: no
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - all
      - remedy

  - name: 3.5.2 - Fetching the sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_352_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - all
      - remedy

  - name: 3.5.2 - Creating sctp configuration file and adding its content
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install sctp /bin/true"
    failed_when: no
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - all
      - remedy

  - name: 3.5.3 - Fetching the rds value from ansible facts
    shell: echo "{{ ansible_local.rds_353_audit }}"
    register: rds
    ignore_errors: True
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - all
      - remedy

  - name: 3.5.3 - Creating rds configuration file and adding its content
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install rds /bin/true"
    failed_when: no
    when: rds.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - all
      - remedy

  - name: 3.5.4 - Fetching the tipc values from ansible facts
    shell: echo "{{ ansible_local.tipc_354_audit }}"
    register: tipc
    ignore_errors: True
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - all
      - remedy

  - name: 3.5.4 - Creating tipc configuration file and adding its content
    lineinfile:
      path: /etc/modprobe.d/CIS.conf
      state: present
      line: "install tipc /bin/true"
    failed_when: no
    when: tipc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - all
      - remedy

  - name: 3.6.1 - Fetching the iptables values from ansible facts
    shell: echo "{{ ansible_local.iptables_361_audit }}"
    register: iptables
    ignore_errors: True
    become: yes
    tags:
      - iptables
      - 3.6.1
      - three
      - remedy
      - all

  - name: 3.6.1 - installing iptables
    apt: name=iptables state=present
    when: iptables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptables
      - 3.6.1
      - three
      - remedy
      - all

  - name: 3.6.3 - Fetching the loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.loopbacktraffic_363_audit }}"
    register: loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.3
      - three
      - remedy
      - all

  - name: 3.6.3 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT
      - iptables -A OUTPUT -o lo -j ACCEPT
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.3
      - three
      - remedy
      - all

  - name: 3.6.4 - Fetching the outbound value from ansible facts
    shell: echo "{{ ansible_local.outbound_364_audit }}"
    register: outbound
    ignore_errors: True
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - name: 3.6.4 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outbound.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.6.4
      - three
      - remedy
      - all

  - name: 3.6.5 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_365_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.5 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_ubuntu16.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.5
      - three
      - remedy
      - all

  - name: 3.6.2 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_362_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - remedy
      - all

  - name: 3.6.2 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_ubuntu16.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.6.2 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2
      - three
      - remedy
      - all

  - name: 3.7 - Fetching wireless values from ansible facts
    shell: echo "{{ ansible_local.wireless_37_audit }}"
    register: wireless
    ignore_errors: True
    become: yes
    tags:
      - wireless
      - '3.7'
      - three
      - all
      - remedy

  - name: 3.7 - Installing wireless-tools
    apt: name=wireless-tools state=present
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - '3.7'
      - three
      - all
      - remedy

  - name: 3.7 - Grepping wireless interfaces
    shell: "ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w' | wc -l"
    register: iplink
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - '3.7'
      - three
      - remedy
      - all

  - name: 3.7 - Disabling wireless interfaces
    shell: "wifi=$(ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w') && sudo ip link set $wifi down"
    when:
      - wireless.stdout.find("FAILED") != -1
      - iplink.stdout != "0"
    become: yes
    tags:
      - wireless
      - '3.7'
      - three
      - remedy
      - all
      
########CHAPTER-4######

  - name: 4.1.1.1 Fetching auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4111_audit }}"
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.1.1
      - four
      - all
      - remedy

  - name: 4.1.1.1 - setting up parameter in /etc/audit/auditd.conf
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*)"
      line: "max_log_file = 8"
    failed_when: no
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.1.1
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Fetching auditlogfull value from ansible facts
    shell: echo "{{ ansible_local.auditlogfull_4112_audit }}"
    register: auditlogfull
    ignore_errors: True
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Adding space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^(space_left_action =*)'
      line: 'space_left_action = email'
    failed_when: no
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Adding action mail acct parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^action_mail_acct =*'
      line: 'action_mail_acct = root'
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Adding admin space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^(admin_space_left_action =*)'
      line: 'admin_space_left_action = halt'
    when: auditlogfull.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogfull
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Fetching auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4113_audit }}"
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Adding audit log file action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file_action =*)"
      line: "max_log_file_action = keep_logs"
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.2 - Fetching auditdservice value from ansible
    shell: echo "{{ ansible_local.auditdservice_412_audit }}"
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.2
      - four
      - all
      - remedy

  - name: 4.1.2 Installing auditd
    apt:
      name: auditd
      state: present
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.2
      - four
      - all
      - remedy

  - name: 4.1.2 - Enable auditd
    service: name=auditd enabled=yes
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.2
      - four
      - all
      - remedy

  - name: 4.1.3 - Fetching auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_413_audit }}"
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.3 - Adding parameter in GRUB_CMDLINE_LINUX
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit=1/' /etc/default/grub  
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.3
      - four
      - all 
      - remedy
     
  - name: 4.1.3 - Updating grub
    command: update-grub 
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.4 - Fetching moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_414_audit }}"
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.4 - Editing or creating a file in the /etc/audit/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when:
    - moddatetime.stdout.find("FAILED") != -1 
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.4 - Editing or creating a file in the /etc/audit/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
    - moddatetime.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.4 - Restarting auditd
    service: 
      name: auditd 
      state: reloaded
    when: moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.4
      - four
      - all 
      - remedy

  - name: 4.1.5 - Fetching modeusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_415_audit }}"
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - all
      - remedy

  - name: 4.1.5 - Ensure events that modify user/group information are collected
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/group -p wa -k identity"
      - "-w /etc/passwd -p wa -k identity"
      - "-w /etc/gshadow -p wa -k identity"
      - "-w /etc/shadow -p wa -k identity"
      - "-w /etc/security/opasswd -p wa -k identity"
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.5
      - four
      - all
      - remedy

  - name: 4.1.6 - Fetching the modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_416_audit }}"
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.6 - Editing or creating a file in the /etc/audit/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
    when: 
    - modsysnet.stdout.find("FAILED") != -1
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.6 - Editing or creating a file in the /etc/audit/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
    when: 
    - modsysnet.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.7 - Fetching the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_417_audit }}"
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Editing or creating a file in the /etc/audit/ directory for Selinux
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/selinux/ -p wa -k MAC-policy" 
      - "-w /usr/share/selinux/ -p wa -k MAC-policy"    
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Editing or creating a file in the /etc/audit/ directory for apparmor
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/apparmor/ -p wa -k MAC-policy"
      - "-w /etc/apparmor.d/ -p wa -k MAC-policy" 
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.8 - Fetching loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_418_audit }}"
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.8 - Adding lines in /etc/audit/audit.rules file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
       - "-w /var/log/faillog -p wa -k logins"
       - "-w /var/log/lastlog -p wa -k logins"
       - "-w /var/log/tallylog -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.8 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.9 - Fetching session value from ansible facts
    shell: echo "{{ ansible_local.session_419_audit }}"
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.9 - Adding lines in the /etc/audit/rules.d/ file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /var/run/utmp -p wa -k session"
      - "-w /var/log/wtmp -p wa -k logins"
      - "-w /var/log/btmp -p wa -k logins"     
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - all
      - remedy
    
  - name: 4.1.9 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.10 - Fetching dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_4110_audit }}"
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - all
      - remedy

  - name: 4.1.10 - Editing or creating a file in the /etc/audit/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:
    - dacperm.stdout.find("FAILED") != -1 
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - all
      - remedy
 
  - name: 4.1.10 - Editing or creating a file in the /etc/audit/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:  
    - dacperm.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - all
      - remedy
 
  - name: 4.1.10 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: dacperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dacperm
      - 4.1.10
      - four
      - all
      - remedy

  - name: 4.1.11 - Fetching fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_4111_audit }}"
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - Editing or creating a file in the /etc/audit/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when: 
    - fileaccess.stdout.find("FAILED") != -1
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - Editing or creating a file in the /etc/audit/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when: 
    - fileaccess.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: fileaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fileaccess
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.12 - Fetching privilegecmd value from ansible facts
    shell: echo "{{ ansible_local.privilegecmd_4112_audit }}"
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.12 - Editing or creating a file in the /etc/audit/rules.d/ directory
    shell:  find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print  "-a always,exit -F path=" $1 " -F perm=x -F auid>=1000 -F auid!=4294967295  -k privileged" }' >> /etc/audit/audit.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.12 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.13 - Fetching fsmount vslue from ansible facts
    shell: echo "{{ ansible_local.fsmount_4113_audit }}"
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - Editing or creating a file in the /etc/audit/ directory for 32 bit system 
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when: 
    - fsmount.stdout.find("FAILED") != -1
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - Editing or creating a file in the /etc/audit/ directory for 64 bit system
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
      - "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when: 
    - fsmount.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: fsmount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsmount
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.14 - Fetching filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4114_audit }}"
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.14 - Editing or creating a file in the /etc/audit/ directory for 32 bit system
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when:
    - filedeletion.stdout.find("FAILED") != -1
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.14 - Editing or creating a file in the /etc/audit/ directory for 64 bit system
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when:
    - filedeletion.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - all  
      - remedy
  
  - name: 4.1.14 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: filedeletion.stdout.find("FAILED") != -1
    become: yes
    tags:
      - filedeletion
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.15 - Fetching sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_4115_audit }}"
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.15 - Adding lines in /etc/audit/audit.rules
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
       - "-w /etc/sudoers -p wa -k scope"
       - "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.15 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.16 - Fetching sudolog value from ansible facts
    shell: echo "{{ ansible_local.sudolog_4116_audit }}"
    register: sudolog
    ignore_errors: True
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - all
      - remedy

  - name: 4.1.16 - Adding lines in /etc/audit/audit.rules 
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-w /var/log/sudo.log -p wa -k actions"
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - all
      - remedy
      
  - name: 4.1.16 - Restarting auditd
    service:
      name: auditd
      state: reloaded
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.16
      - four
      - all
      - remedy

  - name: 4.1.17 - Fetching kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4117_audit }}"
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - all
      - remedy

  - name: 4.1.17 -  Editing or creating a file in the /etc/audit/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when:
    - kernelmodule.stdout.find("FAILED") != -1 
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - all 
      - remedy
 
  - name: 4.1.17 -  Editing or creating a file in the /etc/audit/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when: 
    - kernelmodule.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - all
      - remedy
 
  - name: 4.1.17 - Restarting auditd 
    service:
      name: auditd
      state: reloaded
    when: kernelmodule.stdout.find("FAILED") != -1
    become: yes
    tags:
      - kernelmodule
      - 4.1.17
      - four
      - all
      - remedy

  - name: 4.1.18 - Fetching the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4118_audit }}"
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.18
      - four
      - all
      - remedy

  - name: 4.1.18 - creating auditconfig configuration file
    lineinfile:
      path: /etc/audit/audit.rules
      state: present
      line: "-e 2"
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.18
      - four
      - all
      - remedy

  - name: 4.2.1.1 - Fetching rsyslog value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4211_audit }}" 
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.1
      - four
      - all
      - remedy

  - name: 4.2.1.1 - Enable rsylog
    systemd: 
      name: rsyslog
      masked: no
      enabled: yes
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.1
      - four
      - all
      - remedy

  - name: 4.2.1.2 - Fetching rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4212_audit }}" 
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - all
      - remedy
  
  - name: 4.2.1.2 - Adding lines to /etc/rsyslog.conf 
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - all  
      - remedy

  - name: 4.2.1.2 - reload the rsyslogd configuration 
    command: "{{item}}"
    with_items:
      - "pkill -HUP rsyslogd"
    ignore_errors: yes
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.2
      - four
      - all
      - remedy

  - name: 4.2.1.3 - Fetching rsyslogperm value from ansible facts
    shell: echo "{{ ansible_local.rsyslogperm_4213_audit }}" 
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.3 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: "{{ item }}"
      state: present
      line: "$FileCreateMode 0640"
    with_items:
      - /etc/rsyslog.conf
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy
  - name: 4.2.1.3 - configuring rsyslogperm file
    command: find /etc/rsyslog.d/ -name "*.conf"
    register: rsyslogperm_result
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy
            - remedy

  - name: 4.2.1.3 - configuring rsyslogperm file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "$FileCreateMode 0640"
    loop: '{{ rsyslogperm_result.stdout_lines }}'
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy
            - remedy

  - name: 4.2.1.4 - Fetching rsyslogsendlogs value from ansible facts
    shell: echo "{{ ansible_local.rsyslogsendlogs_4214_audit }}" 
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - configuring rsyslogsendlogs file
    command: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    register: rsyslogsendlogs_result
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - all
      - remedy
            - remedy

  - name: 4.2.1.4 - configuring rsyslogsendlogs file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "*.* @@loghost.example.com"
    loop: '{{ rsyslogsendlogs_result.stdout_lines }}'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - all
      - remedy
            - remedy

  - name: 4.2.1.4 - reload the rsyslogd configuration
    command: "{{item}}"
    with_items:
      - "pkill -HUP rsyslogd"
    ignore_errors: yes
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.4
      - four
      - all
      - remedy


  - name: 4.2.1.5 - Fetching remotersyslogmsg value from ansible facts 
    shell: echo "{{ ansible_local.remotesyslogmsg_4215_audit }}" 
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      regexp: "^#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Adding line to /etc/rsyslog.conf for TCPServerRun
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - reload the rsyslogd configuration
    command: "{{item}}"
    with_items:
      - "pkill -HUP rsyslogd"
    ignore_errors: yes
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.2.1 - Fetching syslogngenb value from ansible facts
    shell: echo "{{ ansible_local.syslogngenb_4221_audit }}" 
    register: syslogngenb
    ignore_errors: True
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - all
      - remedy

  - name: 4.2.2.1 - Installing syslog-ng
    apt:
      name: syslog-ng
      state: present
    ignore_errors: yes
    failed_when: no
    when: syslogngenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - all
      - remedy

  - name: 4.2.2.1 - start syslog-ng service
    service:
      name: syslog-ng
      enabled: yes
    failed_when: no
    when: syslogngenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - all
      - remedy
 
  - name: 4.2.2.1 - Enable syslog-ng
    command: update-rc.d syslog-ng enable
    when: syslogngenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngenb
      - 4.2.2.1
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Fetching sloggingconf value from ansible facts 
    shell: echo "{{ ansible_local.sloggingconf_4222_audit  }}" 
    register: sloggingconf
    ignore_errors: True
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Adding lines in syslog-ng file 
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
    with_items:
      - "log { source(src); source(chroots); filter(f_console); destination(console); };"
      - "log { source(src); source(chroots); filter(f_console); destination(xconsole); };"
      - "log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };"
      - "log { source(src); source(chroots); filter(f_newserr); destination(newserr); };"
      - "log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };"
      - "log { source(src); source(chroots); filter(f_mailinfo); destination(mailinfo); };"
      - "log { source(src); source(chroots); filter(f_mailwarn); destination(mailwarn); };"
      - "log { source(src); source(chroots); filter(f_mailerr); destination(mailerr); };"
      - "log { source(src); source(chroots); filter(f_mail); destination(mail); };"
      - "log { source(src); source(chroots); filter(f_acpid); destination(acpid); flags(final); };"
      - "log { source(src); source(chroots); filter(f_acpid_full); destination(devnull); flags(final); };"
      - "log { source(src); source(chroots); filter(f_acpid_old); destination(acpid); flags(final); };"
      - "log { source(src); source(chroots); filter(f_netmgm); destination(netmgm); flags(final); };"
      - "log { source(src); source(chroots); filter(f_local); destination(localmessages); };"
      - "log { source(src); source(chroots); filter(f_messages); destination(messages); };"
      - "log { source(src); source(chroots); filter(f_iptables); destination(firewall); };"
      - "log { source(src); source(chroots); filter(f_warn); destination(warn); };"
    failed_when: no
    when: sloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Reload the syslog-ng configuration
    command: "{{item}}"
    ignore_errors: yes
    with_items:
      - "pkill -HUP syslog-ng"
    when: sloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sloggingconf
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.3 - Fetching syslogngperm vslue from ansible facts
    shell: echo "{{ ansible_local.syslogngperm_4223_audit }}" 
    register: syslogngsendlogs
    ignore_errors: True
    become: yes
    tags:
      - syslogngperm
      - 4.2.2.3
      - four
      - all
      - remedy

  - name: 4.2.2.3 - syslog-ng default file permissions configured
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); };"
    failed_when: no
    when: syslogngsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngperm
      - 4.2.2.3
      - four
      - all
      - remedy

  - name: 4.2.2.4 - Fetching syslogngsendlogs value from ansible facts 
    shell: echo "{{ ansible_local.syslogngsendlogs_4224_audit }}" 
    register: syslogngsendlogs
    ignore_errors: True
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - all
      - remedy

  - name: 4.2.2.4 - syslog-ng is configuring
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - 'destination logserver { tcp("logfile.example.com" port(514)); };'
      - "log { source(src); destination(logserver); };"
    when: syslogngsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - all
      - remedy
  
  - name: 4.2.2.4 - Reload the syslog-ng configuration
    command: "{{item}}"
    ignore_errors: yes
    with_items:
      - "pkill -HUP syslog-ng"
    failed_when: no
    when: syslogngsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - syslogngsendlogs
      - 4.2.2.4
      - four
      - all
      - remedy

  - name: 4.2.2.5 - Fetching remotesyslogng value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogng_4225_audit }}" 
    register: remotesyslogng
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - all
      - remedy

  - name: 4.2.2.5 - Configuring lines in syslogng conf file
    lineinfile:
      path: /etc/syslog-ng/syslog-ng.conf
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "source net{ tcp(); };"
      - 'destination remote { file("/var/log/remote/${FULLHOST}-log"); };' 
      - "log { source(net); destination(remote); };"
    failed_when: no
    when: remotesyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - all
      - remedy

  - name: 4.2.2.5 - Reload the syslog-ng configuration
    command: "{{item}}"
    ignore_errors: yes
    with_items:
      - "pkill -HUP syslog-ng"
    when: remotesyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogng
      - 4.2.2.5
      - four
      - all
      - remedy

  - name: 4.2.3 - Fetching rsyslogng value from ansible facts
    shell: echo "{{ ansible_local.rsyslogng_423_audit }}" 
    register: rsyslogng
    ignore_errors: True
    become: yes
    tags:
      - rsyslogng
      - 4.2.3
      - four
      - all
      - remedy

  - name: 4.2.3 - installing rsyslog 
    apt:
      name: rsyslog
      state: present
    ignore_errors: yes
    failed_when: no
    when: rsyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogng
      - 4.2.3
      - four
      - all
      - remedy

  - name: 4.2.3 - Installing syslog-ng
    apt:
      name: syslog-ng
      state: present
    ignore_errors: yes
    failed_when: no
    when: rsyslogng.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogng
      - 4.2.3
      - four
      - all
      - remedy

  - name: 4.2.4 - Fetching permlogfiles value from ansible facts
    shell: echo "{{ ansible_local.permlogfiles_424_audit }}" 
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.4
      - four
      - all
      - remedy

  - name: 4.2.4 - setting permissions on all existing log files
    shell: "find /var/log/* -type f -exec chmod g-wx,o-rwx {} +"
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.4
      - four
      - all
      - remedy

  - name: 4.3 - Fetching logrotate value from ansible facts
    shell: echo "{{ ansible_local.logrotate_43_audit }}" 
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - Adding a line in /etc/logrotate.conf
    lineinfile:
      path: '/etc/logrotate.conf'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    failed_when: no
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - configuring logrotate file
    shell: find /etc/logrotate.d/* -name "*"
    failed_when: no
    register: logrotate_result
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - configuring logrotate file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    loop: '{{ logrotate_result.stdout_lines }}'
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy
    
  - name: 5.1.1 - Fetching the cron value from ansible facts
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy

  - name: 5.1.1 - Enabling crond
    service:
      name: cron
      enabled: yes
    when: cron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy
 
  - name: 5.1.2 - Fetching the permcrontab value from ansible facts
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all
      - remedy
 
  - name: 5.1.2 - Setting permissions to /etc/crontab 
    file:
      path: "/etc/crontab"
      mode: 0600
      owner: root
      group: root
    when: permcrontab.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all
      - remedy

  - name: 5.1.3 - Fetching the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all
      - remedy

  - name: 5.1.3 - Setting permissions to /etc/cron.hourly
    file:
      path: "/etc/cron.hourly"
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all
      - remedy

  - name: 5.1.4 - Fetching the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy

  - name: 5.1.4 - Setting permissions to /etc/cron.daily
    file:
      path: "/etc/cron.daily"
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy

  - name: 5.1.5 - Fetching the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy

  - name: 5.1.5 - Setting permissions to/etc/cron.weekly
    file:
      path: "/etc/cron.weekly"
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy

  - name: 5.1.6 - Fetching the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy

  - name: 5.1.6 - Setting permissions to/etc/cron.monthly
    file:
      path: "/etc/cron.monthly"
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy

  - name:  5.1.7 - Fetching the permcrond value from ansible facts
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy

  - name: 5.1.7 - Setting permissions to /etc/cron.d
    file:
      path: "/etc/cron.d"
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy
  
  - name: 5.1.8 - Fetching atcron value from ansible facts
    shell: echo "{{ ansible_local.atcron_518_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Creating a directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0755'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy
      
  - name: 5.1.8 - backing up file
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/atcron/cron_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy
      
  - name: 5.1.8 - backing up file
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy
      
  - name: 5.1.8 - Removing cron.deny file
    file:
      path: "/etc/cron.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy
      
  - name: 5.1.8 - Removing at.deny file
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy
  - name: 5.1.8 - creating a file
    file:
      path: "{{ item }}"
      state: touch
      mode: 0600
      owner: root
      group: root
    with_items:
      - /etc/at.allow
      - /etc/cron.allow
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - creating a file
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - creating a file
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.2.1 - Fetching the sshdperm value from ansible facts
    shell: echo "{{ ansible_local.sshdperm_521_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all
      - remedy

  - name: 5.2.1 - Setting permissions /etc/ssh/sshd_config
    file:
      path: "/etc/ssh/sshd_config"
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all 
      - remedy

  - name: 5.2.2 - Fetching the sshprotocol value from ansible facts
    shell: echo "{{ ansible_local.sshprotocol_522_audit }}"
    register: sshprotocol
    ignore_errors: True
    become: yes
    tags:
      - sshprotocol
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.2 - Adding SSH Protocol to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^Protocol*"
      line: Protocol 2
    when: sshprotocol.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshprotocol
      - 5.2.2
      - five
      - all
      - remedy
  
  - name:  5.2.3 - Fetching the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_523_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.2.3
      - five
      - all
      - remedy
  
  - name: 5.2.3 - Adding SSH LogLevel to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshloglevel
      - 5.2.3
      - five
      - all  
      - remedy

  - name:  5.2.4 - Fetching the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_524_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.2.4
      - five
      - all
      - remedy

  - name: 5.2.4 - Disabling SSH X11 forwarding in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshx11forward
      - 5.2.4
      - five
      - all
      - remedy

  - name: 5.2.5 - Fetching the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_525_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.5
      - five
      - all
      - remedy

  - name: 5.2.5 - Limiting SSH MaxAuthTries to 4 or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.5
      - five
      - all
      - remedy

  - name: 5.2.6 - Fetching the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_526_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.6
      - five
      - all
      - remedy

  - name: 5.2.6 - Adding SSH IgnoreRhosts to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "{{ IgnoreRhosts }}"
    when: sshignorerhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.6
      - five
      - all
      - remedy

  - name: 5.2.7 - Fetching the sshauthentication value from ansible facts
    shell: echo "{{ ansible_local.sshauthentication_527_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.2.7
      - five
      - all
      - remedy

  - name: 5.2.7 - Disabling SSH HostbasedAuthentication in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "{{ HostbasedAuthentication }}"
    when: sshauthentication.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshauthentication
      - 5.2.7
      - five
      - all
      - remedy

  - name:  5.2.8 - Fetching the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_528_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.2.8
      - five
      - all
      - remedy

  - name: 5.2.8 - Adding SSH root login to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitRootLogin*|#PermitRootLogin*)"
      line: "{{ PermitRootLogin }}"
    when: sshrootlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshrootlogin
      - 5.2.8
      - five
      - all
      - remedy

  - name: 5.2.9 - Fetching the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_529_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.2.9
      - five
      - all
      - remedy

  - name: 5.2.9 - Adding SSH PermitEmptyPasswords to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "{{ PermitEmptyPasswords }}"
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.2.9
      - five
      - all
      - remedy

  - name: 5.2.10 - Adding SSH PermitUserEnvironment to /etc/ssh/sshd_config
    shell: echo "{{ ansible_local.sshpue_5210_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.2.10
      - five
      - all
      - remedy

  - name: 5.2.10 - Adding SSH PermitUserEnvironment to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "{{ PermitUserEnvironment }}"
    when: sshpue.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpue
      - 5.2.10
      - five
      - all
      - remedy

#  - name: 5.2.11 - Fetching the sshmacalgorithm value from ansible facts
#    shell: echo "{{ ansible_local.sshmacalgorithm_5211_audit }}"
#    register: sshmacalgorithm
#    ignore_errors: True
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.2.11
#      - five
#      - all
#      - remedy

#  - name: 5.2.11 - Adding strong MAC algorithms to /etc/ssh/sshd_config
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      line: 'MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com'
#    when: sshmacalgorithm.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.2.11
#      - five
#      - all
#      - remedy
 
  - name: 5.2.12 - Fetching the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5212_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - all
      - remedy
 
  - name: 5.2.12 - Adding SSH Idle Timeout Interval to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - all
      - remedy

  - name: 5.2.12 - Adding SSH Idle Timeout Interval to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: "{{ ClientAliveCountMax }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.12
      - five
      - all
      - remedy

  - name: 5.2.13 - Fetching the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5213_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.13 - Setting SSH LoginGraceTime to one minute or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "{{ LoginGraceTime }}"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.14 - Fetching the SSH access value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_5214_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.14 - Adding SSH access to allowusers in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "AllowUsers   #<userlist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.14 - Adding SSH access to allowgroups in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "AllowGroups  #<grouplist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.14 - Adding SSH access to denyusers in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "DenyUsers    #<userlist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.14 - Adding SSH access to denygroups in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "DenyGroups   #<grouplist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.15 - Fetching the SSH warning banner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5215_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - all
      - remedy

  - name: 5.2.15 - Adding SSH warning banner to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - all
      - remedy

  - name: 5.3.1 - Fetching the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_531_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Installing libpam-pwquality
    apt: 
      name: libpam-pwquality
      state: present
    failed_when: no
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Checking if parameter exists
    shell: (cat /etc/pam.d/common-password | grep "password.*requisite.*pam_pwquality.so.*retry=3" | wc -l)
    register: passcreation_check
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      line: "password        requisite                       pam_pwquality.so retry=3"
    when:
      - passwdcreation.stdout.find("FAILED") != -1
      - passcreation_check.stdout == "0"
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^minlen*"
      line: "minlen = 14"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^credit*"
      line: "dcredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^lcredit*"
      line: "lcredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^ocredit*"
      line: "ocredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Adding password length to conform to site policy
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^ucredit*"
      line: "ucredit = -1"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - all 
      - remedy

  - name: 5.3.2 - Fetching the lockout value from ansible facts 
    shell: echo "{{ ansible_local.lockout_532_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Adding parameters to conform site policy
    lineinfile:
      path: /etc/pam.d/common-auth
      state: present
      line: "auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - all
      - remedy
  
  - name: 5.3.3 - Fetching the passwdreuse value from ansible facts
    shell: echo "{{ ansible_local.passwdreuse_533_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all  
      - remedy
  
  - name: 5.3.3 - Checking if pam_pwhistory is present
    shell: cat /etc/pam.d/common-password | grep "password.*required.*pam_pwhistory.so" | wc -l
    register: reuse
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 - Adding pam_pwhistory and parameter to conform site policy
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      line: "password required pam_pwhistory.so remember=5"
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "0"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 - Adding parameters to conform site policy
    command: sed -i 's/password.*required.*pam_pwhistory.so.*/& remember=5/' /etc/pam.d/common-password
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "1"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - all
      - remedy
  
  - name: 5.3.4 - Fetching the passwdhashing value from ansible facts
    shell: echo "{{ ansible_local.passwdhashing_534_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - all   
      - remedy
  
  - name: 5.3.4 - Adding parameters to conform site policy
    command: sed -i 's/password.*success=1.*pam_unix.so.*/& sha512/' /etc/pam.d/common-password
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - all
      - remedy
 
  - name: 5.4.1.1 - Fetching the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5411_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - all  
      - remedy
 
  - name: 5.4.1.1 - Setting PASS_MAX_DAYS parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "(PASS_MAX_DAYS.*)"
      line: "{{ PASS_MAX_DAYS }}"
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - all
      - remedy
  
  - name: 5.4.1.1 - Grepping users
    shell: "grep ':$6' /etc/shadow | cut -d: -f1,5 | awk -F: '$2>=365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - all
      - remedy

  - name: 5.4.1.1 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_max=365
    loop: "{{ echo.stdout_lines }}"
    when: 
    - passwdexpiration.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - all
      - remedy

  - name: 5.4.1.2 - Fetching the minidays value from ansible facts 
    shell: echo "{{ ansible_local.minidays_5412_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - all 
      - remedy

  - name: 5.4.1.2 - Setting PASS_MIN_DAYS parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "PASS_MIN_DAYS*"
      line: "{{ PASS_MIN_DAYS }}"
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - all
      - remedy

  - name: 5.4.1.2 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - all
      - remedy

  - name: 5.4.1.2 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_min=7
    loop: "{{ echo.stdout_lines }}"
    when:
    - minidays.stdout.find("FAILED") != -1    
    - item != "root"
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Fetching the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5413_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - all 
      - remedy

  - name: 5.4.1.3 - Setting PASS_WARN_AGE parameter to conform site policy
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "PASS_WARN_AGE*"
      line: "{{ PASS_WARN_AGE }}"
    when: warningdays.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.3 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_warn=7
    loop: "{{ echo.stdout_lines }}"
    when:
    - warningdays.stdout.find("FAILED") != -1     
    - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - all
      - remedy

  - name: 5.4.1.4 Ensure inactive password lock is 30 days or less
    shell: echo "{{ ansible_local.inactivepasswdlock_5414_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - all 
      - remedy

  - name: 5.4.1.4 Ensure inactive password lock is 30 days or less
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - all
      - remedy

  - name: 5.4.1.4 - Grepping users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - all
      - remedy

  - name: 5.4.1.4 - Modifying user parameters for all users
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when:
    - inactivepasswdlock.stdout.find("FAILED") != -1    
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - all 
      - remedy

  - name: 5.4.1.5 - Ensure all users last password change date is in the past
    shell: echo "{{ ansible_local.lastpasswdchange_5415_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - all 
      - remedy

  - name: 5.4.1.5 - Locking if users password change date is not in the past
    shell: |
       count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
                fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - all
      - remedy
 
  - name: 5.4.2 - Fetching the sysaccnonlogin value from ansible facts
    shell: echo "{{ ansible_local.sysaccnonlogin_542_audit }}"
    register: sysaccnonlogin
    ignore_errors: True
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all 
      - remedy
 
  - name: 5.4.2 - Ensure system accounts are secured
    shell: |
       awk -F: '$3<1000 && $7!="/usr/sbin/nologin" {print $1}' /etc/passwd
    register: echo
    when: sysaccnonlogin.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - Locking the user 
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysaccnonlogin.stdout.find("FAILED") != -1      
    - item != "root"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - changing the shell of user
    user:
      name: "{{ item }}"
      shell: '/usr/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysaccnonlogin.stdout.find("FAILED") != -1      
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.3 - Fetching the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_543_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - all 
      - remedy

  - name: 5.4.3 - Ensure default group for the root account is GID 0
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - all
      - remedy

  - name: 5.4.4 - Fetching the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_544_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - all 
      - remedy

  - name: 5.4.4 - Adding umask to /etc/bashrc
    lineinfile:
      path: /etc/bash.bashrc
      state: present
      line: "umask 027"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.4 - Adding umask to /etc/profile
    lineinfile:
      path: "{{ item }}"
      state: present
      line: "umask 027"
    with_items:
      - /etc/profile
      - /etc/profile.d/*.sh
      - /etc/bash.bashrc
    failed_when: no      
    when: defaultuser.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.5 - Fetching the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_545_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - all 
      - remedy

  - name: 5.4.5 - Adding a TMOUT 
    lineinfile:
      path: "{{ item }}"
      state: present
      line: 'TMOUT=600'
    with_items:
      - /etc/profile
      - /etc/bashrc 
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - all
      - remedy


  - name: 5.5 - Fetching the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.rootlogin_55_audit }}"
    register: rootlogin
    ignore_errors: True
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - all 
      - remedy

  - name: 5.5 - Removing entries for any consoles that are not in a physically secure location
    shell: sed -i '/^tty/!d'  /etc/securetty
    when: rootlogin.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - all
      - remedy
 
  - name: 5.6 - Fetching the suaccess value from ansible facts 
    shell: echo "{{ ansible_local.suaccess_56_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - all 
      - remedy
 
  - name: 5.6 - Adding a line in /etc/pam.d/su
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: "auth required pam_wheel.so"
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - all
      - remedy

  - name: 5.6  - Adding user to wheel group
    lineinfile:
      path: /etc/group
      state: present
      regexp: "wheel*"
      line: "wheel:x:10:root,#<user_list>"
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - all    
      - remedy
      
  - name: 6.1.1 - Fetching the auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}"
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.1 - Reviewing all installed packages
    shell: dpkg --get-selections | grep -v upgrade | awk '{ print $1 }'
    register: dpkg_output
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.1 - Investigate the results to ensure any discrepancies found are understood and support proper secure operation of the system
    shell: dpkg --verify {{ item }}
    with_items: "{{ dpkg_output.stdout_lines }}"
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.2 - Fetching permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}"
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.2 - Setting permissions to /etc/passwd
    file:
      path: "/etc/passwd"
      mode: 0644                     
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.3 - Fetching permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_613_audit }}"
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.3 - Setting permissions to /etc/shadow
    file:
      path: "/etc/shadow"           
      mode: o-rwx,g-wx
      owner: root
      group: shadow
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.4 - Fetching permgroup value from ansible facts
    shell: echo "{{ ansible_local.permgroup_614_audit }}"
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy

  - name: 6.1.4 - Setting permissions to /etc/group
    file:
      path: "/etc/group"                         
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy

  - name: 6.1.5 - Fetching permgshadow value from ansible facts
    shell: echo "{{ ansible_local.permgshadow_615_audit }}"
    register: permgshadow
    ignore_errors: True
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.5 - Setting permissions to /etc/gshadow
    file:
      path: "/etc/gshadow"
      mode: 0640
      owner: root
      group: shadow
    when: permgshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.6 - Fetching permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_616_audit }}"
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.6 - Setting permissions to /etc/passwd-
    file:
      path: "/etc/passwd-"             
      mode: 0644
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.7 - Fetching permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_617_audit }}"
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.7 - Setting permissions to /etc/shadow-
    file:
      path: "/etc/shadow-"
      mode: 0640
      owner: root
      group: shadow
    when: permshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.8 - Fetching permgroupi value from ansibe facts
    shell: echo "{{ ansible_local.permgroupi_618_audit }}"
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.8 - Setting permissions to /etc/group-
    file:
      path: "/etc/group-"
      state: touch
      mode: 0644 
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.9 - Fetching permgshadowi value from facts
    shell: echo "{{ ansible_local.permgshadowi_619_audit }}"
    register: permgshadowi
    ignore_errors: True
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Setting permissions to /etc/gshadow-
    file:
      path: "/etc/gshadow-"
      mode: 0640
      owner: root
      group: shadow
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_6110_audit }}"
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching world writable files
    shell: "sudo df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Changing ownership to world writable files
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.11 - Fetching unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_6111_audit }}"
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name: 6.1.11 - Fetching unowned files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name: 6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name: 6.1.11 - Fetching unowned files or directories exist
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name: 6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name: 6.1.12 - Fetching ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6112_audit }}"
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Fetching ungrouped files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Fetching ungrouped files or directories exist
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.2.1 - Fetching emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_621_audit }}"
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Grepping users
    shell: "grep '/home' /etc/passwd | awk  -F: '$3>=1000 {print $1}'"
    register: echo
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Grepping users password fields that are empty
    shell: "grep '{{ echo.stdout }}' /etc/shadow | awk -F':' '$2==\"!\" || $2==\"\" || $2==\"!!\"{print $1}'"
    register: ech
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Locking users for password fields are empty
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ ech.stdout_lines }}"
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.2 - Fetching nolegacypasswd value from ansible facts
    shell: echo "{{ ansible_local.nolegacypasswd_622_audit }}"
    register: nolegacypasswd
    ignore_errors: True
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.2 - Removing any legacy '+' entries from /etc/passwd
    shell: "sudo sed -i 's/+://g' /etc/passwd"
    when: nolegacypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.3 - Fetching legacyshadow value from ansible facts
    shell: echo "{{ ansible_local.nolegacyshadow_623_audit }}"
    register: nolegacyshadow
    ignore_errors: True
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.3
      - six
      - all
      - remedy

  - name: 6.2.3 - Removing legacy "+" entries exist in /etc/shadow
    shell: "sudo sed -i 's/+://g' /etc/shadow"
    when: nolegacyshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.3
      - six
      - all
      - remedy

  - name: 6.2.4 - Fetching nolegacygroup value from ansible facts 
    shell: echo "{{ ansible_local.nolegacygroup_624_audit }}"
    register: nolegacygroup
    ignore_errors: True
    become: yes
    tags:
      - nolegacygroup
      - 6.2.4
      - six
      - all
      - remedy

  - name: 6.2.4 - Removing legacy "+" entries exist in /etc/group
    shell: "sudo sed -i 's/+://g' /etc/group"
    when: nolegacygroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacygroup
      - 6.2.4
      - six
      - all
      - remedy

  - name: 6.2.5 - Fetching rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_625_audit }}"
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.5 - Removing users other than root with UID 0
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rootuid
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.7 - Fetching userhdir value from ansible 
    shell: echo "{{ ansible_local.userhdir_627_audit }}"
    register: userhdir
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Grepping users home directories that do not exist
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=1000 && $7!=/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Creating home directory for user
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ echo.stdout_lines }}"
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.8 - Fetching userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_628_audit }}"
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.8 - Grepping users home directories permissions are 750 or more restrictive
    shell: |
       cat /etc/passwd | awk -F: '($3>=1000 && $7 !="/usr/sbin/nologin" && $7 !="/bin/false") { print $1 }' | sort
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.8 - Changing users' home directories permissions are 750 or more restrictive
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.9 - Fetching userownhdir value from ansible facts
    shell: echo "{{ ansible_local.userownhdir_629_audit }}"
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.9 - Checking the ownership of any home directories that are not owned by the defined user to the correct user
    shell: |
       cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | grep -v 'root 0 /root' | while read user uid dir; do
       if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
             owner=$(stat -L -c "%U" "$dir")
             if [ "$owner" != "$user" ]; then
                 echo "$dir:$user:$owner" >> /tmp/cisuserhdir
             fi
       fi
       done
          a=$(sed -i 's/\/:nobody.*//g' /tmp/cisuserhdir)
          b=$(cat /tmp/cisuserhdir | grep -v '^[[:space:]]*$')
          echo "$b"
          rm -rf /tmp/cisuserhdir
    register: userhdirreg
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.9 - Change the ownership of any home directories to the correct user
    file:
      path: "{{ item.split(':')[0] }}"
      owner: "{{ item.split(':')[1] }}"
      group: "{{ item.split(':')[1] }}"
    loop: "{{ userhdirreg.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.10 - Fetching the dotfiles value from ansible facts
    shell: echo "{{ ansible_local.dotfiles_6210_audit }}"
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.10 - Finding users have dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.10 - Changing ownership to dotfiles
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.11 - Fetching forwardfiles value from ansible facts 
    shell: echo "{{ ansible_local.forwardfiles_6211_audit }}"
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: echo
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ echo.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.12 - Fetching netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_6212_audit }}"
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.12 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: echo
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.12 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ echo.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.13 - Fetching grpnetrcfiles value from ansible facts
    shell: echo "{{ ansible_local.grpnetrcfiles_6213_audit }}"
    register: grpnetrcfiles
    ignore_errors: True
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.13 - Finding users having .netrc Files are not group or world writable
    shell: "find /home/ -name '.netrc' -perm /g+w,o+w"
    register: echo
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.13 - Changing ownership to .netrc Files
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.14 - Fetching rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6214_audit }}"
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts' | wc -l"
    register: echo
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Removing users having .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ echo.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.15 - Fetching groups value from ansible facts
    shell: echo "{{ ansible_local.groups_6215_audit }}"
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Adding groups to correct if any discrepancies found
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              groupadd $a
              usermod -g $a $a
            fi
        done
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.16 - Fetching duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6216_audit }}"
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Checking for duplicate UID
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Checking for duplicate UID 
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when:
    - duplicateuid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Checking for duplicate UID
    shell: "b=$(cat /etc/passwd | cut -d':' -f3 |  sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c || true"
    when:
    - duplicateuid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    register: val
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Assign an unique UID
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicateuid.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.17 - Fetching duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6217_audit }}"
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Checking for duplicate GID
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Checking for duplicate GID
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when:
    - duplicategid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Checking for duplicate GID
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when:
    - duplicategid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Assign an unique GID
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicategid.stdout.find("FAILED") != -1
    - item != ""
    ignore_errors: yes
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.18 - Fetching no duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6218_audit }}"
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Checking if duplicate user name exist
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Checking if duplicate user name exist
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when:
    - duplicateuser.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Displaying if duplicate user name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicateuser.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.19 - Fetching duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6219_audit }}"
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.19 - Checking if duplicate group name exist
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.19 - Checking if duplicate group name exist
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}' | awk 'FNR != 1'"
    register: val
    when:
    - duplicategroup.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.19 - Displaying if duplicate group name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicategroup.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.20 - Fetching shadowgroup value from ansible facts
    shell: echo "{{ ansible_local.shadowgroup_6220_audit }}"
    register: shadowgroup
    ignore_errors: True
    become: yes
    tags:
      - shadowgroup
      - 6.2.20
      - six
      - all
      - remedy

  - name: 6.2.20 - Clearing groups assigned to shadow group
    shell: |
       a=$(cat /etc/group | grep "^shadow" | awk -F: '{print $3}')
       if [ $(cat /etc/group | grep "^shadow" | wc -l) -gt 0 ]; then
           for i in $(cat /etc/passwd | cut -d, -f1-3 | grep "$a" | awk -F: '{print $1}'); do
              usermod -g users $i
            done
       fi
    failed_when: no
    when: shadowgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shadowgroup
      - 6.2.20
      - six
      - all
      - remedy

  - name: 1.8 - Fetching updates value from ansible facts
    shell: echo "{{ ansible_local.updates_18_audit }}"
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - updates
      - '1.8'
      - one
      - all
      - remedy

  - name: 1.8 - Creating a directory
    file:
      path: /etc/ansible/backup/updates
      state: directory
      mode: '0750'
      recurse: yes
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - all
      - remedy

  - name: 1.8 - Finding up .deb files
    find:
      paths: /var/cache/apt/archives/
      patterns: '*.deb'
      age: '{{fileage_ubuntu}}'
    register: findreg
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - all
      - remedy

  - name: 1.8 - Backing up .deb files
    copy:
      src: "{{ item }}"
      dest: /etc/ansible/backup/updates
      remote_src: yes
    with_items: "{{findreg.files | map(attribute='path') | list}}"
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - all
      - remedy

  - name: 1.8 - Updating the system
    apt:
      name: "*"
      state: latest
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.8'
      - updates
      - one
      - all
      - remedy

  - name: Include Database
    include: tasks/after_linux.yml
