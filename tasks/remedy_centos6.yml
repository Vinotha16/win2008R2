---
  - name: Include Actualfact
    include: tasks/actualfact_centos6.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

#####REMEDY
  - name: 1.1.1.1 - Fetching the cramfs value from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit }}" 
    register: cramfs
    ignore_errors: True
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
      
  - name: 1.1.1.1 - Creating cramfs configuration file
    lineinfile:
      path: /etc/modprobe.d/cramfs.conf
      line: "install cramfs /bin/true"
      state: present
      create: yes
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
      
  - name: 1.1.1.1 - Unload the cramfs module
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
      
  - name: 1.1.1.2 - Fetching the freevxfs value from ansible facts
    shell: echo "{{ ansible_local.freevxfs_1112_audit }}" 
    register: freevxfs
    ignore_errors: True
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.2 - Creating freevxfs configuration file
    lineinfile:
      path: /etc/modprobe.d/freevxfs.conf
      line: "install freevxfs /bin/true"
      state: present
      create: yes
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.2 - Unload the freevxfs module
    shell: "rmmod freevxfs"
    failed_when: no
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.3 - Fetching the jffs2 value from ansible facts
    shell: echo "{{ ansible_local.jffs2_1113_audit }}" 
    register: jffs2
    ignore_errors: True
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all
      
  - name: 1.1.1.3 - Creating jffs2 configuration file
    lineinfile:
      path: /etc/modprobe.d/jffs2.conf
      line: "install jffs2 /bin/true"
      state: present
      create: yes
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all 
      
  - name: 1.1.1.3 - Unload the jffs2 module
    shell: "rmmod jffs2"
    failed_when: no
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all  
 
  - name: 1.1.1.4 - Fetching the hfs value from ansible facts 
    shell: echo "{{ ansible_local.hfs_1114_audit }}" 
    register: hfs
    ignore_errors: True
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all

  - name: 1.1.1.4 - Creating hfs configuration file
    lineinfile:
      path: /etc/modprobe.d/hfs.conf
      line: "install hfs /bin/true"
      state: present
      create: yes
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all
     
  - name: 1.1.1.4 - Unload the hfs module
    shell: "rmmod hfs"
    failed_when: no
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all

  - name: 1.1.1.5 - Fetching the hfsplus value from ansible facts 
    shell: echo "{{ ansible_local.hfsplus_1115_audit }}" 
    register: hfsplus
    ignore_errors: True
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.5 - Creating hfsplus configuration file
    lineinfile:
      path: /etc/modprobe.d/hfsplus.conf
      line: "install hfsplus /bin/true"
      state: present
      create: yes
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all
      
  - name: 1.1.1.5 - Unload the hfsplus module
    shell: "rmmod hfsplus"
    failed_when: no
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Fetching the squashfs value from ansible facts 
    shell: echo "{{ ansible_local.squashfs_1116_audit }}" 
    register: squashfs 
    ignore_errors: True
    become: yes
    tags:
      - squashfs 
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Creating squashfs configuration file
    lineinfile:
      path: /etc/modprobe.d/squashfs.conf
      line: "install squashfs /bin/true"
      state: present
      create: yes
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs 
      - 1.1.1.6
      - one
      - remedy
      - all
      
  - name: 1.1.1.6 - Creating squashfs configuration file
    shell: "rmmod squashfs"
    failed_when: no
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs 
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Fetching the udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1117_audit }}" 
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Creating udf configuration file
    lineinfile:
      path: /etc/modprobe.d/udf.conf
      line: "install udf /bin/true"
      state: present
      create: yes
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - Unload the udf module
    shell: "rmmod udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.2 - Fetching the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}" 
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all

  - name: 1.1.2 - Configuring /etc/fstab
    lineinfile:
      path: /etc/fstab
      line: tmpfs  /tmp  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0
      state: present
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all

  - name: 1.1.2 - Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: noexec,nodev,nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all

  - name: 1.1.3 - Fetching the tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_113_audit }}" 
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all

  - name: 1.1.3 - Remount tmpnodev
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all
 
  - name: 1.1.4 - Fetching the tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_114_audit }}" 
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.4 - Remount tmpnosuid
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.5 - Fetching the tmpnoexec value from ansible facts
    shell: echo "{{ ansible_local.tmpnoexec_115_audit }}" 
    register: tmpnoexec
    ignore_errors: True
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.5 - Remount tmpnoexec
    mount:
      path: /tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: tmpnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.6 Fetching the var value from ansible facts 
    shell: echo "{{ ansible_local.var_116_audit }}" 
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.6 - Grep var in fstab
    shell: (sudo grep " /var " /etc/fstab | wc -l)
    ignore_errors: yes
    register: var_result
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all
      
  - name: 1.1.6 - Message
    debug: msg="Suggestion to create partition /var"
    when:
      - var.stdout.find("FAILED") != -1
      - var_result.stdout == "0"  
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.7 - Fetching the vartmp value from ansible facts
    shell: echo "{{ ansible_local.vartmp_117_audit }}" 
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all

  - name: 1.1.7 - Grep vartmp in fstab
    shell: (sudo grep " /var/tmp " /etc/fstab | wc -l)
    register: vartmp_result
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all

  - name: 1.1.7 - Message
    debug: msg="Suggestion to partition /var/tmp"
    when:
      - vartmp.stdout.find("FAILED") != -1
      - vartmp_result.stdout == "0"
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - remedy
      - all 

  - name: 1.1.8 - Fetching the vtnodev value from ansible facts
    shell: echo "{{ ansible_local.vtnodev_118_audit }}" 
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - remedy
      - all

  - name: 1.1.8 - Remount vtnodev
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: vtnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - remedy
      - all
      
  - name: 1.1.9 - Fetching the vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_119_audit }}" 
    register: vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - remedy
      - all
    
  - name: 1.1.9 - Remount vtnosuid
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: vtnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - remedy
      - all

  - name: 1.1.10 - Fetching the vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_1110_audit }}" 
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - remedy
      - all

  - name: 1.1.10 - Remount vtnoexec
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: non
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - remedy
      - all

  - name: 1.1.11 - Fetching the varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1111_audit }}" 
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.11 - Grep varlog in fstab
    shell: (sudo grep " /var/log " /etc/fstab | wc -l)
    ignore_errors: yes
    register: varlog_result
    when: varlog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.11 - Message
    debug: msg="Suggestion to partition /var/log"
    when:
      - varlog.stdout.find("FAILED") != -1
      - varlog_result.stdout == "0"
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - remedy
      - all

  - name: 1.1.12 - Fetching the varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1112_audit }}" 
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.12 - Grep varlogaudit in fstab
    shell: (sudo grep " /var/log/audit " /etc/fstab | wc -l)
    ignore_errors: yes
    register: varlogaudit_result
    when: varlogaudit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.12 - Message
    debug: msg="Suggestion to partition /var/log/audit"
    when:
      - varlogaudit.stdout.find("FAILED") != -1
      - varlogaudit_result.stdout == "0" 
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - remedy
      - all

  - name: 1.1.13 - Fetching the home value from ansible facts
    shell: echo "{{ ansible_local.home_1113_audit }}" 
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.13 - Grep home in fstab
    shell: '(sudo grep " /home" /etc/fstab | wc -l)'
    ignore_errors: yes
    register: home_result
    when: home.stdout.find("FAILED") != -1
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.13 - Message
    debug: msg="Suggestion to create partition /home"
    when:
      - home.stdout.find("FAILED") != -1
      - home_result.stdout == "0"  
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - remedy
      - all

  - name: 1.1.14 - Fetching the homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1114_audit }}" 
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - remedy
      - all

  - name: 1.1.14 - Remount homenodev
    mount:
      path: /home
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - remedy
      - all

  - name: 1.1.15 - Fetching the shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_1115_audit }}" 
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - remedy
      - all

  - name: 1.1.15 - Remount shmnodev
    mount:
      path: /dev/shm
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    when: shmnodev.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - remedy
      - all

  - name: 1.1.16 - Fetching the shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_1116_audit }}" 
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - remedy
      - all
 
  - name: 1.1.16 - Remount shmnosuid
    mount:
      path: /dev/shm
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    when: shmnosuid.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - remedy
      - all

  - name: 1.1.17 - Fetching the shmnoexec value from ansible facts 
    shell: echo "{{ ansible_local.shmnoexec_1117_audit }}" 
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - remedy
      - all
 
  - name: 1.1.17 - Remount shmnoexec
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    when: shmnoexec.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.18 - Fetching the medianodev value from ansible facts
    shell: echo "{{ ansible_local.medianodev_1118_audit }}"
    register: medianodev
    ignore_errors: True
    become: yes
    tags:
      - medianodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.18 - nodev option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nodev/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes	
    when: medianodev.stdout.find("FAILED") != -1	
    tags:
      - medianodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.19 - Fetching the medianosuid value from ansible facts
    shell: echo "{{ ansible_local.medianosuid_1119_audit }}"
    register: medianosuid
    ignore_errors: True
    become: yes
    tags:
      - medianosuid
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - nosuid option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nosuid/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianosuid.stdout.find("FAILED") != -1	
    tags:
      - medianosuid
      - 1.1.19
      - one
      - remedy	  
      - all

  - name: 1.1.20 - Fetching the medianoexec value from ansible facts
    shell: echo "{{ ansible_local.medianoexec_1120_audit }}"
    register: medianoexec
    ignore_errors: True
    become: yes
    tags:
      - medianoexec
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.20 - noexec option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,noexec/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianoexec.stdout.find("FAILED") != -1
    tags:
      - medianoexec
      - 1.1.20
      - one
      - remedy
      - all
      
  - name: 1.1.21 - Fetching the stickybit value from ansible facts 
    shell: echo "{{ ansible_local.stickybit_1121_audit }}" 
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.21
      - one
      - remedy
      - all

  - name: 1.1.21 - set the sticky bit on all world writable directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - stickybit
      - 1.1.21
      - one
      - remedy
      - all 

  - name: 1.1.22 - Fetching the automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1122_audit }}" 
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.22
      - one
      - remedy
      - all

  - name: 1.1.22 - Disable Automounting
    shell: 'sudo chkconfig autofs off'
    when: automount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - automount
      - 1.1.22
      - one
      - remedy
      - all

  - name: 1.1.23 - Fetching the usbstorage value from ansible facts
    shell: echo "{{ ansible_local.usbstorage_1123_audit }}"
    register: usbstorage
    ignore_errors: True
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - remedy
      - all

  - name: 1.1.23 - Creating usbstorage configuration file
    lineinfile:
      path: /etc/modprobe.d/usb_storage.conf
      line: "install usb-storage /bin/true"
      state: present
      create: yes
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - remedy
      - all

  - name: 1.1.23 - Unloading the usb-storage
    shell: "rmmod usb-storage"
    failed_when: no
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - remedy
      - all

  - name: 1.2.1 - Fetching the repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_121_audit }}" 
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
     - 1.2.1
     - repoconfig
     - one
     - remedy
     - all
  
  - name: 1.2.1 verify repositories are configured correctly
    command: "yum repolist"
    failed_when: no
    when: repoconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.1
      - repoconfig
      - one
      - remedy
      - all

  - name: 1.2.3 - Fetching the gpgkey value from ansible facts 
    shell: echo "{{ ansible_local.gpgkey_123_audit }}" 
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - 1.2.3
      - gpgkey
      - one
      - remedy
      - all

  - name: "1.2.3 - Ensure GPG keys are configured"
    shell: sudo rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
    failed_when: no
    when: gpgkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.3
      - gpgkey
      - one
      - remedy
      - all

  - name: 1.2.2 - Fetching the gpgcheck value from ansible facts
    shell: echo "{{ ansible_local.gpgcheck_122_audit }}" 
    register: gpgcheck
    ignore_errors: True
    become: yes
    tags:
      - 1.2.2
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.2.2 - Setting gpgcheck to 1
    lineinfile:
      name: /etc/yum.conf
      regexp: "^(gpgcheck=*)"
      line: "gpgcheck=1"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.2
      - gpgcheck
      - one
      - remedy
      - all
    
  - name: 1.2.2 - grep gpgcheck=0 in yum.repos.d
    shell: grep -iRl ^gpgcheck=0 /etc/yum.repos.d/*
    register: gpgcheck_result
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.2
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.2.2 - change gpgcheck=0 to gpgcheck=1 in /etc/yum.repos.d/*
    shell: "sed -i 's/gpgcheck=0/gpgcheck=1/g' {{item}}"
    loop: "{{ gpgcheck_result.stdout_lines }}"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.2
      - gpgcheck
      - one
      - remedy
      - all

  - name: 1.3.1 - Fetching the aide value from ansible facts
    shell: echo "{{ ansible_local.aide_131_audit }}" 
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.1 - Installing AIDE
    yum:
      name: aide
      state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.1 - Initialize AIDE
    command: '{{ item }}'
    with_items:
      - aide --init
      - mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.1
      - aide
      - one
      - remedy
      - all

  - name: 1.3.2 - Fetching the fsintegrity value from ansible facts
    shell: echo "{{ ansible_local.fsintegrity_132_audit }}" 
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - 1.3.2
      - fsintegrity
      - one
      - remedy
      - all

  - name: 1.3.2 - Adding crontab
    cron:
      name: Run Aide integrity check daily
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "usr/sbin/aide --check"
    when: fsintegrity.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.3.2
      - fsintegrity
      - one
      - remedy
      - all

  - name: 1.4.1 - Fetching the bootloadperm value from ansible facts
    shell: echo "{{ ansible_local.bootloadperm_141_audit }}" 
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - 1.4.1
      - bootloadperm
      - one
      - remedy
      - all

  - name: 1.4.1 - Setting permissions on grub configuration
    shell: '{{ item }}'
    with_items:
      - '[ -f /boot/efi/EFI/*/grub.conf ] && chown root:root /boot/efi/EFI/*/grub.conf || chown root:root /boot/grub/grub.conf'
      - '[ -f /boot/efi/EFI/*/grub.conf ] && chmod og-rwx /boot/efi/EFI/*/grub.conf || chmod og-rwx /boot/grub/grub.conf'
    failed_when: no
    when:  bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.1
      - bootloadperm
      - one
      - remedy
      - all

  - name: 1.4.2 - Fetching the bootloadpass value from ansible facts
    shell: echo "{{ ansible_local.bootloadpass_142_audit }}" 
    register: bootloadpass
    ignore_errors: True
    become: yes
    tags:
      - bootloadpass
      - 1.4.2
      - one
      - remedy
      - all

  - name: 1.4.2 - Setting bootload password
    shell: echo -e "{{ bootloader_password_centos6 }}\n{{ bootloader_password_centos6 }}" | grub-md5-crypt
    register: grub_pass
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - bootloadpass
      - one
      - remedy
      - all

  - name: 1.4.2 - Adding an encrypted password into grub
    lineinfile:
      path: /boot/grub/grub.conf
      regexp: '^password'
      line: "password --md5 {{ grub_pass.stdout_lines[2] }}"
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.4.2
      - one
      - remedy
      - all

  - name: 1.4.3 - Ensure authentication required for single user mode
    shell: echo "{{ ansible_local.singleusermode_143_audit }}" 
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
     - singleusermode
     - 1.4.3
     - one
     - remedy
     - all
  
  - name: 1.4.3 - Ensure authentication required for single user mode
    lineinfile:
      dest: /etc/sysconfig/init
      regexp: '^(SINGLE=)'
      line: 'SINGLE=/sbin/sulogin'
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
     - singleusermode
     - 1.4.3
     - one
     - remedy
     - all

  - name: 1.4.4 - Fetching the interactiveboot value from ansible facts 
    shell: echo "{{ ansible_local.interactiveboot_144_audit }}" 
    register: interactiveboot
    ignore_errors: True
    become: yes
    tags:
     - interactiveboot
     - 1.4.4
     - one
     - remedy
     - all
  
  - name: 1.4.4 - interactive boot is set to no
    shell: sed -i 's/^PROMPT=.*/PROMPT=no/g' /etc/sysconfig/init
    when: interactiveboot.stdout.find("FAILED") != -1
    become: yes
    tags:
     - interactiveboot
     - 1.4.4
     - one
     - remedy
     - all
     
  - name: 1.5.1 - Fetching the coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_151_audit }}" 
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - 'Adding hard core 0' on /etc/security/limits.conf
    lineinfile:
      state: present
      dest: /etc/security/limits.conf
      line: '* hard core 0'
      insertbefore: '^# End of file'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - Set 'fs.suid_dumpable=0' at /etc/sysctl.conf
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "^(fs.suid_dumpable*|#fs.suid_dumpable*)"
      line: 'fs.suid_dumpable=0'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.1 - Reload fs.suid_dumpable
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
    ignore_errors: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - coredumps
      - one
      - remedy
      - all

  - name: 1.5.2 - Fetching the xdnx value from ansible facts
    shell: echo "{{ ansible_local.xdnx_152_audit }}" 
    register: xdnx
    ignore_errors: True
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - remedy
      - all
 
  - name: 1.5.2 - Grep NX
    shell: (dmesg | grep ' NX' | cut -d' ' -f10 | wc -l)
    failed_when: no
    register: xdnx_reg
    when: xdnx.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - remedy
      - all

  - name: 1.5.2 - Install PAE if 32 bit system
    debug: msg="Install kernel with PAE support for 32-bit system"
    when:
      - xdnx.stdout.find("FAILED") != -1
      - xdnx_reg.stdout == "0"
    become: yes
    tags:
      - 1.5.2
      - xdnx
      - one
      - remedy
      - all

  - name: 1.5.3 - Fetching the aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_153_audit }}" 
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.3 - Set kernel.randomize_va_space=2 at /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      regexp: '^(kernel.randomize_va_space*|#kernel.randomize_va_space*)'
      line: "kernel.randomize_va_space=2"
      state: present
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.3 - commenting out entries
    shell: |
      [ -e /etc/sysctl.d/* ] && sed -ri 's/^\s*kernel\.randomize_va_space\s*=\s*([0-1]|[3-9]|[1-9][0-9]+)/# &/gi' /etc/sysctl.d/*
    failed_when: no
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.3 - Setting the kernel.randomize_va_space to active kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - aslr
      - one
      - remedy
      - all

  - name: 1.5.4 - Fetching the prelink value from ansible facts
    shell: echo "{{ ansible_local.prelink_154_audit }}" 
    register: prelink
    ignore_errors: True
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.5.4 - Restore binaries to normal
    shell: prelink -ua
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.5.4 - Disable prelink
    yum:
      name: prelink
      state: absent
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.4
      - prelink
      - one
      - remedy
      - all

  - name: 1.6.1.1 - Fetching the selinux value from ansible facts
    shell: echo "{{ ansible_local.selinux_1611_audit }}"
    register: selinux
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.1
      - selinux
      - one
      - remedy
      - all

  - name: 1.6.1.1 - Install selinux
    yum:
      name: libselinux
      state: present
    failed_when: no
    when: selinux.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.1
      - selinux
      - one
      - remedy
      - all

  - name: 1.6.1.2 - Fetching the seldisable value from ansible facts
    shell: echo "{{ ansible_local.seldisable_1612_audit }}" 
    register: seldisable
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.2
      - seldisable
      - one
      - remedy
      - all

  - name: 1.6.1.2 - Remove all instances of selinux=0 and enforcing=0 on all kernel lines
    replace:
      dest: /boot/grub/grub.conf
      regexp: '(selinux|enforcing)\s*=\s*0\s*'
      follow: yes
    failed_when: no
    when: seldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.2
      - seldisable
      - one
      - remedy
      - all

  - name: 1.6.1.3 - Fetching the selpolicy value from ansible facts 
    shell: echo "{{ ansible_local.selpolicy_1613_audit }}" 
    register: selpolicy
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.3
      - selpolicy
      - one
      - remedy
      - all

  - name: 1.6.1.3 - SELINUXTYPE is set to targeted
    replace:
      path: /etc/selinux/config
      regexp: '^(SELINUXTYPE=*)'
      replace: 'SELINUXTYPE=targeted'
    when: selpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.3
      - selpolicy
      - one
      - remedy
      - all

  - name: 1.6.1.4 - Fetching the selenfperm value from ansible facts
    shell: echo "{{ ansible_local.selenfperm_1614_audit }}"
    register: selenfperm
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.4
      - selenfperm
      - one
      - remedy
      - all

  - name: 1.6.1.4 - Setting the SELINUX parameter
    replace:
      path: /etc/selinux/config
      regexp: '^(SELINUX=.*)'
      replace: 'SELINUX={{ Selinux_centos6 }}'
    when: selenfperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.4
      - selenfperm
      - one
      - remedy
      - all

  - name: 1.6.1.5 - Fetching the selstate value from ansible facts
    shell: echo "{{ ansible_local.selstate_1615_audit }}"
    register: selstate
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.5
      - selstate
      - one
      - remedy
      - all

  - name: 1.6.1.5 - SELINUX is set to enforcing
    replace:
      path: /etc/selinux/config
      regexp: '^(SELINUX=*)'
      replace: 'SELINUX=enforcing'
    when: selstate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.5
      - selstate
      - one
      - remedy
      - all

  - name: 1.6.1.7 - Fetching the setroubleshoot value from ansible facts
    shell: echo "{{ ansible_local.setroubleshoot_1617_audit }}" 
    register: setroubleshoot
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.4
      - setroubleshoot
      - one
      - remedy
      - all

  - name: 1.6.1.7 - Uninstall setroubleshoot 
    yum:
      name: setroubleshoot
      state: absent
    failed_when: no
    when: setroubleshoot.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.7
      - setroubleshoot
      - one
      - remedy
      - all

  - name: 1.6.1.8 - Fetching the mcs value from ansible facts
    shell: echo "{{ ansible_local.mcs_1618_audit }}" 
    register: mcs
    ignore_errors: True
    become: yes
    tags:
      - 1.6.1.8
      - mcs
      - one
      - remedy
      - all

  - name: 1.6.1.8 - Uninstall mcstrans
    yum:
      name: mcstrans
      state: absent
    failed_when: no
    when: mcs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1.8
      - mcs
      - one
      - remedy
      - all

  - name: 1.7.1 - Fetching the msgday value from ansible facts
    shell: echo "{{ ansible_local.msgday_171_audit }}" 
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1
      - msgday
      - one
      - remedy
      - all

  - name: 1.7.1 - Removing instance
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/motd
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1
      - msgday
      - one
      - remedy
      - all

  - name: 1.7.1 - configuring message of the day
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to centos6"
      create: yes
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1
      - msgday
      - one
      - remedy
      - all

  - name: 1.7.2 - Fetching the locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_172_audit }}" 
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - 1.7.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.2 - configuring local login warning banner
    lineinfile:
      path: /etc/issue
      state: present
      line: "Authorized uses only. All activity may be monitored and reported."
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.2 - Ensure local login warning banner is configured properly
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.2
      - locallogin
      - one
      - remedy
      - all

  - name: 1.7.3 - Fetching the remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_173_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - 1.7.3
      - remotelogin
      - one
      - remedy
      - all

  - name: 1.7.3 - configuring remote login warning banner
    lineinfile:
      path: /etc/issue.net
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.3
      - remotelogin
      - one
      - remedy
      - all
  
  - name: 1.7.3 - Ensure remote login warning banner is configured properly
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue.net
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.3
      - remotelogin
      - one
      - remedy
      - all  

  - name: 1.7.4 - Fetching the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_174_audit }}" 
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.4
      - motdperm
      - one
      - remedy
      - all

  - name: 1.7.4 - Setting  permission to /etc/motd
    file:
      dest: /etc/motd
      state: file
      owner: root
      group: root
      mode: 0644
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.4
      - motdperm
      - one
      - remedy
      - all

  - name: 1.7.5 - Fetching the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_175_audit }}" 
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.5
      - issueperm
      - one
      - remedy
      - all

  - name: 1.7.5 - Set root permission to /etc/issue
    file:
      dest: /etc/issue
      state: file
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.5
      - issueperm
      - one
      - remedy
      - all

  - name: 1.7.6 - Fetching the issuenetperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_176_audit }}" 
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - 1.7.6
      - issuenetperm
      - one
      - remedy
      - all

  - name: 1.7.6 - Set root permission to /etc/issue.net
    file:
      dest: /etc/issue.net
      state: file
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.6
      - issuenetperm
      - one
      - remedy
      - all

  - name: 1.8.1 - Fetching the gdmpack value from ansible facts
    shell: echo "{{ ansible_local.gdmpack_181_audit }}"
    register: gdmpack
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1
      - gdmpack
      - one
      - remedy
      - all

  - name: 1.8.1 - uninstalling gdm
    yum:
      name: gdm
      state: absent
    when: gdmpack.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1
      - gdmpack
      - one
      - remedy
      - all

  - name: 1.8.2 - Fetching the gdmconfig value from ansible facts
    shell: echo "{{ ansible_local.gdmconfig_182_audit }}" 
    register: gdmconfig
    ignore_errors: True
    become: yes
    tags:
      - 1.8.2
      - gdmconfig
      - one
      - remedy
      - all
 
  - name: 1.8.2 - Configure GDM login banner 
    lineinfile:
      path: "{{ item.path }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
      create: yes
    with_items:
      - { path: '/etc/dconf/profile/gdm', regexp: 'user-db', line: 'user-db:user' }
      - { path: '/etc/dconf/profile/gdm', regexp: 'system-db', line: 'system-db:gdm' }
      - { path: '/etc/dconf/profile/gdm', regexp: 'file-db', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults' }
      - { path: '/etc/dconf/db/gdm.d/01-banner-message', regexp: '[org/gnome/login-screen]', line: '[org/gnome/login-screen]' }
      - { path: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-enable', line: 'banner-message-enable=true' }
      - { path: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-text', line: "banner-message-text='Authorized uses only. All activity may be monitored and reported.'" }
    when: gdmconfig.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - 1.8.2
      - gdmconfig
      - one
      - remedy
      - all

  - name: 1.8.2 - Update the system databases
    shell: "dconf update"
    failed_when: no
    when: gdmconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.2
      - gdmconfig
      - one
      - remedy
      - all

  - name: 1.8.3 - Fetching the gdmlastlogged value from ansible facts
    shell: echo "{{ ansible_local.gdmlastlogged_183_audit }}"
    register: gdmlastlogged
    ignore_errors: True
    become: yes
    tags:
      - 1.8.3
      - gdmlastlogged
      - one
      - remedy
      - all

  - name: 1.8.3 - last logged in user display is set to disabled
    lineinfile:
      path: "{{ item.path }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
      create: yes
    with_items:
      - { path: '/etc/dconf/profile/gdm', regexp: 'user-db', line: 'user-db:user' }
      - { path: '/etc/dconf/profile/gdm', regexp: 'system-db', line: 'system-db:gdm' }
      - { path: '/etc/dconf/profile/gdm', regexp: 'file-db', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults' }
      - { path: '/etc/dconf/db/gdm.d/00-login-screen', regexp: '[org/gnome/login-screen]', line: '[org/gnome/login-screen]' }
      - { path: '/etc/dconf/db/gdm.d/00-login-screen', regexp: '^(disable-user-list=*)', line: "# Do not show the user list\ndisable-user-list=true" }
    when: gdmlastlogged.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - 1.8.3
      - gdmlastlogged
      - one
      - remedy
      - all

  - name: 1.8.3 - Update the system databases
    shell: "dconf update"
    failed_when: no
    when: gdmlastlogged.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.3
      - gdmlastlogged
      - one
      - remedy
      - all

  - name: 1.8.4 - Fetching the xdcmp value from ansible facts
    shell: echo "{{ ansible_local.xdcmp_184_audit }}"
    register: xdcmp
    ignore_errors: True
    become: yes
    tags:
      - 1.8.4
      - xdcmp
      - one
      - remedy
      - all

  - name: 1.8.4 - removing a line
    lineinfile:
      path: /etc/gdm/custom.conf
      state: absent
      line: Enable=true
    failed_when: no
    when: xdcmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.4
      - xdcmp
      - one
      - remedy
      - all

################################## CHAPTER-2 ###############################################

  - name: 2.1.1 - Fetching the chargen value from ansible facts
    shell: echo "{{ ansible_local.chargen_211_audit }}"  
    register: chargen
    ignore_errors: True
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
      - remedy
      - all

  - name: 2.1.1 - Disabling chargen
    sysvinit:
      name: '{{item}}'
      enabled: no
    with_items:
      - chargen-dgram
      - chargen-stream
    when: chargen.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chargen
      - 2.1.1
      - two
      - remedy
      - all
      
  - name: 2.1.2 - Fetching the daytime value from ansible facts
    shell: echo "{{ ansible_local.daytime_212_audit }}" 
    register: daytime
    ignore_errors: True
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
      - remedy
      - all

  - name: 2.1.2 - Disabling daytime
    sysvinit:
      name: '{{item}}'
      enabled: no
    with_items:
      - daytime-stream
      - daytime-dgram
    when: daytime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - daytime
      - 2.1.2
      - two
      - remedy
      - all
      
  - name: 2.1.3 - Fetching the discard value from ansible facts
    shell: echo "{{ ansible_local.discard_213_audit }}" 
    register: discard
    ignore_errors: True
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
      - remedy
      - all

  - name: 2.1.3 - Disabling discard
    sysvinit:
      name: '{{item}}'
      enabled: no
    with_items:
      - discard-stream
      - discard-dgram
    when: discard.stdout.find("FAILED") != -1
    become: yes
    tags:
      - discard
      - 2.1.3
      - two
      - remedy
      - all

  - name: 2.1.4 - Fetching the echo value from ansible facts
    shell: echo "{{ ansible_local.echo_214_audit }}" 
    register: echo
    ignore_errors: True
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - remedy
      - all

  - name: 2.1.4 - Disable echo-dgram
    sysvinit:
      name: '{{item}}'
      enabled: no
    with_items:
      - echo-dgram
      - echo-stream
    when: echo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - echo
      - 2.1.4
      - two
      - remedy
      - all

  - name: 2.1.5 - Fetching the time value from ansible facts
    shell: echo "{{ ansible_local.time_215_audit }}" 
    register: time
    ignore_errors: True
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - remedy
      - all

  - name: 2.1.5 - Disable time-dgram
    sysvinit:
      name: time-dgram
      enabled: no
    with_items:
      - time-dgram
      - time-stream
    when: time.stdout.find("FAILED") != -1
    become: yes
    tags:
      - time
      - 2.1.5
      - two
      - remedy
      - all

  - name: 2.1.6 - Fetching the rsh value from ansible facts
    shell: echo "{{ ansible_local.rsh_216_audit }}" 
    register: rsh
    ignore_errors: True
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - remedy
      - all

  - name: 2.1.6 - Disable rexec, rlogin, rsh
    sysvinit:
      name: '{{item}}'
      enabled: no
    with_items:
      - rexec
      - rlogin
      - rsh
    when: rsh.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsh
      - 2.1.6
      - two
      - remedy
      - all

  - name: 2.1.7 - Fetching the talk value from ansible facts
    shell: echo "{{ ansible_local.talk_217_audit }}" 
    register: talk
    ignore_errors: True
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - remedy
      - all

  - name: 2.1.7 - Disable talk service
    sysvinit:
      name: talk
      enabled: no
    when: talk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talk
      - 2.1.7
      - two
      - remedy
      - all
      
  - name: 2.1.8 - Fetching the tftp value from ansible facts
    shell: echo "{{ ansible_local.tftp_218_audit }}" 
    register: tftp
    ignore_errors: True
    become: yes
    tags:
      - tftp
      - 2.1.8
      - two
      - remedy
      - all

  - name: 2.1.8 - Disable tftp service
    sysvinit:
      name: tftp
      enabled: no
    when: tftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tftp
      - two
      - remedy
      - all

  - name: 2.1.9 - Fetching the rsync value from ansible facts
    shell: echo "{{ ansible_local.rsync_219_audit }}" 
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - rsync
      - 2.1.9
      - two
      - remedy
      - all

  - name: 2.1.9 - Disable rsync service is not enabled
    sysvinit:
      name: rsync
      enabled: no
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsync
      - 2.1.9
      - two
      - remedy
      - all
      
  - name: 2.1.10 - Fetching the xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_2110_audit }}" 
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - xinetd
      - 2.1.10
      - two
      - remedy
      - all

  - name: 2.1.10 - Disable xinetd
    sysvinit:
      name: xinetd
      enabled: no
    when: xinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xinetd
      - 2.1.10
      - two
      - remedy
      - all
      
  - name: 2.2.1.1 - Fetching the timesync value from ansible facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all

  - name: 2.2.1.1 - Making time synchronization is in use
    yum:
      name: "{{ ntp_chrony_centos6 }}"
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Fetching the chrony value from ansible facts
    shell: echo "{{ ansible_local.chrony_2212_audit }}" 
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - chrony
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Creating chrony configuration file
    lineinfile:
      path: /etc/chrony.conf
      state: present
      line: server {{ remote_server_chrony_centos6 }}
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Set OPTIONS="-u chrony" at /etc/sysconfig/chronyd
    lineinfile:
      path: /etc/sysconfig/chronyd
      state: present
      regexp: "^(OPTIONS=*)"
      line: 'OPTIONS="-u chrony"'
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.3 - Fetching the ntp value from ansible facts
    shell: echo "{{ ansible_local.ntp_2213_audit }}"
    register: ntp
    ignore_errors: True
    become: yes
    tags:
      - ntp
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - Creating ntp configuration file
    lineinfile:
      path: /etc/ntp.conf
      state: present
      line: "{{item}}"
    with_items:
      - "restrict -4 default kod nomodify notrap nopeer noquery"
      - "restrict -6 default kod nomodify notrap nopeer noquery"
      - "server {{ remote_server_ntp_centos6 }}"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - Set OPTIONS="-u ntp:ntp at /etc/sysconfig/ntpd
    lineinfile:
      path: /etc/sysconfig/ntpd
      state: present
      regexp: "OPTIONS=*"
      line: OPTIONS="-u ntp:ntp"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.2 - Fetching the xorg value from ansible facts
    shell: echo "{{ ansible_local.xorg_222_audit }}" 
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all

  - name: 2.2.2 - Uninstall xorg-x11
    yum:
      name: "xorg-x11*"
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all

  - name: 2.2.3 - Fetching the avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_223_audit }}" 
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all

  - name: 2.2.3 - uninstalling avahi
    yum:
      name: avahi
      state: absent
    when: avahi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all

  - name: 2.2.4 - Fetching the cups value from ansible facts
    shell: echo "{{ ansible_local.cups_224_audit }}" 
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all

  - name: 2.2.4 - uninstalling cups
    yum:
      name: cups
      state: absent
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all

  - name: 2.2.5 - Fetching the dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_225_audit }}" 
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.5 - uninstalling dhcpd
    yum:
      name: dhcpd
      state: absent
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.6 - Fetching the ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_226_audit }}" 
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all

  - name: 2.2.6 - uninstalling ldap
    yum:
      name: openldap-servers
      state: absent
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all

  - name: 2.2.7 - Fetching the dns value from ansible facts
    shell: echo "{{ ansible_local.dns_227_audit }}" 
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - dns
      - 2.2.7
      - two
      - remedy
      - all

  - name: 2.2.7 - uninstalling bind
    yum:
      name: bind
      state: absent
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dns
      - 2.2.7
      - two
      - remedy
      - all

  - name: 2.2.8 - Fetching the ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_228_audit }}"
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - ftp
      - 2.2.8
      - two
      - remedy
      - all

  - name: 2.2.8 - uninstalling vsftpd
    yum:
      name: vsftpd
      state: absent
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ftp
      - 2.2.8
      - two
      - remedy
      - all

  - name: 2.2.9 - Fetching the http value from ansible facts
    shell: echo "{{ ansible_local.http_229_audit }}" 
    register: http
    ignore_errors: True
    become: yes
    tags:
      - http
      - 2.2.9
      - two
      - remedy
      - all

  - name: 2.2.9 - Uninstalling http
    yum:
      name: httpd
      state: absent
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - http
      - 2.2.9
      - two
      - remedy
      - all

  - name: 2.2.10 - Fetching the imap value from ansible facts
    shell: echo "{{ ansible_local.imap_2210_audit }}" 
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - imap
      - 2.2.10
      - two
      - remedy
      - all

  - name: 2.2.10 - uninstalling dovecot
    yum:
      name: dovecot
      state: absent
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.10
      - two
      - remedy
      - all

  - name: 2.2.11 - Fetching the samba value from ansible facts
    shell: echo "{{ ansible_local.samba_2211_audit }}" 
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - samba
      - 2.2.11
      - two
      - remedy
      - all

  - name: 2.2.11 - uninstalling Samba
    yum:
      name: samba
      state: absent
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - samba
      - 2.2.11
      - two
      - remedy
      - all

  - name: 2.2.12 - Fetching the proxy value from ansible facts
    shell: echo "{{ ansible_local.proxy_2212_audit }}" 
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - proxy
      - 2.2.12
      - two
      - remedy
      - all

  - name: 2.2.12 - uninstalling squid
    yum:
      name: squid
      state: absent
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - proxy
      - 2.2.12
      - two
      - remedy
      - all

  - name: 2.2.13 - Fetching the snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_2213_audit }}" 
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - snmp
      - 2.2.13
      - two
      - remedy
      - all

  - name: 2.2.13 - uninstalling net-snmp
    yum:
      name: net-snmp
      state: absent
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - snmp
      - 2.2.13
      - two
      - remedy
      - all

  - name: 2.2.14 - Fetching the nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2214_audit }}"
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - nis
      - 2.2.14
      - two
      - remedy
      - all

  - name: 2.2.14 - uninstalling ypserv
    yum:
      name: ypserv
      state: absent
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nis
      - 2.2.14
      - two
      - remedy
      - all

  - name: 2.2.15 - Fetching the telnet value from ansible facts
    shell: echo "{{ ansible_local.telnet_2215_audit }}"
    register: telnet
    ignore_errors: True
    become: yes
    tags:
      - telnet
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.15 - uninstalling telnet service
    yum:
      name: telnet-server
      state: absent
    when: telnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnet
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.16 - Fetching the nfs value from ansible facts
    shell: echo "{{ ansible_local.nfs_2216_audit }}"
    register: nfs
    ignore_errors: True
    become: yes
    tags:
      - nfs
      - 2.2.16
      - one
      - remedy
      - all

  - name: 2.2.16 - uninstalling nfs-utils
    yum:
      name: nfs-utils
      state: absent
    become: yes
    tags:
      - nfs
      - 2.2.16
      - one
      - remedy
      - all

  - name: 2.2.17 - Fetching the rpcbind value from ansible facts
    shell: echo "{{ ansible_local.rpcbind_2217_audit }}"
    register: rpc
    ignore_errors: True
    become: yes
    tags:
      - rpcbind
      - 2.2.17
      - one
      - remedy
      - all

  - name: 2.2.17 - uninstalling rpcbind
    yum:
      name: rpcbind
      state: absent
    become: yes
    tags:
      - rpcbind
      - 2.2.17
      - one
      - remedy
      - all

  - name: 2.2.18 - Fetching the mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2218_audit }}"
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - mail
      - 2.2.18
      - two
      - remedy
      - all

  - name: 2.2.18 - Creating mail configuration file 
    lineinfile:
      path: /etc/postfix/main.cf
      state: present
      regexp: "^(inet_interfaces =.*)"
      line: "inet_interfaces = loopback-only"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.18
      - two
      - remedy
      - all

  - name: 2.2.18 - Restart postfix
    service:
      name: postfix
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.18
      - two
      - remedy
      - all

  - name: 2.3.1 - Fetching the nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}" 
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.1 - Disable NIS Client
    yum:
      name: ypbind
      state: absent
    failed_when: no
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.2 - Fetching the rshc value from ansible facts
    shell: echo "{{ ansible_local.rshc_232_audit }}" 
    register: rshc
    ignore_errors: True
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all

  - name: 2.3.2 - Disable RSH Client
    yum:
      name: rsh
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all

  - name: 2.3.3 - Fetching the talkc value from ansible facts
    shell: echo "{{ ansible_local.talkc_233_audit }}" 
    register: talkc
    ignore_errors: True
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.3 - Uninstall talk Client
    yum:
      name: talk
      state: absent
    failed_when: no
    when: talkc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.4 - Fetching the telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_234_audit }}" 
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all

  - name: 2.3.4 - Uninstall telnet Client
    yum:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all

  - name: 2.3.5 - Fetching the ldapc value from ansible facts
    shell: echo "{{ ansible_local.ldapc_235_audit }}" 
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all

  - name: 2.3.5 - Uninstall LDAP client
    yum:
      name: openldap-clients
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all

########################### CHAPTER-3 ##################################

  - name: 3.1.1 - Fetching the ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_311_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - remedy
      - all

  - name: 3.1.1 - Disable IPv6
    command: grubby --update-kernel=ALL --args=ipv6.disable=1
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - remedy
      - all

  - name: 3.1.2 - Fetching the wireless value from ansible facts
    shell: echo "{{ ansible_local.wireless_312_audit }}"
    register: wireless
    ignore_errors: True
    become: yes
    tags:
      - wireless
      - '3.1.2'
      - three
      - remedy
      - all

  - name: 3.1.2 - Installing wireless-tools
    yum:
      name: wireless-tools
      state: present
    failed_when: no
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Ensure wireless interfaces are disabled
    shell: "ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w' | wc -l"
    register: iplink
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - remedy
      - all

  - name: 3.1.2 - Ensure wireless interfaces are disabled
    shell: "wifi=$(ip link show up | cut -d: -f2 | cut -d' ' -f2 | egrep '^ w|^w') && sudo ip link set $wifi down"
    when:
      - wireless.stdout.find("FAILED") != -1
      - iplink.stdout != "0"
    become: yes
    tags:
      - wireless
      - 3.1.2
      - three
      - remedy
      - all
 
  - name: Checking if ipv6 is enabled or disabled before excecuting ipforward, routedpacket, icmp
    shell: |
        if [ $(cat /proc/cmdline | grep ipv6.disable=1 | wc -l) -eq 0 ] && [ $(sysctl net.ipv6.conf.all.disable_ipv6 | grep 1 | wc -l) -eq 0 ]; then
          echo "enabled"
        else
          echo "disabled"
        fi
    register: ip6_en_dis
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - routedpacket
      - 3.3.1
      - three
      - icmp
      - 3.3.2
      - remedy
      - all

  - name: 3.2.1 - Fetching the ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_321_audit }}"
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Adding ipforward  parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.ip_forward*|#net.ipv4.ip_forward*)"
      line: "net.ipv4.ip_forward=0"
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Adding ipforward parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.forwarding*|#net.ipv6.conf.all.forwarding*)"
      line: "net.ipv6.conf.all.forwarding=0"
    failed_when: no
    when:
      - ipforward.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.forwarding
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when:
      - ipforward.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - ipforward
      - 3.2.1
      - three
      - remedy
      - all

  - name: 3.2.2 - Fetching the packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_322_audit }}"
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - remedy
      - all
      
  - name: 3.2.2 - Adding packetredirect parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.send_redirects*|#net.ipv4.conf.all.send_redirects*)"
      line: "net.ipv4.conf.all.send_redirects=0"
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - Adding packetredirect parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.send_redirects*|#net.ipv4.conf.default.send_redirects*)"
      line: "net.ipv4.conf.default.send_redirects=0"
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - remedy
      - all
 
  - name: 3.2.2 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.send_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.send_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.2
      - three
      - remedy
      - all
      
  - name:  3.3.1 - Fetching the routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_331_audit }}"
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.accept_source_route*|#net.ipv4.conf.all.accept_source_route*)"
      line: "net.ipv4.conf.all.accept_source_route=0"
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.accept_source_route*|#net.ipv4.conf.default.accept_source_route*)"
      line: "net.ipv4.conf.default.accept_source_route=0"
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.accept_source_route*|#net.ipv6.conf.all.accept_source_route*)"
      line: "net.ipv6.conf.all.accept_source_route=0"
    failed_when: no
    when:
      - routedpacket.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Adding routedpacket parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.default.accept_source_route*|#net.ipv6.conf.default.accept_source_route*)"
      line: "net.ipv6.conf.default.accept_source_route=0"
    failed_when: no
    when:
      - routedpacket.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all

  - name: 3.3.1 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    when:
      - routedpacket.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all
    
  - name: 3.3.2 - Fetching the icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_332_audit }}"
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.accept_redirects*|#net.ipv4.conf.all.accept_redirects*)"
      line: "net.ipv4.conf.all.accept_redirects=0"
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.accept_redirects*|#net.ipv4.conf.default.accept_redirects*)"
      line: "net.ipv4.conf.default.accept_redirects=0"
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.accept_redirects*|#net.ipv6.conf.all.accept_redirects*)"
      line: "net.ipv6.conf.all.accept_redirects=0"
    failed_when: no
    when:
      - icmp.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Adding icmp parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.default.accept_redirects*|#net.ipv6.conf.default.accept_redirects*)"
      line: "net.ipv6.conf.default.accept_redirects=0"
    failed_when: no
    when:
      - icmp.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.2 - Activating kernel parameter
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when:
      - icmp.stdout.find("FAILED") != -1
      - ip6_en_dis.stdout == "enabled"
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.3 - Fetching the secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_333_audit }}"
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - remedy
      - all
   
  - name: 3.3.3 - Creating secureicmp configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.secure_redirects*"
      line: "net.ipv4.conf.all.secure_redirects=0"
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - remedy
      - all

  - name: 3.3.3 - Creating secureicmp configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.secure_redirects*"
      line: "net.ipv4.conf.default.secure_redirects=0"
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - remedy
      - all

  - name: 3.3.3 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.secure_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.secure_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - remedy
      - all

  - name: 3.3.4 - Fetching the suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_334_audit }}"
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all
   
  - name: 3.3.4 - Adding suspicious parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.all.log_martians*|#net.ipv4.conf.all.log_martians*)"
      line: "net.ipv4.conf.all.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all

  - name: 3.3.4 - Adding suspicious parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.conf.default.log_martians*|#net.ipv4.conf.default.log_martians*)"
      line: "net.ipv4.conf.default.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all

  - name: 3.3.4 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.conf.all.log_martians 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.log_martians
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all

  - name: 3.3.5 - Fetching the broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_335_audit }}"
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all   

  - name: 3.3.5 - Creating broadcasticmp configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_echo_ignore_broadcasts*|#net.ipv4.icmp_echo_ignore_broadcasts*)"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all

  - name: 3.3.5 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all
      
  - name: 3.3.6 - Fetching the bogusicmp value from ansible facts
    shell: echo "{{ ansible_local.bogusicmp_336_audit }}"
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - remedy
      - all
      
  - name: 3.3.6 -  Creating bogusicmp configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.icmp_ignore_bogus_error_responses*|#net.ipv4.icmp_ignore_bogus_error_responses*)"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - remedy
      - all

  - name: 3.3.6 - set the active kernel parameters 
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - remedy
      - all
      
  - name: 3.3.7 - Fetching the reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_337_audit }}"
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all

  - name: 3.3.7 - Creating reversepathfilter configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.rp_filter*" ,line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^net.ipv4.conf.default.rp_filter" ,line: "net.ipv4.conf.default.rp_filter=1"}
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all

  - name: 3.3.7 - set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all 

  - name: 3.3.8 - Fetching the tcpsyncookies value from ansible facts 
    shell: echo "{{ ansible_local.tcpsyncookies_338_audit}}"
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all   

  - name: 3.3.8 - Creating tcpsyncookies configuration file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv4.tcp_syncookies*|#net.ipv4.tcp_syncookies*)"
      line: "net.ipv4.tcp_syncookies=1"
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all

  - name: 3.3.8 - set the active kernel parameters 
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all

  - name: 3.3.9 - Fetching the ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_339_audit }}"
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all   

  - name: 3.3.9 - Adding ipv6router parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.all.accept_ra*|#net.ipv6.conf.all.accept_ra*)"
      line: "net.ipv6.conf.all.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all

  - name: 3.3.9 - Adding ipv6router parameter in /etc/sysctl.conf
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(net.ipv6.conf.default.accept_ra*|#net.ipv6.conf.default.accept_ra*)"
      line: "net.ipv6.conf.default.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all

  - name: 3.3.9 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_ra 
        value: '0'
        sysctl_set: yes    
      - name: net.ipv6.conf.default.accept_ra
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all
 
  - name: 3.4.1 - Fetching the tcpwrappers value from ansible facts
    shell: echo "{{ ansible_local.tcpwrappers_341_audit }}"
    register: tcpwrappers
    ignore_errors: True
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - remedy
      - all   
      
  - name: 3.4.1 - Install TCP Wrappers
    yum: name=tcp_wrappers state=present
    failed_when: no
    when: tcpwrappers.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - tcpwrappers
      - 3.4.1
      - three
      - remedy
      - all

  - name: 3.4.2 - Fetching the hostsallow value from ansible facts 
    shell: echo "{{ ansible_local.hostsallow_342_audit }}"
    register: hostsallow
    ignore_errors: True
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - remedy
      - all 

  - name: 3.4.2 - Allowing certain ip's in  hostsallow configuration file
    lineinfile:
      path: /etc/hosts.allow 
      state: present
      line: "{{ hosts_allow_centos6 }}" 
    failed_when: no
    when: hostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsallow
      - 3.4.2
      - three
      - remedy
      - all
      
  - name: 3.4.3 - Fetching the hostsdeny value from ansible facts 
    shell: echo "{{ ansible_local.hostsdeny_343_audit }}"
    register: hostsdeny
    ignore_errors: True
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - remedy
      - all     
      
  - name: 3.4.3 - Disallowing certain ip's in  hostsallow configuration file
    lineinfile:
      path: /etc/hosts.deny
      state: present
      line: "{{ hosts_deny_centos6 }}"
    failed_when: no
    when: hostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hostsdeny
      - 3.4.3
      - three
      - remedy
      - all
      
  - name: 3.4.4 - Fetching the permhostsallow value from ansible facts
    shell: echo "{{ ansible_local.permhostsallow_344_audit }}"
    register: permhostsallow
    ignore_errors: True
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - remedy
      - all
      
  - name: 3.4.4 - set root permissions on /etc/hosts.allow
    file:
      path: /etc/hosts.allow
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permhostsallow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsallow
      - 3.4.4
      - three
      - remedy
      - all 

  - name: 3.4.5 - Fetching the permhostsdeny value from ansible facts
    shell: echo "{{ ansible_local.permhostsdeny_345_audit }}"
    register: permhostsdeny
    ignore_errors: True
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - remedy
      - all
      
  - name: 3.4.5 - set root permissions on /etc/hosts.deny
    file:
      path: /etc/hosts.deny
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permhostsdeny.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permhostsdeny
      - 3.4.5
      - three
      - remedy
      - all 

  - name: 3.5.1 - Fetching the dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_351_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - remedy
      - all      
      
  - name: 3.5.1 -  Creating dccp configuration file
    lineinfile:
      path: /etc/modprobe.d/dccp.conf
      state: present
      line: "install dccp /bin/true"
      create: yes
    failed_when: no
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.5.1
      - three
      - remedy
      - all

  - name: 3.5.2 - Fetching the sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_352_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - remedy
      - all   

  - name: 3.5.2 -  Creating sctp configuration file
    lineinfile:
      path: /etc/modprobe.d/sctp.conf
      state: present
      line: "install sctp /bin/true"
      create: yes
    failed_when: no
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.5.2
      - three
      - remedy
      - all

  - name: 3.5.3 - Fetching the rds value from ansible facts
    shell: echo "{{ ansible_local.rds_353_audit }}"
    register: rds
    ignore_errors: True
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - remedy
      - all  

  - name: 3.5.3 -  Creating RDS configuration file
    lineinfile:
      path: /etc/modprobe.d/rds.conf
      state: present
      line: "install rds /bin/true"
      create: yes
    failed_when: no
    when: rds.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rds
      - 3.5.3
      - three
      - remedy
      - all

  - name: 3.5.4 - Fetching the tipc value from ansible facts
    shell: echo "{{ ansible_local.tipc_354_audit }}"
    register: tipc
    ignore_errors: True
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - remedy
      - all 

  - name: 3.5.4 -  Creating TIPC configuration file
    lineinfile:
      path: /etc/modprobe.d/tipc.conf
      state: present
      line: "install tipc /bin/true"
      create: yes
    failed_when: no
    when: tipc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tipc
      - 3.5.4
      - three
      - remedy
      - all
   
  - name: 3.6.1.1 - Fetching the iptables value from ansible facts
    shell: echo "{{ ansible_local.iptables_3611_audit }}"
    register: iptables
    ignore_errors: True
    become: yes
    tags:
      - iptables
      - 3.6.1.1
      - three
      - remedy
      - all   
      
  - name: 3.6.1.1 - Install iptables
    yum: name=iptables state=present
    when: iptables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptables
      - 3.6.1.1
      - three
      - remedy
      - all   

  - name: 3.6.2.2 - Fetching the loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.loopbacktraffic_3622_audit }}"
    register: loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.2.2
      - three
      - remedy
      - all

  - name: 3.6.2.2 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT
      - iptables -A OUTPUT -o lo -j ACCEPT
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktraffic
      - 3.6.2.2
      - three
      - remedy
      - all

  - name: 3.6.2.3 - Fetching the outbound value from ansible facts
    shell: echo "{{ ansible_local.outbound_3623_audit }}"
    register: outbound
    ignore_errors: True
    become: yes
    tags:
      - outbound
      - 3.6.2.3
      - three
      - remedy
      - all

  - name: 3.6.2.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.6.2.3
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outbound.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.6.2.3
      - three
      - remedy
      - all

  - name: 3.6.2.4 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_3624_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.6.2.4
      - three
      - remedy
      - all

  - name: 3.6.2.4 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.2.4
      - three
      - remedy
      - all

  - name: 3.6.2.4 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.2.4
      - three
      - remedy
      - all

  - name: 3.6.2.4 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_centos6.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.6.2.4
      - three
      - remedy
      - all

  - name: 3.6.2.1 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_3621_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.2.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.2.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.2.1 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.2.1 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_centos6.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.2.1 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.6.2.1
      - three
      - remedy
      - all

  - name: 3.6.3.2 - Fetching the ipv6loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.ipv6loopbacktraffic_3632_audit }}"
    register: ipv6loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.6.3.2
      - three
      - remedy
      - all

  - name: 3.6.3.2 - Implementing the loopback rules
    command: "{{item}}"
    with_items:
      - ip6tables -A INPUT -i lo -j ACCEPT
      - ip6tables -A OUTPUT -o lo -j ACCEPT
      - ip6tables -A INPUT -s ::1 -j DROP
    failed_when: no
    when: ipv6loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.6.3.2
      - three
      - remedy
      - all

  - name: 3.6.3.3 - Fetching the ipv6outbound value from ansible facts
    shell: echo "{{ ansible_local.ipv6outbound_3633_audit }}"
    register: ipv6outbound
    ignore_errors: True
    become: yes
    tags:
      - ipv6outbound
      - 3.6.3.3
      - three
      - remedy
      - all

  - name: 3.6.3.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_outbound
    failed_when: no
    when: ipv6outbound.stdout.find("FAILED") != -1
    tags:
      - ipv6outbound
      - 3.6.3.3
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6outbound.stdout.find("FAILED") != -1
      - ip6tables_outbound.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6outbound
      - 3.6.3.3
      - three
      - remedy
      - all

  - name: 3.6.3.4 - Fetching the ipv6firewallrules value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallrules_3634_audit }}"
    register: ipv6firewallrules
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallrules
      - 3.6.3.4
      - three
      - remedy
      - all

  - name: 3.6.3.4 - Creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.6.3.4
      - three
      - remedy
      - all

  - name: 3.6.3.4 - saving the rules
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_fir_rules
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.6.3.4
      - three
      - remedy
      - all

  - name: 3.6.3.4 - Adding the ipv6 firewallrules
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv6_centos6.split(',') }}"
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.6.3.4
      - three
      - remedy
      - all

  - name: 3.6.3.1 - Fetching the ipv6firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallpolicy_3631_audit }}"
    register: ipv6firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - name: 3.6.3.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_ipv6fir
    failed_when: no
    when: ipv6firewallpolicy.stdout.find("FAILED") != -1
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - name: 3.6.3.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - name: 3.6.3.1 - saving the ip6tables
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_rules
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - name: 3.6.3.1 - adding the necessary ports to ip6tables before droping the policy
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv6_centos6.split(',') }}"
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

  - name: 3.6.3.1 - Implementing a default DROP policy
    command: "{{item}}"
    with_items:
      - ip6tables -P INPUT DROP
      - ip6tables -P OUTPUT DROP
      - ip6tables -P FORWARD DROP
    failed_when: no
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.6.3.1
      - three
      - remedy
      - all

###################### CHAPTER-4 ####################################

  - name: 4.1.1.1 - Fetching the auditd value from ansible facts
    shell: echo "{{ ansible_local.auditd_4111_audit }}"
    register: auditd
    ignore_errors: True
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - remedy
      - all

  - name: 4.1.1.1 - Installing auditd
    yum:
      name: '{{ item }}'
      state: present
    with_items:
      - "audit"
      - "audit-libs"
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - remedy
      - all

  - name: 4.1.1.2 - Fetching the augenrules value from ansible facts
    shell: echo "{{ ansible_local.augenrules_4112_audit }}"
    register: augenrules
    ignore_errors: True
    become: yes
    tags:
      - augenrules
      - 4.1.1.2
      - four
      - remedy
      - all

  - name: 4.1.1.2 - Setting augenrules to no
    replace:
      path: /etc/sysconfig/auditd
      regexp: 'USE_AUGENRULES="no"'
      replace: 'USE_AUGENRULES="yes"'
    when: augenrules.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - augenrules
      - 4.1.1.2
      - four
      - remedy
      - all

  - name: 4.1.1.3 - Fetching the auditdservice value from ansible facts
    shell: echo "{{ ansible_local.auditdservice_4113_audit }}"
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.1.3
      - four
      - remedy
      - all

  - name: 4.1.1.3 - Ensure auditd service is enabled
    service:
      name: auditd
      enabled: yes
    when: auditdservice.stdout.find("FAILED") != -1
    ignore_errors: yes
    become: yes
    tags:
      - auditdservice
      - 4.1.1.3
      - four
      - remedy
      - all  

  - name: 4.1.1.4 - Fetching the auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_4114_audit }}"
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.1.4
      - four
      - remedy
      - all

  - name: 4.1.1.4 - Including audit=1 on all kernel lines
    command: grubby --update-kernel=ALL --args=audit=1
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.1.4
      - four
      - remedy
      - all
 
  - name: 4.1.2.1 - Fetching the auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4121_audit }}"
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - remedy
      - all

  - name: 4.1.2.1 - Adding audit log storage size parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*|#max_log_file =*)"
      line: "max_log_file = {{ audit_log_size_centos6 }}"
    failed_when: no
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - remedy
      - all
 
  - name: 4.1.2.2 - Fetching the auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4122_audit }}"
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - remedy
      - all

  - name: 4.1.2.2 - Adding audit log delete parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file_action =*|#max_log_file_action =*)"
      line: 'max_log_file_action = keep_logs'
    failed_when: no
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - remedy
      - all

  - name: 4.1.2.3 - Fetch the sysdisable value from ansible facts
    shell: echo "{{ ansible_local.sysdisable_4123_audit }}"
    register: sysdisable
    ignore_errors: True
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all

  - name: 4.1.2.3 - Adding space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(space_left_action =*|#space_left_action =*)"
      line: 'space_left_action = email'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all

  - name: 4.1.2.3 - Adding action mail acct parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(action_mail_acct =*|#action_mail_acct =*)"
      line: 'action_mail_acct = root'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all
 
  - name: 4.1.2.3 - Adding admin space left action parameter
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(admin_space_left_action =*|#admin_space_left_action =*)"
      line: 'admin_space_left_action = halt'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all

  - name: 4.1.2.4 - Fetching the auditdbacklog value from ansible facts
    shell: echo "{{ ansible_local.auditdbacklog_4124_audit }}"
    register: auditdbacklog
    ignore_errors: True
    become: yes
    tags:
      - auditdbacklog
      - 4.1.2.4
      - four
      - remedy
      - all

  - name: 4.1.2.4 - Including audit_backlog_limit=8192 on all kernel lines
    command: grubby --update-kernel=ALL --args=audit_backlog_limit=8192
    failed_when: no
    become: yes
    tags:
      - auditdbacklog
      - 4.1.2.4
      - four
      - remedy
      - all
 
  - name: 4.1.3 - Fetching the moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_413_audit }}"
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.3 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when:
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.3 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when:
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.4 - Fetching the modusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_414_audit }}"
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.4 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/identity.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/group -p wa -k identity"
      - "-w /etc/passwd -p wa -k identity"
      - "-w /etc/gshadow -p wa -k identity"
      - "-w /etc/shadow -p wa -k identity"
      - "-w /etc/security/opasswd -p wa -k identity"
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.5 - Fetching the modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_415_audit }}"
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/system_local.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
    when:
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/system_local.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/network -p wa -k system-locale"
    when:
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all
 
  - name: 4.1.6 - Fetching the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_416_audit }}"
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.6 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/MAC_policy.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/selinux/ -p wa -k MAC-policy"
      - "-w /usr/share/selinux/ -p wa -k MAC-policy"
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.7 - Fetching the loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_417_audit }}"
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.7 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/logins.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/log/lastlog -p wa -k logins"
      - "-w /var/run/faillog -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - remedy
      - all

  - name:  4.1.8 - Fetching the session value from ansible facts
    shell: echo "{{ ansible_local.session_418_audit }}"
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - remedy
      - all

  - name: 4.1.8 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/session.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/run/utmp -p wa -k session"
      - "-w /var/log/wtmp -p wa -k logins"
      - "-w /var/log/btmp -p wa -k logins"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - remedy
      - all
  
  - name: 4.1.9 - Fetching the dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_419_audit }}"
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.9 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295"
      - "-k perm_mod"
    when:
     - dacperm.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.9 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
    when:
      - dacperm.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.10 - Fetching the fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_4110_audit }}"
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all

  - name: 4.1.10 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all

  - name: 4.1.10 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all
 
  - name: 4.1.11 - Fetching the privilegecmd value from ansible facts
    shell: echo "{{ ansible_local.privilegecmd_4111_audit }}"
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - remedy
      - all

  - name: 4.1.11 - Editing or creating a file in the /etc/audit/rules.d/ directory
    shell: find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>='"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/privileged.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - remedy
      - all
  
  - name:  4.1.12 - Fetching the fsmount value from ansible facts
    shell: echo "{{ ansible_local.fsmount_4112_audit }}"
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all

  - name: 4.1.12 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      state: present
      line: "-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
      create: yes
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all

  - name: 4.1.12 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
      - "-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all

  - name:  4.1.13 - Fetching the filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4113_audit }}"
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all

  - name: 4.1.13 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      state: present
      line: "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
      create: yes
    when:
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all

  - name: 4.1.13 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete"
    when:
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all
  
  - name: 4.1.14 - Fetching the sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_4114_audit }}"
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.14 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/scope.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/sudoers -p wa -k scope"
      - "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.15 - Fetching the sudolog value from ansible facts
    shell: echo "{{ ansible_local.sudolog_4115_audit }}"
    register: sudolog
    ignore_errors: True
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.15 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/actions.rules
      state: present
      line: "-a always,exit -F arch=b32 -C euid!=uid -F euid=0 -F auid>=500 -F auid!=4294967295 -S execve -k actions"
      create: yes
    when:
      - sudolog.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.15 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/actions.rules
      state: present
      line: '{{item}}'
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -C euid!=uid -F euid=0 -F auid>=500 -F auid!=4294967295 -S execve -k actions"
      - "-a always,exit -F arch=b32 -C euid!=uid -F euid=0 -F auid>=500 -F auid!=4294967295 -S execve -k actions"
    when:
      - sudolog.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.16 - Fetching the kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4116_audit }}"
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all

  - name: 4.1.16 - Editing or creating a file in the /etc/audit/rules.d/ directory for 32 bit systems
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when:
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all

  - name: 4.1.16 - Editing or creating a file in the /etc/audit/rules.d/ directory for 64 bit systems
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when:
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all
 
  - name:  4.1.17 - Fetching the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4117_audit }}"
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - remedy
      - all

  - name: 4.1.17 - Editing or creating a file in the /etc/audit/rules.d/ directory
    lineinfile:
      path:  /etc/audit/rules.d/99-finalize.rules
      state: present
      line: "-e 2"
      create: yes
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - remedy
      - all
 
  - name: 4.2.1.1 - Fetching the rsyslog value from ansible facts
    shell: echo "{{ ansible_local.rsyslog_4211_audit }}"
    register: rsyslog
    ignore_errors: True
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - remedy
      - all

  - name: 4.2.1.1 - Installing rsyslog
    yum:
      name: rsyslog
      state: present
    failed_when: no
    when: rsyslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - remedy
      - all

  - name: 4.2.1.2 - Fetching the rsyslogenb value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4212_audit }}"
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - remedy
      - all

  - name: 4.2.1.2 - Enabling rsyslog
    service:
      name: rsyslog
      enabled: yes
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - remedy
      - all

  - name: 4.2.1.3 - Fetching the rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4213_audit }}" 
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all
  
  - name: 4.2.1.3 - Creating rloggingconf configuration file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all

  - name: 4.2.1.3 - Restart rsyslog 
    command: "pkill -HUP rsyslogd"
    failed_when: no
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all
  
  - name: 4.2.1.4 - Fetching the rsyslogperm value from ansible facts 
    shell: echo "{{ ansible_local.rsyslogperm_4214_audit }}" 
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - remedy
      - all
 
  - name: 4.2.1.4 - Creating rsyslogperm configuration file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "$FileCreateMode 0640"
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - remedy
      - all

  - name: 4.2.1.4 - configuring rsyslogperm file
    command: find /etc/rsyslog.d/ -name "*.conf"
    register: rsyslogperm_result
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - configuring rsyslogperm file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "$FileCreateMode 0640"
    loop: '{{ rsyslogperm_result.stdout_lines }}'
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Fetching the rsyslogsendlogs value from ansible facts
    shell: echo "{{ ansible_local.rsyslogsendlogs_4215_audit }}"
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    register: rsyslogsendlogs_result
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "*.* @@loghost.example.com"
    loop: '{{ rsyslogsendlogs_result.stdout_lines }}'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    command: 'pkill -HUP rsyslogd'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name:  4.2.1.6 - Fetching the remotesyslogmsg value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogmsg_4216_audit }}"
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - Adding line to /etc/rsyslog.conf
    lineinfile:
      path: '/etc/rsyslog.conf'
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "#$ModLoad imtcp", line: "$ModLoad imtcp" }
      - { regexp: "#$InputTCPServerRun 514",line: "$InputTCPServerRun 514" }
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - listing file in /etc/rsyslog.d/
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    register: remotesyslogmsg_result
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - configuring remotesyslogmsg files
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - configuring remotesyslogmsg files
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - Reloading rsyslog
    shell: 'pkill -HUP rsyslogd'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.2 - Fetching the permlogfiles value from ansible facts 
    shell: echo "{{ ansible_local.permlogfiles_422_audit }}" 
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.2
      - four
      - remedy
      - all
  
  - name: 4.2.2 - Set permissions on all existing log files
    shell: "find /var/log -type f -exec chmod g-wx,o-rwx {} +"
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.2
      - four
      - remedy
      - all

  - name: 4.2.3 - Fetching the logrotate value from ansible facts
    shell: echo "{{ ansible_local.logrotate_423_audit }}" 
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - '4.2.3'
      - four
      - remedy
      - all
 
  - name: 4.2.3 - configuring logrotate file
    lineinfile:
      path: '/etc/logrotate.conf'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    failed_when: no
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.2.3'
      - four
      - all
      - remedy

  - name: 4.2.3 - configuring logrotate file
    shell: find /etc/logrotate.d/* -name "*"
    failed_when: no
    register: logrotate_result
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.2.3'
      - four
      - all
      - remedy

  - name: 4.2.3 - configuring logrotate file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "\n# Specifies the number of days after which old log files should be removed\nmaxage 90\n"
    loop: '{{ logrotate_result.stdout_lines }}'
    when: logrotate.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - logrotate
      - '4.2.3'
      - four
      - remedy
      - all  

######################## CHAPTER-5 ############################

  - name: 5.1.1 - Fetching the cron value from ansible facts 
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all
      
  - name: 5.1.1 - Enable cron daemon 
    service:
      name: crond
      enabled: yes
    failed_when: no
    when: cron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all
      
  - name: 5.1.2 - Fetching the permcrontab value from ansible facts
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all    
 
  - name: 5.1.2 - Set root permission to /etc/crontab
    file:
      path: "/etc/crontab"
      mode: 0600
      owner: root
      group: root
    when: permcrontab.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all
      
  - name: 5.1.3 - Fetching the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all    

  - name: 5.1.3 - Set root permission to /etc/cron.hourly
    file:
      path: "/etc/cron.hourly"
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all
      
  - name: 5.1.4 Fetching the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all
      
  - name: 5.1.4 Set root permission to /etc/cron.daily
    file:
      path: "/etc/cron.daily"
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all

  - name: 5.1.5 - Fetching the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all
      
  - name: 5.1.5 - Set root permission to /etc/cron.weekly
    file:
      path: "/etc/cron.weekly"
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all
      
  - name: 5.1.6 - Fetching the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all
      
  - name: 5.1.6 - Set root permission to /etc/cron.monthly
    file:
      path: "/etc/cron.monthly"
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all
      
  - name: 5.1.7 Fetching the permcrond value from ansible facts
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all
      
  - name: 5.1.7 Set root permission to /etc/cron.d
    file:
      path: "/etc/cron.d"
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all
      
  - name: 5.1.8 - Fetching the cronuser value from ansible facts
    shell: echo "{{ ansible_local.cronuser_518_audit }}"
    register: cronuser
    ignore_errors: True
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Creating a directory
    file:
      path: /etc/ansible/backup/cronuser
      state: directory
      mode: '0750'
      recurse: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Backing up cron.deny
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/cronuser/cron_deny_{{ansible_hostname}}
      remote_src: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all
      
  - name: 5.1.8 - Removing /etc/cron.deny file
    file:
      path: "/etc/cron.deny"
      state: absent
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Creating /etc/cron.allow file
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name:  5.1.9 - Fetching the atcron value from ansible facts
    shell: echo "{{ ansible_local.atcron_519_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Creating directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0750'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Backing up at.deny
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Removing /etc/at.deny file
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Creating /etc/at.allow file
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.2.1 - Fetching the sudo value from ansible facts
    shell: echo "{{ ansible_local.sudo_521_audit }}"
    register: sudo
    ignore_errors: True
    become: yes
    tags:
      - sudo
      - 5.2.1
      - five
      - remedy
      - all

  - name: 5.2.1 - installing sudo
    yum:
      name: sudo
      state: present
    when: sudo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudo
      - 5.2.1
      - five
      - remedy
      - all

  - name: 5.2.2 - Fetching the sudopty value from ansible facts
    shell: echo "{{ ansible_local.sudopty_522_audit }}"
    register: sudopty
    ignore_errors: True
    become: yes
    tags:
      - sudopty
      - 5.2.2
      - five
      - remedy
      - all

  - name: 5.2.2 - Adding a line in /etc/sudoers
    lineinfile:
      path: /etc/sudoers
      state: present
      line: "Defaults use_pty"
    when: sudopty.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudopty
      - 5.2.2
      - five
      - remedy
      - all

  - name: 5.2.3 - Fetching the sudologfiles value from ansible facts
    shell: echo "{{ ansible_local.sudologfiles_523_audit }}"
    register: sudologfiles
    ignore_errors: True
    become: yes
    tags:
      - sudologfiles
      - 5.2.3
      - five
      - remedy
      - all

  - name: 5.2.3 - Adding a line in /etc/sudoers
    lineinfile:
      path: /etc/sudoers
      state: present
      line: 'Defaults logfile="/var/log/sudo.log"'
    failed_when: no
    when: sudologfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudologfiles
      - 5.2.3
      - five
      - remedy
      - all

  - name: 5.3.1 - Fetching the sshdperm value from ansible facts
    shell: echo "{{ ansible_local.sshdperm_531_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - Set root permission to /etc/ssh/sshd_config
    file:
      path: "/etc/ssh/sshd_config"
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdperm
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.2 - Fetching the sshpermpvtkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpvtkey_532_audit }}"
    register: sshpermpvtkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpvtkey
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - Setting permissions to SSH private host key files
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:ssh_keys {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod u-x,g-wx,o-rwx {} \;
    failed_when: no
    when: sshpermpvtkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpvtkey
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.3 - Fetching the sshpermpubkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpubkey_533_audit }}"
    register: sshpermpubkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpubkey
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - Setting permissions to SSH public host key files
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod u-x,go-wx {} \;
    failed_when: no
    when: sshpermpubkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpubkey
      - 5.3.3
      - five
      - remedy
      - all
      
  - name: 5.3.4 - Fetching the sshprotocol value from ansible facts
    shell: echo "{{ ansible_local.sshprotocol_534_audit }}"
    register: sshprotocol
    ignore_errors: True
    become: yes
    tags:
      - sshprotocol
      - 5.3.4
      - five
      - remedy
      - all
      
  - name: 5.3.4 - Creating sshprotocol configuration file 
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "Protocol*"
      line: Protocol 2
    when: sshprotocol.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - sshprotocol
      - 5.3.4
      - five
      - remedy
      - all

  - name: 5.3.5 - Fetching the sshaccess value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_535_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.3.5
      - five
      - remedy
      - all

  - name: 5.3.5 - Creating sshaccess configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "{{item}}"
    with_items:
      - "AllowUsers   {{ allowusers_centos6 }}"
      - "AllowGroups  {{ allowgroups_centos6 }}"
      - "DenyUsers    {{ denyusers_centos6 }}"
      - "DenyGroups   {{ denygroups_centos6 }}"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.3.5
      - five
      - remedy
      - all
      
  - name: 5.3.6 - Fetching the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_536_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.3.6
      - five
      - remedy
      - all
      
  - name: 5.3.6 - Creating sshloglevel configuration file
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - sshloglevel
      - 5.3.6
      - five
      - remedy
      - all 
      
  - name: 5.3.7 - Fetching the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_537_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.3.7
      - five
      - remedy
      - all
      
  - name: 5.3.7 - Creating sshx11forward configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshx11forward
      - 5.3.7
      - five
      - remedy
      - all
      
  - name: 5.3.8 - Fetching the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_538_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.3.8
      - five
      - remedy
      - all
      
  - name: 5.3.8 - Creating sshmaxauthtries configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries_centos6 }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshmaxauthtries
      - 5.3.8
      - five
      - remedy
      - all
      
  - name: 5.3.9 - Fetching the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_539_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.3.9
      - five
      - remedy
      - all
      
  - name: 5.3.9 - Creating sshignorerhosts configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "IgnoreRhosts yes"
    when: sshignorerhosts.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshignorerhosts
      - 5.3.9
      - five
      - remedy
      - all
      
  - name: 5.3.10 - Fetching the sshauthentication value from ansible facts 
    shell: echo "{{ ansible_local.sshauthentication_5310_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.3.10
      - five
      - remedy
      - all

  - name: 5.3.10 - Creating sshauthentication configuration file 
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "HostbasedAuthentication no"
    when: sshauthentication.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshauthentication
      - 5.3.10
      - five
      - remedy
      - all
      
  - name: 5.3.11 - Fetching the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_5311_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.3.11
      - five
      - remedy
      - all
      
  - name: 5.3.11 - Creating sshrootlogin configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitRootLogin*|#PermitRootLogin*)"
      line: "{{ PermitRootLogin_centos6 }}"
    when: sshrootlogin.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshrootlogin
      - 5.3.11
      - five
      - remedy
      - all
      
  - name: 5.3.12 - Fetching the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_5312_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.3.12
      - five
      - remedy
      - all
      
  - name: 5.3.12 - Creating sshpep configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "PermitEmptyPasswords no"
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.3.12
      - five
      - remedy
      - all

  - name: 5.3.13 - Fetching the sshpue value from ansible facts
    shell: echo "{{ ansible_local.sshpue_5313_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.3.13
      - five
      - remedy
      - all

  - name: 5.3.13 - Creating sshpue configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "PermitUserEnvironment no"
    when: sshpue.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshpue
      - 5.3.13
      - five
      - remedy
      - all

  - name: 5.3.14 - Fetching the sshchipers value from ansible facts
    shell: echo "{{ ansible_local.sshchipers_5314_audit }}"
    register: sshchipers
    ignore_errors: True
    become: yes
    tags:
      - sshchipers
      - 5.3.14
      - five
      - remedy
      - all

  - name: 5.3.14 - Adding strong Ciphers to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Ciphers*|#Ciphers*)"
      line: "Ciphers aes256-ctr,aes192-ctr,aes128-ctr"
    failed_when: no
    when: sshchipers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshchipers
      - 5.3.14
      - five
      - remedy
      - all
      
  - name: 5.3.15 - Fetching the sshmacalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshmacalgorithm_5315_audit }}"
    register: sshmacalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshmacalgorithm
      - 5.3.15
      - five
      - remedy
      - all
      
#  - name: 5.3.15 - Creating sshmacalgorithm configuration file  
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      line: 'MACs hmac-sha2-512,hmac-sha2-256'
#    when: sshmacalgorithm.stdout.find("FAILED") != -1 
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.3.15
#      - five
#      - remedy
#      - all

  - name: 5.3.16 - Fetching the sshkeyexalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshkeyexalgorithm_5316_audit }}"
    register: sshkeyexalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshkeyexalgorithm
      - 5.3.16
      - five
      - remedy
      - all

  - name: 5.3.16 - Adding strong Key Exchange algorithms to /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: 'KexAlgorithms diffie-hellman-group-exchange-sha256'
    failed_when: no
    when: sshkeyexalgorithm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshkeyexalgorithm
      - 5.3.16
      - five
      - remedy
      - all
  
  - name: 5.3.17 - Fetching the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5317_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.3.17
      - five
      - remedy
      - all
      
  - name: 5.3.17 - Creating sshidletimeout configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval_centos6 }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.3.17
      - five
      - remedy
      - all

  - name: 5.3.17 - Creating sshidletimeout configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: "{{ ClientAliveCountMax_centos6 }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.3.17
      - five
      - remedy
      - all
      
  - name: 5.3.18 - Fetching the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5318_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.3.18
      - five
      - remedy
      - all
      
  - name: 5.3.18 - Creating sshlogingracetime configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "LoginGraceTime 60"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.3.18
      - five
      - remedy
      - all
      
  - name: 5.3.19 - Fetching the sshwarningbanner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5319_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.3.19
      - five
      - remedy
      - all
      
  - name: 5.3.19 - Creating sshwarningbanner configuration file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.3.19
      - five
      - remedy
      - all

  - name: 5.3.20 - Fetching the sshpam value from ansible facts
    shell: echo "{{ ansible_local.sshpam_5320_audit }}"
    register: sshpam
    ignore_errors: True
    become: yes
    tags:
      - sshpam
      - 5.3.20
      - five
      - remedy
      - all

  - name: 5.3.20 - Enabling SSH PAM in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(UsePAM*|#UsePAM*)"
      line: "UsePAM yes"
    failed_when: no
    when: sshpam.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpam
      - 5.3.20
      - five
      - remedy
      - all

  - name: 5.3.21 - Fetching the sshtcpforward value from ansible facts
    shell: echo "{{ ansible_local.sshtcpforward_5321_audit }}"
    register: sshtcpforward
    ignore_errors: True
    become: yes
    tags:
      - sshtcpforward
      - 5.3.21
      - five
      - remedy
      - all

  - name: 5.3.21 - Disabling SSH AllowTcpForwarding in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(AllowTcpForwarding*|#AllowTcpForwarding*)"
      line: "AllowTcpForwarding no"
    failed_when: no
    when: sshtcpforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshtcpforward
      - 5.3.21
      - five
      - remedy
      - all

  - name: 5.3.22 - Fetching the sshmaxstartups value from ansible facts
    shell: echo "{{ ansible_local.sshmaxstartups_5322_audit }}"
    register: sshmaxstartups
    ignore_errors: True
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.21
      - five
      - remedy
      - all

  - name: 5.3.22 - Adding SSH MaxStartups in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxStartups*|#MaxStartups*)"
      line: "MaxStartups 10:30:60"
    failed_when: no
    when: sshmaxstartups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxstartups
      - 5.3.22
      - five
      - remedy
      - all

  - name: 5.3.23 - Fetching the sshmaxsessions value from ansible facts
    shell: echo "{{ ansible_local.sshmaxsessions_5323_audit }}"
    register: sshmaxsessions
    ignore_errors: True
    become: yes
    tags:
      - sshmaxsessions
      - 5.3.23
      - five
      - remedy
      - all

  - name: 5.3.23 - Limiting SSH MaxSessions in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxSessions*|#MaxSessions*)"
      line: "MaxSessions 10"
    failed_when: no
    when: sshmaxsessions.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxsessions
      - 5.3.23
      - five
      - remedy
      - all
      
  - name: 5.4.1 - Fetching the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_541_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - remedy
      - all

  - name: 5.4.1 - commenting a line 
    replace:
      path: '{{ item }}'
      regexp: "^(password.*requisite.*pam_cracklib.so*)"
      replace: '#\1'
    with_items:
      - '/etc/pam.d/system-auth'
      - '/etc/pam.d/password-auth'
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - remedy
      - all

  - name: 5.4.1 - Set policy for passwdcreation
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "password requisite pam_cracklib.so try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1"
    with_items:
      - '/etc/pam.d/system-auth'
      - '/etc/pam.d/password-auth'
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - remedy
      - all
      
  - name: 5.4.2 - Fetching the lockout value from ansible facts 
    shell: echo "{{ ansible_local.lockout_542_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - remedy
      - all
      
  - name: 5.4.2 - Creating lockout configuration file 
    lineinfile:
      path: /etc/pam.d/password-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.2 - Creating lockout configuration file 
    lineinfile:
      path: /etc/pam.d/system-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - remedy
      - all
  
  - name: 5.4.3 - Fetching the passwdreuse value from ansible facts 
    shell: echo "{{ ansible_local.passwdreuse_543_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - remedy
      - all

  - name: 5.4.3 - Ensure password reuse is limited
    command: sed -i 's/password.*sufficient.*pam_unix.so.*/& remember=5/' /etc/pam.d/password-auth
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - remedy
      - all

  - name: 5.4.3 - Ensure password reuse is limited
    command: sed -i 's/password.*sufficient.*pam_unix.so.*/& remember=5/' /etc/pam.d/system-auth
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - remedy
      - all

  - name: 5.4.4 - Fetching the passwdhashing value from ansible facts 
    shell: echo "{{ ansible_local.passwdhashing_544_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - remedy
      - all 
      
  - name: 5.4.4 - Creating passwdhashing configuration file
    lineinfile:
      path: /etc/pam.d/password-auth
      state: present
      regexp: '^(password.*sufficient.*pam_unix.so.*)$'
      line: '\1 sha512'
      backrefs: yes
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - Creating passwdhashing configuration file
    lineinfile:
      path: /etc/pam.d/system-auth
      state: present
      regexp: '^(password.*sufficient.*pam_unix.so.*)$'
      line: '\1 sha512'
      backrefs: yes
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - remedy
      - all
 
  - name: 5.5.1.1 - Fetching the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5511_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - remedy
      - all

  - name: 5.5.1.1 - Set the PASS_MAX_DAYS parameter
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MAX_DAYS.*)"
      line: "PASS_MAX_DAYS {{ Pass_max_days_centos6 }}"
    when: passwdexpiration.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - remedy
      - all

  - name: 5.5.1.1 - greping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$5>365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - remedy
      - all         

  - name: 5.5.1.1 - Modify user parameters for users
    chage: user="{{ item }}" sp_max="{{ Pass_max_days_centos6 }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
    - passwdexpiration.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - remedy
      - all
      
  - name: 5.5.1.2 - Fetching the minidays value from ansible facts
    shell: echo "{{ ansible_local.minidays_5512_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - remedy
      - all
      
  - name: 5.5.1.2 - Set the PASS_MIN_DAYS parameter
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MIN_DAYS*)"
      line: "PASS_MIN_DAYS {{ Pass_min_days_centos6 }}"
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - remedy
      - all

  - name: 5.5.1.2 - greping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - remedy
      - all

  - name: 5.5.1.2 - Modify user parameters for users
    chage: user="{{ item }}" sp_min="{{ Pass_min_days_centos6 }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - minidays.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - remedy
      - all
      
  - name: 5.5.1.3 - Fetching the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5513_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - remedy
      - all
      
  - name: 5.5.1.3 - Set the PASS_WARN_AGE parameter
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_WARN_AGE*)"
      line: "PASS_WARN_AGE {{ Pass_warn_age_centos6 }}"
    ignore_errors: True
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - remedy
      - all

  - name: 5.5.1.3 - Grepping users
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - remedy
      - all

  - name: 5.5.1.3 - Modify user parameters for users
    chage: user="{{ item }}" sp_warn="{{ Pass_warn_age_centos6 }}"
    loop: "{{ echo.stdout_lines }}"
    ignore_errors: True
    when:
    - warningdays.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - remedy
      - all
      
  - name: 5.5.1.4 - Fetching the inactivepasswdlock value from ansible facts
    shell: echo "{{ ansible_local.inactivepasswdlock_5514_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - remedy
      - all

  - name: 5.5.1.4 - setting the default password inactivity period
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - remedy
      - all

  - name: 5.5.1.4 - Grep users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - remedy
      - all

  - name: 5.5.1.4 - Modify user parameters for users
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when:
    - inactivepasswdlock.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - remedy
      - all
      
  - name: 5.5.1.5 - Fetching the lastpasswdchange value from ansible facts
    shell: echo "{{ ansible_local.lastpasswdchange_5515_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.5.1.5
      - five
      - remedy
      - all
      
  - name: 5.5.1.5 - Configuring lastpasswdchange
    shell: |
       count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
                fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.5.1.5
      - five
      - remedy
      - all
      
  - name: 5.5.2 Fetching the sysaccnonlogin value from ansible facts
    shell: echo "{{ ansible_local.sysaccnonlogin_552_audit }}"
    register: sysaccnonlogin
    ignore_errors: True
    become: yes
    tags:
      - sysaccnonlogin
      - 5.5.2
      - five
      - remedy
      - all
      
  - name: 5.5.2 - Set all user shells required to /sbin/nologin
    shell: | 
        awk -F: '$3<500 && $7!="/sbin/nologin" {print $1}' /etc/passwd
    register: echo
    when: sysaccnonlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysaccnonlogin
      - 5.5.2
      - five
      - remedy
      - all

  - name: 5.5.2 - locking system user
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.5.2
      - five
      - remedy
      - all

  - name: 5.5.2 - setting the locked system user /sbin/nologin
    user:
      name: "{{ item }}"
      shell: '/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.5.2
      - five
      - remedy
      - all
      
  - name: 5.5.3 - Fetching the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_553_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.5.3
      - five
      - remedy
      - all
      
  - name: 5.5.3 - Set the root user default group to GID 0
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultgroup
      - 5.5.3
      - five
      - remedy
      - all

  - name: 5.5.4 - Fetching the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_554_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.5.4
      - five
      - remedy
      - all

  - name: 5.5.4 - Adding a line to /etc/profile
    lineinfile:
      path: /etc/profile
      state: present
      line: '{{ item }}'
    with_items:
      - "TMOUT=900"
      - "readonly TMOUT"
      - "export TMOUT"
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershelltimeout
      - 5.5.4
      - five
      - remedy
      - all
      
  - name: 5.5.5 - Fetching the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_555_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - remedy
      - all

  - name: 5.4.5 - Creating directory
    file:
      path: /etc/ansible/backup/defaultuser
      state: directory
      mode: '0750'
      recurse: yes
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - remedy
      - all

  - name: 5.5.5 - Backing up files
    copy:
      src: '{{item.path}}'
      dest: '{{item.dest}}'
      remote_src: yes
    with_items:
      - { path: '/etc/profile', dest: '/etc/ansible/backup/defaultuser/profile_{{ansible_hostname}}' }
      - { path: '/etc/bashrc', dest: '/etc/ansible/backup/defaultuser/bashrc_{{ansible_hostname}}' }
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - remedy
      - all

  - name: 5.5.5 - Adding a line to /etc/profile
    shell: sed -i 's/umask[[:space:]][0-9][0-9]*/umask 027/g' /etc/profile /etc/bashrc
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - remedy
      - all
      
  - name: 5.6 - Fetching the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.rootlogin_56_audit }}"
    register: rootlogin
    ignore_errors: True
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - remedy
      - all

  - name: 5.6 - Ensure root login is restricted to system console
    shell: sed -i '/^tty/!d'  /etc/securetty
    when: rootlogin.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - rootlogin
      - '5.6'
      - five
      - remedy
      - all
 
  - name: 5.7 - Fetching the suaccess value from ansible facts 
    shell: echo "{{ ansible_local.suaccess_57_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - remedy
      - all
      
  - name: 5.7 - Creating suaccess configuration file 
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: "auth required pam_wheel.so use_uid"
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - remedy
      - all

  - name: 5.7 - adding whell group
    lineinfile:
      path: /etc/group
      state: present
      regexp: "^(wheel*)"
      line: "wheel:x:10:root,{{ wheelgroup_centos6 }}"
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - remedy
      - all

########################## CHAPTER-6 ####################

  - name: 6.1.1 - Fetching the auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}" 
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all
 
  - name: 6.1.1 - Review all installed packages
    shell: "rpm -Va --nomtime --nosize --nomd5 --nolinkto"
    register: eho
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all

  - name: 6.1.1 - Audit system file permissions
    shell: "rpm -qf {{ item }} 2>/dev/null "
    loop: "{{ eho.stdout_lines }}"
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all

  - name: 6.1.2 - Fetching the permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}" 
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all

  - name: 6.1.2 - Set root permission to /etc/passwd
    file:
      path: "/etc/passwd"
      mode: 0644
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all

  - name: 6.1.3 - Fetching the permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_613_audit }}"
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.3
      - six
      - remedy
      - all

  - name: 6.1.3 - Set root permission to /etc/passwd-
    file:
      path: "/etc/passwd-"
      mode: 0644
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswdi
      - 6.1.3
      - six
      - remedy
      - all

  - name: 6.1.4 - Fetching the permgroup value from ansible facts
    shell: echo "{{ ansible_local.permgroup_614_audit }}" 
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - remedy
      - all
  
  - name: 6.1.4 - Set root permission to /etc/group
    file:
      path: "/etc/group"
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - remedy
      - all

  - name: 6.1.5 - Fetching the permgroupi value from ansible facts
    shell: echo "{{ ansible_local.permgroupi_615_audit }}"
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.5
      - six
      - remedy
      - all

  - name: 6.1.5 - Set root permission to /etc/group-
    file:
      path: "/etc/group-"
      mode: 0644
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.5
      - six
      - remedy
      - all

  - name: 6.1.6 - Fetching the permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_616_audit }}"
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.6
      - six
      - remedy
      - all

  - name: 6.1.6 - Set root permission to /etc/shadow
    file:
      path: "/etc/shadow"
      mode: 0000
      owner: root
      group: root
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.6
      - six
      - remedy
      - all

  - name: 6.1.7 - Fetching the permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_617_audit }}"
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all

  - name: 6.1.7 - Set root permission to /etc/shadow-
    file:
      path: "/etc/shadow-"
      mode: 0000
      owner: root
      group: root
    when: permshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all

  - name: 6.1.8 - Fetching the permgshadow value from ansible facts
    shell: echo "{{ ansible_local.permgshadow_618_audit }}" 
    register: permgshadow
    ignore_errors: True
    become: yes
    tags:
      - permgshadow
      - 6.1.8
      - six
      - remedy
      - all

  - name: 6.1.8 - Set root permission to /etc/gshadow
    file:
      path: "/etc/gshadow"
      mode: 0000
      owner: root
      group: root
    when: permgshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadow
      - 6.1.8
      - six
      - remedy
      - all

  - name: 6.1.9 - Fetching the permgshadowi value from ansible facts
    shell: echo "{{ ansible_local.permgshadowi_619_audit }}" 
    register: permgshadowi
    ignore_errors: True
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - remedy
      - all

  - name: 6.1.9 - Set root permission to /etc/gshadow-
    file:
      path: "/etc/gshadow-"
      mode: 0000
      owner: root
      group: root
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - remedy
      - all
  
  - name: 6.1.10 - Fetching the wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_6110_audit }}" 
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name: 6.1.10 - Set root permission to /etc/passwd
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name: 6.1.10 - Removing write access
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name:  6.1.11 - Fetching the unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_6111_audit }}" 
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Ensure no unowned files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Set root permission to unownedfiles
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Ensure no unowned files or directories exist
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Set root permission to unownedfiles
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.12 - Fetching the ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6112_audit }}" 
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Ensure no ungrouped files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Set root permission to ungroupedfiles
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Ensure no ungrouped files or directories exist
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - set root permission to the content
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.2.1 - Fetching the useshadowed value from ansible facts
    shell: echo "{{ ansible_local.useshadowed_621_audit }}"
    register: useshadowed
    ignore_errors: True
    become: yes
    tags:
      - useshadowed
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.1 - Removing single x in the password field
    shell: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
    when: useshadowed.stdout.find("FAILED") != -1
    become: yes
    tags:
      - useshadowed
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.2 - Fetching the emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_622_audit }}" 
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.2 - Grep users
    shell: "grep '/home' /etc/passwd | awk  -F: '$3>=500 {print $1}'"
    register: echo
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.2- Ensure password fields are not empty
    shell: "grep '{{ echo.stdout }}' /etc/shadow | awk -F':' '$2==\"!\" || $2==\"\" || $2==\"!!\"{print $1}'"
    register: ech
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.2 - lock the account until it can be determined why it does not have a password
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ ech.stdout_lines }}"
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.3 - Fetching the nolegacypasswd value from ansible facts
    shell: echo "{{ ansible_local.nolegacypasswd_623_audit }}" 
    register: nolegacypasswd
    ignore_errors: True
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.3 - Remove any legacy '+' entries from /etc/passwd if they exist
    shell: "sed -i 's/+://g' /etc/passwd"
    when: nolegacypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.3
      - six
      - remedy
      - all

  - name: 6.2.4 - Fetching the nolegacyshadow value from ansible facts
    shell: echo "{{ ansible_local.nolegacyshadow_624_audit }}" 
    register: nolegacyshadow
    ignore_errors: True
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.4
      - six
      - remedy
      - all

  - name: 6.2.4 - Remove any legacy '+' entries from /etc/shadow if they exist
    shell: "sed -i 's/+://g' /etc/shadow"
    when: nolegacyshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.4
      - six
      - remedy
      - all

  - name: 6.2.5 - Fetching the nolegacygroup value from ansible facts
    shell: echo "{{ ansible_local.nolegacygroup_625_audit }}" 
    register: nolegacygroup
    ignore_errors: True
    become: yes
    tags:
      - nolegacygroup
      - 6.2.5
      - six
      - remedy
      - all

  - name: 6.2.5 - Remove any legacy '+' entries from /etc/group if they exist
    shell: "sed -i 's/+://g' /etc/group"
    when: nolegacygroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacygroup
      - 6.2.5
      - six
      - remedy
      - all
  
  - name: 6.2.6 - Fetching the rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_626_audit }}" 
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.6
      - six
      - remedy
      - all

  - name: 6.2.6 - assigning uid to users
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - rootuid
      - 6.2.6
      - six
      - remedy
      - all
  
  - name: 6.2.8 - Fetching the userhdir value from ansible facts
    shell: echo "{{ ansible_local.userhdir_628_audit }}" 
    register: userhdir
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.8 - Grep users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 && $7!=/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.8 - assiging home directory to users
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ echo.stdout_lines }}"
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.9 - Fetching the userownhdir value from ansible facts
    shell: echo "{{ ansible_local.userownhdir_629_audit }}" 
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - Change the ownership of any home directories that are not owned by the defined user to the correct user
    shell: |
       cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | grep -v 'root 0 /root' | while read user uid dir; do
       if [ $uid -ge 500 -a -d "$dir" -a $user != "nfsnobody" ]; then
             owner=$(stat -L -c "%U" "$dir")
             if [ "$owner" != "$user" ]; then
                 echo "$dir:$user:$owner" >> /tmp/cisuserhdir
             fi
       fi
       done
          a=$(sed -i 's/\/:nobody.*//g' /tmp/cisuserhdir)
          b=$(cat /tmp/cisuserhdir | grep -v '^[[:space:]]*$')
          echo "$b"
          rm -rf /tmp/cisuserhdir
    register: userhdirreg
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - Change the ownership of any home directories to the correct user
    file:
      path: "{{ item.split(':')[0] }}"
      owner: "{{ item.split(':')[1] }}"
      group: "{{ item.split(':')[1] }}"
    loop: "{{ userhdirreg.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.10 - Fetching the userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_6210_audit }}"
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Grep users
    shell: "cat /etc/passwd | awk -F: '($3>=500 && $7 != '/sbin/nologin' && $7 != '/bin/false') { print $1 }' | sort"
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Ensure users home directories permissions are 750 or more restrictive
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.11 - Fetching the dotfiles value from ansible facts
    shell: echo "{{ ansible_local.dotfiles_6211_audit }}" 
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.11
      - six
      - remedy
      - all
   
  - name: 6.2.11 - checkinng for dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - changing permission to file
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.12 - Fetching the forwardfiles value from ansible facts
    shell: echo "{{ ansible_local.forwardfiles_6212_audit }}" 
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: forwardfiles_result
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.12
      - six
      - all
      - remedy
 
  - name: 6.2.12 - creating backup directory
    file:
      path: /etc/ansible/backup/forwardfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - backing up files
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/forwardfiles"
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ forwardfiles_result.stdout_lines }}" 
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.13 - Fetching the netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_6213_audit }}" 
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: netrcfiles_result
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.13 - creating backup directory
    file:
      path: /etc/ansible/backup/netrcfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/netrcfiles"
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.14 - Fetching the rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6214_audit }}" 
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts'"
    register: rhosts_result
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - creating backup directory
    file:
      path: /etc/ansible/backup/rhosts
      state: directory
      mode: '0750'
      recurse: yes
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/rhosts"
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Removing .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.15 - Fetching the groups value from ansible facts
    shell: echo "{{ ansible_local.groups_6215_audit }}"
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - remedy
      - all

  - name: 6.2.15 - Verify no results are returned
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              groupadd $a
              usermod -g $a $a
            fi
        done
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.15
      - six
      - remedy
      - all
 
  - name: 6.2.16 - Fetching the duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6216_audit }}" 
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Grep value and stored in register
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Grep value and stored in register
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when:
     - duplicateuid.stdout.find("FAILED") != -1 
     - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Grep value and stored in register
    shell: "b=$(grep '/home/' /etc/passwd | cut -d':' -f3 |  sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c "
    register: val
    when:
     - duplicateuid.stdout.find("FAILED") != -1
     - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Ensure no duplicate UIDs exist
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicateuid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.17 - Fetching the duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6217_audit }}" 
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.17 - Grep value and stored in register
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.17 - Grep value and stored in register
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when: 
    - duplicategid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.17 - Grep value and stored in register
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when:
    - duplicategid.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.17 - Ensure no duplicate GIDs exist
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicategid.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.17
      - six
      - remedy
      - all

  - name: 6.2.18 - Fetching the duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6218_audit }}" 
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all

  - name: 6.2.18 - Grep value and stored in register
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all

  - name: 6.2.18 - Grep value and stored in register
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when: 
    - duplicateuser.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all

  - name: 6.2.18 - Message if duplicate user names exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
    - duplicateuser.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.18
      - six
      - remedy
      - all

  - name: 6.2.19 - Fetching the duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6219_audit }}" 
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all
 
  - name: 6.2.19 - Grep value and stored in register
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all

  - name: 6.2.19 - Grep value and stored in register
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}' | awk 'FNR != 1'"
    register: val
    when: 
    - duplicategroup.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all

  - name: 6.2.19 - Message if duplicate group names exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
    - duplicategroup.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.19
      - six
      - remedy
      - all

  - name: 6.2.20 - Fetching the shadowgroup value from ansible facts
    shell: echo "{{ ansible_local.shadowgroup_6220_audit }}"
    register: shadowgroup
    ignore_errors: True
    become: yes
    tags:
      - shadowgroup
      - 6.2.20
      - six
      - remedy
      - all

  - name: 6.2.20 - Removing groups assigned to shadow group
    shell: |
       a=$(cat /etc/group | grep "^shadow" | awk -F: '{print $3}')
       if [ $(cat /etc/group | grep "^shadow" | wc -l) -gt 0 ]; then
           for i in $(cat /etc/passwd | cut -d, -f1-3 | grep "$a" | awk -F: '{print $1}'); do
              usermod -g users $i
            done
       fi
    failed_when: no
    when: shadowgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shadowgroup
      - 6.2.20
      - six
      - remedy
      - all

  - name: 1.9 - Fetching the updates value from ansible facts
    shell: echo "{{ ansible_local.updates_19_audit }}"
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - remedy
      - all

  - name: 1.9 - Installing updates, patches, and additional security software
    yum:
      name: "*"
      state: latest
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - remedy
      - all

  - name: Include Database
    include: tasks/after_linux.yml
