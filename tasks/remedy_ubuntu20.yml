---
  - name: Include Actualfact
    include: tasks/actualfact_ubuntu20.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

####REMEDY####
  - name: 1.1.1.1 - Fetch the cramfs value from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit }}" 
    register: cramfs
    ignore_errors: True
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
      
  - name: 1.1.1.1 - creating cramfs configuration file
    lineinfile:
      path: /etc/modprobe.d/cramfs.conf
      line: "install cramfs /bin/true # Disable cramfs Filesystems"
      state: present
      create: yes
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
      
  - name: 1.1.1.1 - unloading the cramfs module
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - remedy
      - all
 
  - name: 1.1.1.2 - Fetch the freevxfs value from ansible facts
    shell: echo "{{ ansible_local.freevxfs_1112_audit }}" 
    register: freevxfs
    ignore_errors: True
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.2 - creating freevxfs configuration file
    lineinfile:
      path: /etc/modprobe.d/freevxfs.conf
      line: "install freevxfs /bin/true # Disable freevxfs Filesystems"
      state: present
      create: yes
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.2 - unloading the freevxfs module
    shell: "rmmod freevxfs"
    failed_when: no
    when: freevxfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - freevxfs
      - 1.1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.1.3 - Fetch the jffs2 value from ansible facts
    shell: echo "{{ ansible_local.jffs2_1113_audit }}" 
    register: jffs2
    ignore_errors: True
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all
      
  - name: 1.1.1.3 - creating jffs2 configuration file
    lineinfile:
      path: /etc/modprobe.d/jffs2.conf
      line: "install jffs2 /bin/true # Disable jffs2 Filesystems"
      state: present
      create: yes
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all 
      
  - name: 1.1.1.3 - unloading the jffs2 module
    shell: "rmmod jffs2"
    failed_when: no
    when: jffs2.stdout.find("FAILED") != -1
    become: yes
    tags:
      - jffs2
      - 1.1.1.3
      - one
      - remedy
      - all
      
  - name: 1.1.1.4 - Fetch the hfs value from ansible facts 
    shell: echo "{{ ansible_local.hfs_1114_audit }}" 
    register: hfs
    ignore_errors: True
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all

  - name: 1.1.1.4 - creating hfs configuration file
    lineinfile:
      path: /etc/modprobe.d/hfs.conf
      line: "install hfs /bin/true # Disable hfs Filesystems"
      state: present
      create: yes
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all
     
  - name: 1.1.1.4 - unloading the hfs module
    shell: "rmmod hfs"
    failed_when: no
    when: hfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfs
      - 1.1.1.4
      - one
      - remedy
      - all
      
  - name: 1.1.1.5 - Fetch the hfsplus value from ansible facts 
    shell: echo "{{ ansible_local.hfsplus_1115_audit }}" 
    register: hfsplus
    ignore_errors: True
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.5 - creating hfsplus configuration file
    lineinfile:
      path: /etc/modprobe.d/hfsplus.conf
      line: "install hfsplus /bin/true # Disable hfsplus Filesystems"
      state: present
      create: yes
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all
      
  - name: 1.1.1.5 - unloading the hfsplus module
    shell: "rmmod hfsplus"
    failed_when: no
    when: hfsplus.stdout.find("FAILED") != -1
    become: yes
    tags:
      - hfsplus
      - 1.1.1.5
      - one
      - remedy
      - all

  - name: 1.1.1.6 - Fetch the udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1116_audit }}" 
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.6 - creating udf configuration file
    lineinfile:
      path: /etc/modprobe.d/udf.conf
      line: "install udf /bin/true # Disable udf Filesystems"
      state: present
      create: yes    
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - remedy
      - all

  - name: 1.1.1.6 - unloading the udf module
    shell: "rmmod udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.6
      - one
      - remedy
      - all
  
  - name: 1.1.1.7 - Fetch the fat value from ansible facts
    shell: echo "{{ ansible_local.fat_1117_audit }}"
    register: fat
    ignore_errors: True
    become: yes
    tags:
      - fat
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - creating fat configuration file
    lineinfile:
      path: /etc/modprobe.d/vfat.conf
      create: yes
      line: "install vfat /bin/true # Disable vfat filesystems"
      state: present
    when: fat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fat
      - 1.1.1.7
      - one
      - remedy
      - all

  - name: 1.1.1.7 - unloading the fat module
    shell: "rmmod vfat"
    failed_when: no
    when: fat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fat
      - 1.1.1.7
      - one
      - remedy
      - all
    
  - name: 1.1.2 - Fetch the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}" 
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all
      
  - name: 1.1.2 - Configuring /etc/fstab
    lineinfile:
      path: /etc/fstab
      line: tmpfs  /tmp  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0
      state: present
    when: tmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - remedy
      - all

  - name: 1.1.3 - Fetch the tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_113_audit }}"
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all

  - name: 1.1.3 - configuring the tmpnodev partition
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    when: tmpnodev.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - remedy
      - all

  - name: 1.1.4 - Fetch the tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_114_audit }}"
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.4 - configuring the tmpnosuid partition
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    when: tmpnosuid.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - remedy
      - all

  - name: 1.1.5 - Fetch the tmpnoexec value from ansible facts
    shell: echo "{{ ansible_local.tmpnoexec_115_audit }}"
    register: tmpnoexec
    ignore_errors: True
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.5 - configuring the tmpnoexec partition
    mount:
      path: /tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    when: tmpnoexec.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - remedy
      - all

  - name: 1.1.6 - Fetch the shmconf value from ansible facts
    shell: echo "{{ ansible_local.shmconf_116_audit }}"
    register: shmconf
    ignore_errors: True
    become: yes
    tags:
      - shmconf
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.6 - configuring the shmconf partition
    lineinfile:
      path: /etc/fstab
      line: tmpfs  /dev/shm  tmpfs  defaults,noexec,nodev,nosuid,seclabel  0 0
      state: present
    when: shmconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmconf
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.6 - remounting /dev/shm
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec,nodev,nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmconf
      - 1.1.6
      - one
      - remedy
      - all

  - name: 1.1.7 - Fetch the shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_117_audit }}" 
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.7
      - one
      - remedy
      - all

  - name: 1.1.7 configuring the shmnodev partition
    mount:
      path: /dev/shm
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: shmnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnodev
      - 1.1.7
      - one
      - remedy
      - all
      
  - name: 1.1.8 - Fetch the shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_118_audit }}" 
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.8
      - one
      - remedy
      - all
      
  - name: 1.1.8 - configuring the shmnosuid partition
    mount:
      path: /dev/shm
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnosuid
      - 1.1.8
      - one
      - remedy
      - all
      
  - name: 1.1.9 - Fetch the shmnoexec value from ansible facts
    shell: echo "{{ ansible_local.shmnoexec_119_audit }}" 
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.9
      - one
      - remedy
      - all
      
  - name: 1.1.9 - configuring the shmnoexec partition
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: shmnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnoexec
      - 1.1.9
      - one
      - remedy
      - all

  - name: 1.1.10 - Fetch the var value from ansible facts 
    shell: echo "{{ ansible_local.var_1110_audit }}" 
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - remedy
      - all
      
  - name: 1.1.10 - Greping var in /etc/fstab
    shell: (sudo grep "/var " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_var 
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - remedy
      - all
      
  - name: 1.1.10 - Message
    debug: msg="The partition /var is already created"
    when:
      - var.stdout.find("FAILED") != -1
      - uname_var.stdout != "0"  
    ignore_errors: yes
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - remedy
      - all    
      
  - name: 1.1.10 - Message
    debug: msg="suggestion to create a /var partition"
    when:
      - var.stdout.find("FAILED") != -1
      - uname_var.stdout == "0"  
    ignore_errors: yes
    become: yes
    tags:
      - var
      - 1.1.10
      - one
      - remedy
      - all
 
  - name: 1.1.11 - Fetch the vartmp value from ansible facts
    shell: echo "{{ ansible_local.vartmp_1111_audit }}" 
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - remedy
      - all
  
  - name: 1.1.11 - Greping /var/tmp in /etc/fstab
    shell: (sudo grep " /var/tmp " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_vartmp
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - remedy
      - all 
    
  - name: 1.1.11 - Message
    debug: msg="The partition /var/tmp is already created"
    when:
      - var.stdout.find("FAILED") != -1
      - uname_vartmp.stdout != "0"  
    ignore_errors: yes
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - remedy
      - all
      
  - name: 1.1.11 - Message
    debug: msg="Suggestion to create a /var/tmp partition"
    when:
      - var.stdout.find("FAILED") != -1
      - uname_vartmp.stdout == "0"  
    ignore_errors: yes
    become: yes
    tags:
      - vartmp
      - 1.1.11
      - one
      - remedy
      - all
  
  - name: 1.1.12 - configuring vtnodev partition
    shell: echo "{{ ansible_local.vtnodev_1112_audit }}" 
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.12
      - one
      - remedy
      - all
      
  - name: 1.1.12 - configuring vtnodev partition
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    when: vtnodev.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - vtnodev
      - 1.1.12
      - one
      - remedy
      - all
      
  - name: 1.1.13 - Fetch the vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_1113_audit }}" 
    register: vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.13
      - one
      - remedy
      - all
    
  - name: 1.1.13 - configuring vtnosuid partition
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: vtnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnosuid
      - 1.1.13
      - one
      - remedy
      - all
     
  - name: 1.1.14 - Fetch the vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_1114_audit }}" 
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.14
      - one
      - remedy
      - all

  - name: 1.1.14 - configuring vtnoexec partition
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: non
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnoexec
      - 1.1.14
      - one
      - remedy
      - all
      
  - name: 1.1.15 - Fetch the varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1115_audit }}" 
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - remedy
      - all
      
  - name: 1.1.15 - Greping /var/log in /etc/fstab
    shell: (sudo grep " /var/log " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_varlog
    when: varlog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - remedy
      - all
    
  - name: 1.1.15 - Message
    debug: msg="The partition /var/log is already created"
    when:
      - varlog.stdout.find("FAILED") != -1    
      - uname_varlog.stdout != "0"
    ignore_errors: yes
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - remedy
      - all 
      
  - name: 1.1.15 - Message
    debug: msg="Suggestion to create a /var/log partition"
    when:
      - varlog.stdout.find("FAILED") != -1    
      - uname_varlog.stdout == "0"  
    ignore_errors: yes
    become: yes
    tags:
      - varlog
      - 1.1.15
      - one
      - remedy
      - all 
    
  - name: 1.1.16 - Fetch the varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1116_audit }}" 
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - remedy
      - all
      
  - name: 1.1.16 - Greping /var/log/audit in /etc/fstab   
    shell: (sudo grep " /var/log/audit " /etc/fstab | wc -l)
    ignore_errors: yes
    register: uname_varlogaudit   
    when: varlogaudit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - remedy
      - all
    
  - name: 1.1.16 - Message
    debug: msg="The partition /var/log/audit is already created"
    when:
      - varlogaudit.stdout.find("FAILED") != -1    
      - uname_varlogaudit.stdout != "0"  
    ignore_errors: yes
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - remedy
      - all
     
  - name: 1.1.16 - Message
    debug: msg="Suggestion to create a /var/log/audit partition"
    when:
      - varlogaudit.stdout.find("FAILED") != -1    
      - uname_varlogaudit.stdout == "0"  
    ignore_errors: yes
    become: yes
    tags:
      - varlogaudit
      - 1.1.16
      - one
      - remedy
      - all

  - name: 1.1.17 - Fetching the home value from ansible facts 
    shell: echo "{{ ansible_local.home_1117_audit }}" 
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - remedy
      - all
      
  - name: 1.1.17 - Greping /home in /etc/fstab   
    shell: "(sudo grep ' /home ' /etc/fstab | wc -l)"
    ignore_errors: yes
    register: uname_result
    when: home.stdout.find("FAILED") != -1
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.17 - Message
    debug: msg="The partition /home is already created"
    when:
      - home.stdout.find("FAILED") != -1
      - uname_result.stdout != "0"
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - remedy
      - all

  - name: 1.1.17 - Message
    debug: msg="Suggestion to create a /home partition"
    when:
      - home.stdout.find("FAILED") != -1
      - uname_result.stdout == "0"
    become: yes
    tags:
      - home
      - 1.1.17
      - one
      - remedy
      - all
    
  - name: 1.1.18 - Fetch the homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1118_audit }}" 
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.18 - configuring homenodev partition
    mount:
      path: /home
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - homenodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.19 - Fetching the medianoexec value from ansible facts
    shell: echo "{{ ansible_local.medianoexec_1119_audit }}"
    register: medianoexec
    ignore_errors: True
    become: yes
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - noexec option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,noexec/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianoexec.stdout.find("FAILED") != -1
    tags:
      - medianoexec
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.20 - Fetching the medianodev value from ansible facts
    shell: echo "{{ ansible_local.medianodev_1120_audit }}"
    register: medianodev
    ignore_errors: True
    become: yes
    tags:
      - medianodev
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.20 - nodev option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nodev/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes	
    when: medianodev.stdout.find("FAILED") != -1	
    tags:
      - medianodev
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.21 - Fetching the medianosuid value from ansible facts
    shell: echo "{{ ansible_local.medianosuid_1121_audit }}"
    register: medianosuid
    ignore_errors: True
    become: yes
    tags:
      - medianosuid
      - 1.1.21
      - one
      - remedy
      - all

  - name: 1.1.21 - nosuid option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nosuid/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianosuid.stdout.find("FAILED") != -1	
    tags:
      - medianosuid
      - 1.1.21
      - one
      - remedy	  
      - all
      
  - name: 1.1.22 - Fetch the stickybit value from ansible facts
    shell: echo "{{ ansible_local.stickybit_1122_audit }}" 
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.22
      - one
      - remedy
      - all

  - name: 1.1.22  configuring stickybit on all world writable directories
    shell:  df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'
    changed_when: no
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - stickybit
      - 1.1.22
      - one
      - remedy
      - all
     
  - name: 1.1.23 - Fetch the automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1123_audit }}" 
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.23
      - one
      - remedy
      - all
      
  - name: 1.1.23 - Disable Automounting
    systemd:
      name: autofs
      enabled: no
    failed_when: no
    when: automount.stdout.find("FAILED") !=-1
    become: yes
    tags: 
      - automount
      - 1.1.23
      - one
      - remedy
      - all
      
  - name: 1.1.24 - Fetch the usbstorage value from ansible facts
    shell: echo "{{ ansible_local.usbstorage_1124_audit }}" 
    register: usbstorage
    ignore_errors: True
    become: yes
    tags:
      - usbstorage
      - 1.1.24
      - one
      - remedy
      - all
      
  - name: 1.1.24 - Creating usbstorage configuration file
    lineinfile: 
      path: /etc/modprobe.d/usb_storage.conf
      state: present
      line: install usb-storage /bin/true
      create: yes
    failed_when: no
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.24
      - one
      - remedy
      - all
      
  - name: 1.1.24 - unloading the usb-storage module
    shell: "rmmod usb-storage"
    failed_when: no
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.24
      - one
      - remedy
      - all

  - name: 1.2.1 - Fetch the repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_121_audit }}" 
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
     - repoconfig
     - 1.2.1
     - one
     - all  
   
  - name: 1.2.1 - configuring the repoconfig
    shell: apt-cache policy  
    when: repoconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - repoconfig
      - 1.2.1
      - one
      - remedy
      - all
      
  - name: 1.2.2 - Fetch the gpgkey value from ansible facts
    shell: echo "{{ ansible_local.gpgkey_122_audit }}" 
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - gpgkey
      - 1.2.2
      - one
      - remedy
      - all
      
  - name: 1.2.2 - configuring the gpgkey
    shell: apt-key list
    when: gpgkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - gpgkey
      - 1.2.2
      - one
      - remedy
      - all

  - name: 1.3.1 - Fetch the sudo value from ansible facts
    shell: echo "{{ ansible_local.sudo_131_audit }}" 
    register: sudo
    ignore_errors: True
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - remedy
      - all
      
  - name: 1.3.1 - Install sudo
    apt:
      name: sudo
      state: present
    when: sudo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - remedy
      - all
      
  - name: 1.3.2 - Fetch the sudopty value from ansible facts
    shell: echo "{{ ansible_local.sudopty_132_audit }}" 
    register: sudopty
    ignore_errors: True
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - remedy
      - all
      
  - name: 1.3.2 - configuring the sudopty file
    lineinfile:
      path: /etc/sudoers
      state: present
      line: "Defaults use_pty"
    when: sudopty.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - remedy
      - all
         
  - name: 1.3.3 - Fetch the sudologfiles value from ansible facts
    shell: echo "{{ ansible_local.sudologfiles_133_audit }}" 
    register: sudologfiles
    ignore_errors: True
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - remedy
      - all
      
  - name: 1.3.3 - configuring the sudologfiles files
    lineinfile:
      path: /etc/sudoers
      state: present
      line: 'Defaults logfile="/var/log/sudo.log"' 
    failed_when: no
    when: sudologfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - remedy
      - all
            
  - name: 1.4.1 - Fetch the aide value from ansible facts
    shell: echo "{{ ansible_local.aide_141_audit }}"
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - remedy
      - all
      
  - name: 1.4.1 - Install aide and aide-common
    apt:
      name: 
        - aide 
        - aide-common
      state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - aide
      - 1.4.1
      - one
      - remedy
      - all
      
  - name: 1.4.1 - Initializing aide
    command: '{{item}}'
    with_items:
      - aideinit
      - mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - remedy
      - all
      
  - name: 1.4.2 - Fetch the fsintegrity value from ansible facts
    shell: echo "{{ ansible_local.fsintegrity_142_audit }}" 
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - fsintegrity
      - 1.4.2
      - one
      - remedy
      - all
      
  - name: 1.4.2 - Scheduling aide check
    cron:
      name: Run Aide integrity check daily
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "/usr/bin/aide.wrapper --config /etc/aide/aide.conf --check"
    when: fsintegrity.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - fsintegrity
      - one
      - remedy
      - all

  - name: 1.5.1 - Fetch the bootloadpass value from ansible facts
    shell: echo "{{ ansible_local.bootloadpass_151_audit }}"
    register: bootloadpass
    ignore_errors: True
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - remedy
      - all

  - name: 1.5.1 - configuring bootloadpass
    shell: "awk -F: '$3==0 {print $1}' /etc/passwd"
    register: bootloaduser
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - bootloadpass
      - one
      - remedy
      - all

  - name: 1.5.1 - configuring bootloadpass
    shell: "set -o pipefail;
        if [ '{{ bootloader_password_ubuntu20 }}' == 'random' ];
        then PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c12); else PASSWORD='{{ bootloader_password_ubuntu20 }}';
        fi;
        echo -e \"$PASSWORD\n$PASSWORD\" | grub-mkpasswd-pbkdf2 | awk '/grub.pbkdf/{print$NF}'"
    register: grub_pass
    args:
      executable: /bin/bash
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - bootloadpass
      - one
      - remedy
      - all

  - name: 1.5.1 - Adding the password to a grub file
    copy:
      dest: /etc/grub.d/40_custom
      content: "cat << EOF\nset superusers=\"{{ bootloaduser.stdout }}\"\npassword_pbkdf2 {{ bootloaduser.stdout }} {{ grub_pass.stdout }}\nEOF"
      owner: root
      group: root
      mode: 0755
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - remedy
      - all

  - name: 1.5.1 - Adding unrestricted to boot/reboot without entering the password
    replace:
      path: /etc/grub.d/10_linux
      regexp: '--class os"'
      replace: '--class os --unrestricted"'
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - remedy
      - all

  - name: 1.5.1 - update the grub2 configuration
    command: update-grub
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.1
      - one
      - remedy
      - all

  - name: 1.5.2 - Fetch the bootloadperm value from ansible facts
    shell: echo "{{ ansible_local.bootloadperm_152_audit }}"
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - bootloadperm
      - 1.5.2
      - one
      - remedy
      - all

  - name: 1.5.2 - configuring the bootloadperm file
    file:
      path: /boot/grub/grub.cfg
      mode: 0400
      owner: root
      group: root
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadperm
      - 1.5.2
      - one
      - remedy
      - all

  - name: 1.5.3 - Fetch the singleusermode value from ansible facts
    shell: echo "{{ ansible_local.singleusermode_153_audit }}" 
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - remedy
      - all
      
  - name: 1.5.3 - set a password for the root user
    shell: echo -e "{{ singleusermode_ubuntu20 }}\n{{ singleusermode_ubuntu20 }}" | sudo passwd root
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - remedy
      - all
    
  - name: 1.6.1 - Fetch the xdnx value from ansible facts
    shell: echo "{{ ansible_local.xdnx_161_audit }}" 
    register: xdnx
    ignore_errors: True
    become: yes
    tags:
      - xdnx
      - 1.6.1
      - one
      - remedy
      - all

  - name: 1.6.1 - grepping xdnx
    shell: "(journalctl | grep 'protection: active' | wc -l)"
    register: xdnx_reg
    when: xdnx.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xdnx
      - 1.6.1
      - one
      - remedy
      - all

  - name: 1.6.1 - Message
    debug: msg="XD/NX support is enabled"
    when: 
      - xdnx.stdout.find("FAILED") != -1
      - xdnx_reg.stdout != 0 
    become: yes
    tags:
      - xdnx
      - 1.6.1
      - one
      - remedy
      - all
          
  - name: 1.6.1 - Message
    debug: msg="Install kernel with PAE support for 32-bit system"
    when:
      - xdnx.stdout.find("FAILED") != -1
      - xdnx_reg.stdout == 0
    become: yes
    tags:
      - xdnx
      - 1.6.1
      - one
      - remedy
      - all  
    
  - name: 1.6.2 - Fetch the aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_162_audit }}" 
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - aslr
      - 1.6.2
      - one
      - remedy
      - all

  - name: 1.6.2 - configuring the aslr file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^(kernel.randomize_va_space*|#kernel.randomize_va_space*)"
      line: kernel.randomize_va_space=2
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2
      - aslr
      - one
      - remedy
      - all

  - name: 1.6.2 - setting the active kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2
      - aslr
      - one
      - remedy
      - all
      
  - name: 1.6.3 - Fetch the prelink value from ansible facts
    shell: echo "{{ ansible_local.prelink_163_audit }}" 
    register: prelink
    ignore_errors: True
    become: yes
    tags:
      - prelink
      - 1.6.3
      - one
      - remedy
      - all

  - name: 1.6.3 - Ensure prelink is disabled
    shell: prelink -ua
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - prelink
      - 1.6.3
      - one
      - remedy
      - all
      
  - name: 1.6.3 - Uninstall prelink
    apt:
      name: prelink
      state: absent
    failed_when: no
    when: prelink.stdout.find("FAILED") != -1
    become: yes
    tags:
      - prelink
      - 1.6.3
      - one
      - remedy
      - all
      
  - name: 1.6.4 - Fetch the coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_164_audit }}" 
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - coredumps
      - 1.6.4
      - one
      - remedy
      - all
      
  - name: 1.6.4 - configuring the coredumps file
    lineinfile:
      path: /etc/security/limits.conf
      line: '* hard core 0'
      state: present
    failed_when: no
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - coredumps
      - 1.6.4
      - one
      - remedy
      - all
      
  - name: 1.6.4 - configuring the coredumps file
    lineinfile:
      state: present
      path: /etc/sysctl.conf
      regexp: "^(fs.suid_dumpable*|#fs.suid_dumpable*)"
      line: 'fs.suid_dumpable=0'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.4
      - coredumps
      - one
      - remedy
      - all

  - name: 1.6.4 - configuring the coredumps file
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.4
      - coredumps
      - one
      - remedy
      - all
      
  - name: 1.7.1.1 - Fetch the apparmor value from ansible facts
    shell: echo "{{ ansible_local.apparmor_1711_audit }}" 
    register: apparmor
    ignore_errors: True
    become: yes
    tags:
      - apparmor
      - 1.7.1.1
      - one
      - remedy
      - all
      
  - name: 1.7.1.1 - Install Apparmor
    apt:
      name: apparmor
      state: present
    failed_when: no
    when: apparmor.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmor
      - 1.7.1.1      
      - one
      - remedy
      - all
      
  - name: 1.7.1.1 - Install Apparmor
    apt:
      name: apparmor-utils
      state: present
    failed_when: no
    when: apparmor.stdout.find("FAILED") != -1
    become: yes
    tags:
      - apparmor
      - 1.7.1.1
      - one
      - remedy
      - all

  - name: 1.7.1.2 - Fetch the armorenable value from ansible facts
    shell: echo "{{ ansible_local.armorenable_1712_audit }}" 
    register: armorenable
    ignore_errors: True
    become: yes
    tags:
      - armorenable
      - 1.7.1.2
      - one
      - remedy
      - all
      
  - name: 1.7.1.2 - configuring the armorenable file
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& apparmor=1 security=apparmor/' /etc/default/grub
    when: armorenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - armorenable
      - 1.7.1.2
      - one
      - remedy
      - all
      
  - name: 1.7.1.2 - updating armorenable file
    command: update-grub
    when: armorenable.stdout.find("FAILED") != -1
    ignore_errors: yes
    become: yes
    tags:
      - armorenable
      - 1.7.1.2
      - one
      - remedy
      - all
      
  - name: 1.7.1.3 - Fetch the armorenfcomp value from ansible facts
    shell: echo "{{ ansible_local.armorenfcomp_1713_audit }}" 
    register: armorenfcomp
    ignore_errors: True
    become: yes
    tags:
      - armorenfcomp
      - 1.7.1.3
      - one
      - remedy
      - all
      
  - name: 1.7.1.3 -  set all profiles to enforce mode
    command: aa-{{ apparmorprofile_ubuntu20 }} /etc/apparmor.d/*
    when: armorenfcomp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - armorenfcomp
      - 1.7.1.3
      - one
      - remedy
      - all
            
  - name: 1.7.1.4 - Fetch the armorenforce value from ansible facts
    shell: echo "{{ ansible_local.armorenforce_1714_audit }}" 
    register: armorenforce
    ignore_errors: True
    become: yes
    tags:
      - armorenforce
      - 1.7.1.4
      - one
      - remedy
      - all
      
  - name: 1.7.1.4 - set all profiles to enforce mode
    command: aa-enforce /etc/apparmor.d/*
    failed_when: no
    when: armorenforce.stdout.find("FAILED") != -1
    become: yes
    tags:
      - armorenforce
      - 1.7.1.4
      - one
      - remedy
      - all
  
  - name: 1.8.1.1 - Fetch the msgday value from ansible facts
    shell: echo "{{ ansible_local.msgday_1811_audit }}" 
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - remedy
      - all

  - name: 1.8.1.1 - Removing few instance
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/motd
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - remedy
      - all
      
  - name: 1.8.1.1 - configuring the msgday file
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to ubuntu20"
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - msgday
      - 1.8.1.1
      - one
      - remedy
      - all
       
  - name: 1.8.1.2 - Fetch the locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_1812_audit }}" 
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - locallogin
      - 1.8.1.2
      - one
      - remedy
      - all

  - name: 1.8.1.2 - configuring the locallogin file
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.2
      - locallogin
      - one
      - remedy
      - all
      
  - name: 1.8.1.2 - configuring the locallogin file
    lineinfile:
      path: /etc/issue
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    failed_when: no
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - locallogin
      - 1.8.1.2
      - one
      - remedy
      - all
      
  - name: 1.8.1.3 - Fetch the remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_1813_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - remotelogin
      - 1.8.1.3
      - one
      - remedy
      - all

  - name: 1.8.1.3 - configuring the remotelogin file
    shell: sed -i '/\\r/d;/\\v/d;/\\m/d;/\\s/d' /etc/issue.net
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.3
      - remotelogin
      - one
      - remedy
      - all
      
  - name: 1.8.1.3 - configuring the remotelogin file
    lineinfile:
      path: /etc/issue.net
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    failed_when: no
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotelogin
      - 1.8.1.3
      - one
      - remedy
      - all
      
  - name: 1.8.1.4 - Fetch the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_1814_audit }}" 
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - motdperm
      - 1.8.1.4
      - one
      - remedy
      - all
      
  - name: 1.8.1.4 - configuring the motdperm file
    file:
      path: /etc/motd
      owner: root
      group: root
      mode: 0644
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - motdperm
      - 1.8.1.4
      - one
      - remedy
      - all
      
  - name: 1.8.1.5 - Fetch the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_1815_audit }}" 
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - issueperm
      - 1.8.1.5
      - one
      - remedy
      - all
      
  - name: 1.8.1.5 - configuring the issueperm file
    lineinfile:
      path: /etc/issue
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - issueperm
      - 1.8.1.5
      - one
      - remedy
      - all
     
  - name: 1.8.1.6 - Fetch the issuenetperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_1816_audit }}" 
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - issuenetperm
      - 1.8.1.6
      - one
      - remedy
      - all
      
  - name: 1.8.1.6 - configuring the issuenetperm file
    lineinfile:
      path: /etc/issue.net
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - issuenetperm
      - 1.8.1.6
      - one
      - remedy
      - all

  - name: 1.9 - Fetch the updates value from ansible facts
    shell: echo "{{ ansible_local.updates_19_audit }}" 
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - updates
      - '1.9'
      - one
      - remedy
      - all

  - name: 1.9 - Creating a directory
    file:
      path: /etc/ansible/backup/updates
      state: directory
      mode: '0755'
      recurse: yes
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - remedy
      - all

  - name: 1.9 - Finding up .deb files
    find:
      paths: /var/cache/apt/archives/
      patterns: '*.deb'
      age: '{{ fileage_ubuntu20 }}'
    register: findreg
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - remedy
      - all

  - name: 1.9 - Backing up .deb files
    copy:
      src: "{{ item }}"
      dest: /etc/ansible/backup/updates
      remote_src: yes
    with_items: "{{findreg.files | map(attribute='path') | list}}"
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - remedy
      - all
      
  - name: 1.9 - update all packages
    apt:
      name: "*"
      state: latest
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - updates
      - '1.9'
      - one
      - remedy
      - all

  - name: 1.10 - Fetch the gdm value from ansible facts
    shell: echo "{{ ansible_local.gdm_110_audit }}" 
    register: gdm
    ignore_errors: True
    become: yes
    tags:
      - gdm
      - '1.10'
      - one
      - remedy
      - all
      
  - name: 1.10 - configuring the gdm file
    lineinfile:
      path: /etc/gdm3/greeter.dconf-defaults
      line: "{{item}}"
      state: present
    failed_when: no
    with_items:
      - '[org/gnome/login-screen]'
      - 'banner-message-enable=true'
      - 'banner-message-text="Authorized uses only. All activity may be monitored and reported"'
      - 'disable-user-list=true'
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - gdm
      - '1.10'
      - one
      - remedy
      - all

  - name: 1.10 - Reloading gdm file
    shell: dpkg-reconfigure gdm3
    failed_when: no
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - gdm
      - '1.10'
      - one
      - remedy
      - all

  - name: 2.1.1 - Fetch the xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_211_audit }}" 
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - xinetd
      - 2.1.1
      - two
      - remedy
      - all

  - name: 2.1.1 - Removing xinetd services
    apt:
      name: xinetd
      state: absent
    when: xinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xinetd
      - 2.1.1
      - two
      - remedy
      - all

  - name: 2.1.2 - Fetch the openxinetd value from ansible facts
    shell: echo "{{ ansible_local.openxinetd_212_audit }}" 
    register: openxinetd
    ignore_errors: True
    become: yes
    tags:
      - openxinetd
      - 2.1.2
      - two
      - remedy
      - all

  - name: 2.1.2 - uninstalling openbsd-inetd service
    apt:
      name: openbsd-inetd 
      state: absent
      purge: yes
    failed_when: no
    when: openxinetd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - openxinetd
      - 2.1.2
      - two
      - remedy
      - all
 
  - name: 2.2.1.1 - Fetch the timesync value from ansible facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all

  - name: 2.2.1.1 - installing chrony or ntp service
    apt:
      name: "{{ ntp_chrony_ubuntu20 }}"
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesync
      - 2.2.1.1
      - two
      - remedy
      - all
 
  - name: 2.2.1.2 -  Fetch the timesynconf value from ansible facts
    shell: echo "{{ ansible_local.timesynconf_2212_audit }}"
    register: timesynconf
    ignore_errors: True
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - Removing chrony and ntp service
    apt:
      name:
        - chrony
        - ntp
      state: absent
    failed_when: no
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - configuring systemd-timesyncd service
    systemd:
      name: systemd-timesyncd.service
      masked: yes
    failed_when: no
    when: timesynconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - configuring the timesynconf file
    lineinfile:
      path: /etc/systemd/timesyncd.conf 
      regexp: "{{ item.regexp }}" 
      state: present
      line: "{{ item.line }}"
    with_items:
      - "{ regexp: '^(#NTP=*|NTP=*)', line: 'NTP=0.ubuntu.pool.ntp.org 1.ubuntu.pool.ntp.org 2.ubuntu.pool.ntp.org' }"
      - "{ regexp: '^(#FallbackNTP=*|FallbackNTP=*)', line: 'FallbackNTP=ntp.ubuntu.com 3.ubuntu.pool.ntp.org' }"
      - "{ regexp: '^(#RootDistanceMaxSec=*|RootDistanceMaxSec=*)', line: 'RootDistanceMaxSec=1' }"
    failed_when: no
    when: timesynconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - starting systemd-timesyncd.service 
    service:
      name: systemd-timesyncd.service
      state: started
    when: timesynconf.stdout.find("FAILED") != -1   
    failed_when: no
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.2 - starting systemd-timesyncd.service 
    command: timedatectl set-ntp true 
    when: timesynconf.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - timesynconf
      - 2.2.1.2
      - two
      - remedy
      - all

  - name: 2.2.1.3 - Fetch the chrony value from ansible facts
    shell: echo "{{ ansible_local.chrony_2213_audit }}" 
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all 
 
  - name: 2.2.1.3 - Removing chrony service
    apt:
      name: ntp
      purge: yes
      state: absent
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all

  - name: 2.2.1.3 - stop and mask systemd-timesyncd service
    systemd:
      name: systemd-timesyncd
      masked: yes
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all
 
  - name: 2.2.1.3 - configuring the chrony file
    lineinfile:
      path: /etc/chrony/chrony.conf
      state: present
      line: server {{ remote_server_chrony_ubuntu20 }}
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all
            
  - name: 2.2.1.3 - configuring the chrony file
    lineinfile:
      path: /etc/chrony/chrony.conf
      state: present
      line: user _chrony
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - chrony
      - 2.2.1.3
      - two
      - remedy
      - all
      
  - name: 2.2.1.4 - Fetching the ntp value from ansible facts
    shell: echo "{{ ansible_local.ntp_2214_audit }}" 
    register: ntp
    ignore_errors: True
    become: yes
    tags:
      - ntp
      - 2.2.1.4
      - two
      - remedy
      - all

  - name: 2.2.1.4 - Uninstalling chrony
    apt:
      name: chrony
      purge: yes
      state: absent
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.4
      - two
      - remedy
      - all

  - name: 2.2.1.4 - masking systemd-timesyncd
    systemd:
      name: systemd-timesyncd
      masked: yes
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.4
      - two
      - remedy
      - all

  - name: 2.2.1.4 - Adding restrict lines and Editing server or pool lines
    lineinfile:
       path: /etc/ntp.conf
       state: present
       line: "{{item}}"
    with_items:
      - "restrict -4 default kod nomodify notrap nopeer noquery"
      - "restrict -6 default kod nomodify notrap nopeer noquery"
      - "server {{ remote_server_ntp_ubuntu20 }}"
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.4
      - two
      - remedy
      - all

  - name: 2.2.1.4 - Configure ntp to run as the ntp user
    lineinfile:
       path: /etc/init.d/ntp
       state: present
       regexp: '^(RUNASUSER=*)'
       line: RUNASUSER=ntp
    failed_when: no
    when: ntp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ntp
      - 2.2.1.4
      - two
      - remedy
      - all

  - name: 2.2.2 - Fetch the xorg value from ansible facts 
    shell: echo "{{ ansible_local.xorg_222_audit }}" 
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all
 
  - name: 2.2.2 - Removing X Windows System packages
    apt:
      name: xserver-xorg*
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - xorg
      - 2.2.2
      - two
      - remedy
      - all
 
  - name: 2.2.3 - Fetch the avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_223_audit }}" 
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all
 
  - name: 2.2.3 - Removing avahi-daemon service
    apt:
      name: avahi-daemon
      state: absent
      purge: yes
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - avahi
      - 2.2.3
      - two
      - remedy
      - all
  
  - name: 2.2.4 - Fetch the cups value from ansible facts
    shell: echo "{{ ansible_local.cups_224_audit }}" 
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all
  
  - name: 2.2.4 - Removing service cups
    apt:
      name: cups
      state: absent
    failed_when: no
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cups
      - 2.2.4
      - two
      - remedy
      - all

  - name: 2.2.5 - Fetch the dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_225_audit }}" 
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.5 - Removing isc-dhcp-server service
    apt:
      name: isc-dhcp-server 
      state: absent
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dhcp
      - 2.2.5
      - two
      - remedy
      - all

  - name: 2.2.6 - Fetch the ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_226_audit }}" 
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all
  
  - name: 2.2.6 - Removing slapd service
    apt:
      name: slapd
      state: absent
      purge: yes
    failed_when: no
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldap
      - 2.2.6
      - two
      - remedy
      - all

  - name: 2.2.7 - Fetch the nfs value from ansible facts
    shell: echo "{{ ansible_local.nfs_227_audit }}" 
    register: nfs
    ignore_errors: True
    become: yes
    tags:
      - nfs
      - 2.2.7
      - two
      - remedy
      - all
 
  - name: 2.2.7 - Removing nfs Network File System 
    apt:
      name: rpcbind
      state: absent
    failed_when: no
    when: nfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfs
      - 2.2.7
      - two
      - remedy
      - all

  - name: 2.2.8 - Fetch the dns value from ansible facts
    shell: echo "{{ ansible_local.dns_228_audit }}" 
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - remedy
      - all
 
  - name: 2.2.8 - Disable DNS server
    apt: 
      name: bind9
      state: absent
    failed_when: no
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dns
      - 2.2.8
      - two
      - remedy
      - all

  - name: 2.2.9 - Fetch the ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_229_audit }}" 
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - remedy
      - all
 
  - name: 2.2.9 - Removing vsftpd
    apt: 
      name: vsftpd
      state: absent
    failed_when: no
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ftp
      - 2.2.9
      - two
      - remedy
      - all

  - name: 2.2.10 -  Fetch the http value from ansible facts
    shell: echo "{{ ansible_local.http_2210_audit }}" 
    register: http
    ignore_errors: True
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - remedy
      - all
  
  - name: 2.2.10 - Removing apache
    apt:
      name: apache2
      state: absent
    failed_when: no
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - http
      - 2.2.10
      - two
      - remedy
      - all

  - name: 2.2.11 - Fetch the imap value from ansible facts
    shell: echo "{{ ansible_local.imap_2211_audit }}" 
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - remedy
      - all
  
  - name: 2.2.11 - Removing dovecot-imapd 
    apt:
      name: dovecot-imapd 
      state: absent
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - remedy
      - all

  - name: 2.2.11 - Removing dovecot-pop3d
    apt:
      name: dovecot-pop3d
      state: absent
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - imap
      - 2.2.11
      - two
      - remedy
      - all

  - name: 2.2.12 - Fetch the samba value from ansible facts
    shell: echo "{{ ansible_local.samba_2212_audit }}" 
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - remedy
      - all
  
  - name: 2.2.12 - Removing samba service
    apt:
      name: samba
      state: absent
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - samba
      - 2.2.12
      - two
      - remedy
      - all

  - name: 2.2.13 - Fetch the proxy value from ansible facts
    shell: echo "{{ ansible_local.proxy_2213_audit }}" 
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - proxy
      - 2.2.13
      - two
      - remedy
      - all
  
  - name: 2.2.13 - Removing squid server
    apt:
      name: squid
      started: absent
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - proxy
      - 2.2.13      
      - two
      - remedy
      - all

  - name: 2.2.14 - Fetch the snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_2214_audit }}" 
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - snmp
      - 2.2.14
      - two
      - remedy
      - all
  
  - name: 2.2.14 - Removing snmpd server
    apt:
      name: snmpd
      state: absent
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - snmp
      - 2.2.14      
      - two
      - remedy
      - all

  - name: 2.2.15 -  Fetch the mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2215_audit }}" 
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all
  
  - name: 2.2.15 - configuring the mail file
    lineinfile:
      path: /etc/exim4/update-exim4.conf.conf
      state: present
      line: "{{item}}"
    with_items:
      - "dc_eximconfig_configtype='local'"
      - "dc_local_interfaces='127.0.0.1 ; ::1'"
      - "dc_readhost=''"
      - "dc_relay_domains=''"
      - "dc_minimaldns='false'"
      - "dc_relay_nets=''"
      - "dc_smarthost=''"
      - "dc_use_split_config='false'"
      - "dc_hide_mailname=''"
      - "dc_mailname_in_oh='true'"
      - "dc_localdelivery='mail_spool'"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.15 - Restarting exim4
    service:
      name: exim4
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - mail
      - 2.2.15
      - two
      - remedy
      - all

  - name: 2.2.16 -  Fetch the rsync value from ansible facts
    shell: echo "{{ ansible_local.rsync_2216_audit }}" 
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - rsync
      - 2.2.16
      - two
      - remedy
      - all
  
  - name: 2.2.16 - Removing rsync service 
    apt:
      name: rsync
      state: absent
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsync
      - 2.2.16     
      - two
      - remedy
      - all

  - name: 2.2.17 -  Fetch the nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2217_audit }}" 
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - nis
      - 2.2.17
      - two
      - remedy
      - all
  
  - name: 2.2.17 - Removing nis server
    apt:
      name: nis
      state: absent
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nis
      - 2.2.17     
      - two
      - remedy
      - all

  - name: 2.3.1 - Fetch the nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}" 
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.1 - Uninstalling nis
    apt:
      name: nis
      state: absent
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nisc
      - 2.3.1
      - two
      - remedy
      - all

  - name: 2.3.2 - Fetch the rshc value from ansible facts
    shell: echo "{{ ansible_local.rshc_232_audit }}" 
    register: rshc
    ignore_errors: True
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all

  - name: 2.3.2 - Uninstalling rsh
    apt:
      name: rsh-client
      state: absent
    failed_when: no
    when: rshc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rshc
      - 2.3.2
      - two
      - remedy
      - all

  - name: 2.3.3 - Fetch the talkc value from ansible facts
    shell: echo "{{ ansible_local.talkc_233_audit }}" 
    register: talkc
    ignore_errors: True
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.3 - Uninstalling talk
    apt:
      name: talk
      state: absent
    failed_when: no
    when: talkc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - talkc
      - 2.3.3
      - two
      - remedy
      - all

  - name: 2.3.4 - Fetch the telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_234_audit }}" 
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all

  - name: 2.3.4 - Uninstalling telnet
    apt:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - telnetc
      - 2.3.4
      - two
      - remedy
      - all

  - name: 2.3.5 - Fetch the ldapc value from ansible facts
    shell: echo "{{ ansible_local.ldapc_235_audit }}" 
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all

  - name: 2.3.5 - Uninstalling ldap-utils
    apt:
      name: ldap-utils
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ldapc
      - 2.3.5
      - two
      - remedy
      - all

  - name: 2.3.6 - Fetch the rpc value from ansible facts
    shell: echo "{{ ansible_local.rpc_236_audit }}" 
    register: rpc
    ignore_errors: True
    become: yes
    tags:
      - rpc
      - 2.3.6
      - two
      - remedy
      - all

  - name: 2.3.6 - Removing rpcbind
    apt:
      name: rpcbind
      state: absent
    failed_when: no
    when: rpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rpc
      - 2.3.6
      - two
      - remedy
      - all

  - name: 2.4 - Fetch the nonessenserv value from ansible facts 
    shell: echo "{{ ansible_local.nonessenserv_24_audit }}" 
    register: nonessenserv
    ignore_errors: True
    become: yes
    tags:
      - nonessenserv
      - '2.4'
      - two
      - remedy
      - all

  - name: 2.4 - Remove Package
    apt:
      name: "{{ item }}"
      state: absent
    loop: "{{ nonessen_service_ubuntu20.split(',') }}"
    when: nonessenserv.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - nonessenserv
      - '2.4'
      - two
      - remedy
      - all

  - name: 3.1.1 - Fetch the ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_311_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - remedy
      - all
      
  - name: 3.1.1 - configuring ipv6disable file
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& ipv6.disable=1/' /etc/default/grub
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - remedy
      - all
      
  - name: 3.1.1 -  update the grub2 configuration
    command: update-grub
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - 3.1.1
      - three
      - remedy
      - all

  - name: 3.1.2 - Ensure wireless interfaces are disabled
    shell: echo "{{ ansible_local.wireless_312_audit }}"
    register: wireless
    ignore_errors: True
    become: yes
    tags:
      - wireless
      - '3.1.2'
      - three
      - remedy
      - all

#  - name: 3.1.2 - Disable any wireless interfaces
#    shell: "ip link show up | grep '[0-9][aAa-zZz][0-9]' | awk -F: {'print $2'} | cut -d' ' -f2 | wc -l"
#    register: iplink
#    when: wireless.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - wireless
#      - '3.1.2'
#      - three
#      - remedy
#      - all

#  - name: 3.1.2 - Disable any wireless interfaces
#    shell: "wifi=$(ip link show up | cut -d: -f2 | grep '[aAa-zZz][0-9]' | cut -d' ' -f2) && sudo ip link set $wifi down"
#    when:
#      - wireless.stdout.find("FAILED") != -1
#      - iplink.stdout != "0"
    become: yes
#    tags:
#      - wireless
#      - '3.1.2'
#      - three
#      - remedy
#      - all

  - name: 3.2.1 - Fetch the packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_321_audit }}" 
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.2.1
      - three
      - remedy
      - all
      
  - name: 3.2.1 - configuring packetredirect file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items: 
      - {regexp: "^(net.ipv4.conf.all.send_redirects*|#net.ipv4.conf.all.send_redirects*)", line: "net.ipv4.conf.all.send_redirects=0"}
      - {regexp: "^(net.ipv4.conf.default.send_redirects*|#net.ipv4.conf.default.send_redirects*)", line: "net.ipv4.conf.default.send_redirects=0"}
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.1
      - three
      - remedy
      - all
      
  - name: 3.2.1 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.send_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.send_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.2.1
      - three
      - remedy
      - all
      
  - name: 3.2.2 - Fetch the ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_322_audit }}" 
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.2.2
      - three
      - remedy
      - all
      
  - name: 3.2.2 - configuring ipforward file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^(net.ipv4.ip_forward*|#net.ipv4.ip_forward*)", line: "net.ipv4.ip_forward=0"}
      - {regexp: "^(net.ipv6.conf.all.forwarding*|#net.ipv6.conf.all.forwarding*)", line: "net.ipv6.conf.all.forwarding=0"}
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.2
      - three
      - remedy
      - all

  - name: 3.2.2 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.2.2
      - three
      - remedy
      - all 
 
  - name: 3.3.1 - Fetch the routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_331_audit }}" 
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all
      
  - name: 3.3.1 - configuring routedpacket file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items: 
      - {regexp: "^net.ipv4.conf.all.accept_source_route*", line: "net.ipv4.conf.all.accept_source_route=0"}
      - {regexp: "^net.ipv4.conf.default.accept_source_route*", line: "net.ipv4.conf.default.accept_source_route=0"}
      - {regexp: "^net.ipv6.conf.all.accept_source_route*", line: "net.ipv6.conf.all.accept_source_route=0"}
      - {regexp: "^net.ipv6.conf.default.accept_source_route*", line: "net.ipv6.conf.default.accept_source_route=0"}
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all
      
  - name: 3.3.1 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.accept_source_route 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.all.accept_source_route 
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.3.1
      - three
      - remedy
      - all
      
  - name: 3.3.2 - Fetch the icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_332_audit }}" 
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all
      
  - name: 3.3.2 - configuring icmp file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.accept_redirects*", line: "net.ipv4.conf.all.accept_redirects=0"}
      - {regexp: "^net.ipv4.conf.default.accept_redirects*", line: "net.ipv4.conf.default.accept_redirects=0"}
      - {regexp: "^net.ipv6.conf.all.accept_redirects*", line: "net.ipv6.conf.all.accept_redirects=0"}
      - {regexp: "^net.ipv6.conf.default.accept_redirects*", line: "net.ipv6.conf.default.accept_redirects=0"}
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all
      
  - name: 3.3.2 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.3.2
      - three
      - remedy
      - all

  - name: 3.3.3 - Fetch the secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_333_audit }}" 
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.3.3
      - three
      - remedy
      - all
      
  - name: 3.3.3 - configuring secureicmp file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.secure_redirects*", line: "net.ipv4.conf.all.secure_redirects=0"}
      - {regexp: "^net.ipv4.conf.default.secure_redirects*", line: "net.ipv4.conf.default.secure_redirects=0"}
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - secureicmp
      - 3.3.3
      - three      
      - remedy
      - all
      
  - name: 3.3.3 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items: 
      - name: net.ipv4.conf.all.secure_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.secure_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - secureicmp
      - 3.3.3
      - three      
      - remedy
      - all

  - name: 3.3.4 - Fetch the suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_334_audit }}" 
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all
      
  - name: 3.3.4 - configuring suspicious file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.log_martians*", line: "net.ipv4.conf.all.log_martians=1"}
      - {regexp: "^net.ipv4.conf.default.log_martians*", line: "net.ipv4.conf.default.log_martians=1"}
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all
      
  - name: 3.3.4 - set the active kernel parameters
    sysctl: "{{ item }}"
    with_items: 
      - name: net.ipv4.conf.all.log_martians 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.log_martians
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.3.4
      - three
      - remedy
      - all
      
  - name: 3.3.5 - Fetch the broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_335_audit }}" 
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all
      
  - name: 3.3.5 - configuring broadcasticmp file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_echo_ignore_broadcasts*"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all
      
  - name: 3.3.5 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.3.5
      - three
      - remedy
      - all
      
  - name: 3.3.6 - Fetch the bogusicmp value from ansible facts
    shell: echo "{{ ansible_local.bogusicmp_336_audit }}" 
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.3.6
      - three
      - remedy
      - all
      
  - name: 3.3.6 - configuring bogusicmp file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_ignore_bogus_error_responses*"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6      
      - three
      - remedy
      - all
      
  - name: 3.3.6 - set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.3.6      
      - three
      - remedy
      - all
      
  - name: 3.3.7 - Fetch the reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_337_audit }}" 
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all
      
  - name: 3.3.7 - configuring reversepathfilter file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.rp_filter*", line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^net.ipv4.conf.default.rp_filter*", line: "net.ipv4.conf.default.rp_filter=1"}
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all
      
  - name: 3.3.7 - set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.3.7
      - three
      - remedy
      - all
      
  - name: 3.3.8 - Fetch the tcpsyncookies value from ansible facts
    shell: echo "{{ ansible_local.tcpsyncookies_338_audit }}" 
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all
    
  - name: 3.3.8 - configuring tcpsyncookies file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.tcp_syncookies*"
      line: "net.ipv4.tcp_syncookies=1"
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all
      
  - name: 3.3.8 - set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.3.8
      - three
      - remedy
      - all
      
  - name: 3.3.9 - Fetch the ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_339_audit }}" 
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all
      
  - name: 3.3.9 - configuring ipv6router file
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv6.conf.all.accept_ra*", line: "net.ipv6.conf.all.accept_ra=0"}
      - {regexp: "^net.ipv6.conf.default.accept_ra*", line: "net.ipv6.conf.default.accept_ra=0"}
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all
      
  - name: 3.3.9 - set the active kernel parameters
    sysctl: "{{item}}"
    with_items:
      - name: net.ipv6.conf.all.accept_ra 
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.default.accept_ra
        value: '0'
        sysctl_set: yes        
      - name: net.ipv6.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.3.9
      - three
      - remedy
      - all

  - name: 3.4.1 - Fetch the dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_341_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.4.1
      - three
      - remedy
      - all 
  
  - name: 3.4.1 - Creating dccp configuration file
    lineinfile:
      path: /etc/modprobe.d/dccp.conf
      state: present
      line: "install dccp /bin/true"
      create: yes
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.4.1
      - three
      - remedy
      - all

  - name: 3.4.2 - Fetch the sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_342_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.4.2
      - three
      - remedy
      - all

  - name: 3.4.2 - Creating sctp configuration file
    lineinfile:
      path: /etc/modprobe.d/sctp.conf
      state: present
      line: "install sctp /bin/true"
      create: yes
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.4.2
      - three
      - remedy
      - all
      
  - name: 3.4.3 - Fetch the rds value from ansible facts
    shell: echo "{{ ansible_local.rds_343_audit }}"
    register: rds
    ignore_errors: True
    become: yes
    tags:
      - rds
      - 3.4.3
      - three
      - remedy
      - all

  - name: 3.4.3 - Creating rds configuration file
    lineinfile:
      path: /etc/modprobe.d/rds.conf
      state: present
      line: "install rds /bin/true"
      create: yes
    when: rds.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rds
      - 3.4.3
      - three
      - remedy
      - all 
      
  - name: 3.4.4 - Fetch the tipc value from ansible facts
    shell: echo "{{ ansible_local.tipc_344_audit }}"
    register: tipc
    ignore_errors: True
    become: yes
    tags:
      - tipc
      - 3.4.4
      - three
      - remedy
      - all

  - name: 3.4.4 - Creating tipc configuration file
    lineinfile:
      path: /etc/modprobe.d/tipc.conf
      state: present
      line: "install tipc /bin/true"
      create: yes
    when: tipc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tipc
      - 3.4.4
      - three
      - remedy
      - all

  - name: 3.5.1.1 - Fetch the firewallpack value from ansible facts
    shell: echo "{{ ansible_local.firewallpack_3511_audit }}"
    register: firewallpack
    ignore_errors: True
    become: yes
    tags:
      - firewallpack
      - 3.5.1.1
      - three
      - remedy
      - all
      
  - name: 3.5.1.1 - Install firewallpack
    apt: name=ufw  state=present
    failed_when: no
    when: firewallpack.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - firewallpack
      - 3.5.1.1
      - three
      - remedy
      - all
      
  - name: 3.5.1.2 - Fetch the iptablespersist value from ansible facts 
    shell: echo "{{ ansible_local.iptablespersist_3512_audit }}" 
    register: iptablespersist
    ignore_errors: True
    become: yes
    tags:
      - iptablespersist
      - 3.5.1.2
      - three
      - remedy
      - all

  - name: 3.5.1.2 - Removing the iptables-persistent package
    apt:
      name: iptables-persistent
      state: absent
      purge: yes
    when: iptablespersist.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablespersist
      - 3.5.1.2
      - three
      - remedy
      - all
      
  - name: 3.5.1.3 - Fetch the firewallenb value from ansible facts
    shell: echo "{{ ansible_local.firewallenb_3513_audit }}"
    register: firewallenb
    ignore_errors: True
    become: yes
    tags:
      - firewallenb
      - 3.5.1.3
      - three
      - remedy
      - all
      
  - name: 3.5.1.3 - Enable ufw service
    systemd:
      name: ufw    
      enabled: yes
    failed_when: no
    when: firewallenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallenb
      - 3.5.1.3
      - three
      - remedy
      - all
      
  - name: 3.5.1.4 - Fetch the nfwloopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.nfwloopbacktraffic_3514_audit }}"
    register: nfwloopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - nfwloopbacktraffic
      - 3.5.1.4
      - three
      - remedy
      - all
      
  - name: 3.5.1.4 - Implement the loopback rules
    command: "{{item}}"
    with_items:
      - ufw allow in on lo
      - ufw allow out from lo 
      - ufw deny in from 127.0.0.0/8
      - ufw deny in from ::1
    failed_when: no
    when: nfwloopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfwloopbacktraffic
      - 3.5.1.4
      - three
      - remedy
      - all

  - name: 3.5.1.5 - Fetch the nfwoutbound value from ansible facts
    shell: echo "{{ ansible_local.nfwoutbound_3515_audit }}"
    register: nfwoutbound
    ignore_errors: True
    become: yes
    tags:
      - nfwoutbound
      - 3.5.1.5
      - three
      - remedy
      - all

  - name: 3.5.1.5 - checking if outbound is present
    shell: |
        if [ $(ufw status numbered | grep "Anywhere on all" | wc -l) -eq 0 ]; then
           echo "add the outbound rule"
        else
           echo "outbound is present"        
        fi
    when: nfwoutbound.stdout.find("FAILED") != -1
    register: nfwoutbound_result
    become: yes
    tags:
      - nfwoutbound
      - 3.5.1.5
      - three
      - remedy
      - all
      
  - debug: msg="{{nfwoutbound_result.stdout}}"
    when: 
      - nfwoutbound.stdout.find("FAILED") != -1
      - nfwoutbound_result.stdout == "add the outbound rule"
    become: yes
    tags:
      - nfwoutbound
      - 3.5.1.5
      - three
      - remedy
      - all

  - name: 3.5.1.6 - Fetch the nfwfirewallrules value from ansible facts
    shell: echo "{{ ansible_local.nfwfirewallrules_3516_audit }}"
    register: nfwfirewallrules
    ignore_errors: True
    become: yes
    tags:
      - nfwfirewallrules
      - 3.5.1.6
      - three
      - remedy
      - all

  - name: 3.5.1.6 - creating a backup directory
    file:
      path: /etc/ansible/backup/ufw
      state: directory
      mode: '0750'
    when: nfwfirewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfwfirewallrules
      - 3.5.2.5
      - three
      - remedy
      - all

  - name: 3.5.1.6 - backing up the ufw rules
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      remote_src: yes
    with_items:
      - { src: '/etc/ufw/user.rules', dest: '/etc/ansible/backup/ufw/user_fir.rules'
      - { src: '/etc/ufw/user6.rules', dest '/etc/ansible/backup/ufw/user6_fir.rules'
    when: nfwfirewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfwfirewallrules
      - 3.5.2.5
      - three
      - remedy
      - all
      
  - name: 3.5.1.6 - configuring firewall rule
    shell: ufw allow in "{{item}}"
    loop: "{{ nfwfirewallrules_ubuntu20.split(',') }}"
    when: nfwfirewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfwfirewallrules
      - 3.5.1.6
      - three
      - remedy
      - all

  - name: 3.5.1.7 - Fetch the nfwfirewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.nfwfirewallpolicy_3517_audit }}"
    register: nfwfirewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all

  - name: 3.5.1.7 - checking if outbound is present
    shell: |
        if [ $(ufw status numbered | grep "Anywhere on all" | wc -l) -eq 0 ]; then
           echo "outbound is not present"
        else
           echo "outbound is present"        
        fi
    when: nfwfirewallpolicy.stdout.find("FAILED") != -1 
    register: nfwfirewallpol
    become: yes
    tags:
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all 

  - debug: msg="add the outbound rule"
    when: 
      - nfwfirewallpolicy.stdout.find("FAILED") != -1 
      - nfwfirewallpol.stdout == "outbound is not present"
    become: yes
    tags:
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all

  - name: 3.5.1.7 - creating a backup directory
    file:
      path: /etc/ansible/backup/ufw
      state: directory
      mode: '0750'
    when: 
      - nfwfirewallpolicy.stdout.find("FAILED") != -1 
      - nfwfirewallpol.stdout == "outbound is present"
    become: yes
    tags:
      - nfwfirewallrules
      - 3.5.1.7
      - three
      - remedy
      - all

  - name: 3.5.1.7 - backing up the ufw rules
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      remote_src: yes
    with_items:
      - { src: '/etc/ufw/user.rules', dest: '/etc/ansible/backup/ufw/user.rules'
      - { src: '/etc/ufw/user6.rules', dest '/etc/ansible/backup/ufw/user6.rules'
    when: 
      - nfwfirewallpolicy.stdout.find("FAILED") != -1 
      - nfwfirewallpol.stdout == "outbound is present"
    become: yes
    tags:
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all
      
  - name: 3.5.1.7 - adding inbound rule
    shell: ufw allow in {{ item }}
    loop: "{{ ufw_port_ubuntu20.split(',') }}"
    when: 
      - nfwfirewallpolicy.stdout.find("FAILED") != -1 
      - nfwfirewallpol.stdout == "outbound is present"
    become: yes
    tags:
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all 

  - name: 3.5.1.7 - denying firewall policy
    shell: '{{ item }}'
    with_items:
      - ufw default deny incoming
      - ufw default deny outgoing
      - ufw default deny routed
    when: 
      - nfwfirewallpolicy.stdout.find("FAILED") != -1 
      - nfwfirewallpol.stdout == "outbound is present"
    become: yes
      - nfwfirewallpolicy
      - 3.5.1.7
      - three
      - remedy
      - all 
      
  - name: 3.5.2.1 - Fetch the nftablesins value from ansible facts
    shell: echo "{{ ansible_local.nftablesins_3521_audit }}"
    register: nftablesins
    ignore_errors: True
    become: yes
    tags:
      - nftablesins
      - 3.5.2.1
      - three
      - remedy
      - all
      
  - name: 3.5.2.1 - Install nftables
    apt:
      name: nftables
      state: present
    failed_when: no
    when: nftablesins.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - nftablesins
      - 3.5.2.1
      - three
      - remedy
      - all

  - name: 3.5.2.2 - Fetch the firewalldisable value from ansible facts
    shell: echo "{{ ansible_local.firewalldisable_3522_audit }}"
    register: firewalldisable
    ignore_errors: True
    become: yes
    tags:
      - firewalldisable
      - 3.5.2.2
      - three
      - remedy
      - all

  - name: 3.5.2.2 - Remove ufw
    apt:
      name: ufw
      state: absent
    failed_when: no
    when: firewalldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewalldisable
      - 3.5.2.2
      - three
      - remedy
      - all
      
  - name: 3.5.2.3 - Fetch the iptablesflush value from ansible facts
    shell: echo "{{ ansible_local.iptablesflush_3523_audit }}"
    register: iptablesflush
    ignore_errors: True
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all

  - name: 3.5.2.3 - Creating a directory
    file:
      path: /etc/ansible/backup/iptablesflush
      state: directory
      mode: '0750'
      recurse: yes
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all

  - name: 3.5.2.3 - Saving iptablesrules
    shell: "{{ item }}"
    with_items:
      - 'iptables-save >> /etc/ansible/backup/iptablesflush/iptables_rules_{{ansible_hostname}}'
      - 'ip6tables-save >> /etc/ansible/backup/iptablesflush/ip6tables_rules_{{ansible_hostname}}'
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all
      
  - name: 3.5.2.3 - Flushing iptables and ip6tables
    command: "{{ item }}"
    with_items:
      - iptables -F 
      - ip6tables -F 
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.5.2.3
      - three
      - remedy
      - all
  
  - name: 3.5.2.4 - Fetch the tablexists value from ansible facts
    shell: echo "{{ ansible_local.tablexists_3524_audit }}"
    register: tablexists
    ignore_errors: True
    become: yes
    tags:
      - tablexists
      - 3.5.2.4
      - three
      - remedy
      - all
      
  - name: 3.5.2.4 - create a table in nftables
    command: 'nft create table inet "{{ table_name_ubuntu20 }}"'
    failed_when: no
    when: tablexists.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tablexists
      - 3.5.2.4
      - three
      - remedy
      - all

  - name: 3.5.2.5 - Fetch the basechains value from ansible facts
    shell: echo "{{ ansible_local.basechains_3525_audit }}"
    register: basechains
    ignore_errors: True
    become: yes
    tags:
      - basechains
      - 3.5.2.5
      - three
      - remedy
      - all
      
  - name: 3.5.2.5 - create the base chains
    command: '{{ item }}'
    with_items:
      - nft create chain inet {{ table_name_bc_ubuntu20 }} {{ base_chain_name_input_ubuntu20 }} { type filter hook input priority 0 \; }
      - nft create chain inet {{ table_name_bc_ubuntu20 }} {{ base_chain_name_output_ubuntu20 }} { type filter hook output priority 0 \; }
      - nft create chain inet {{ table_name_bc_ubuntu20 }} {{ base_chain_name_forward_ubuntu20 }} { type filter hook forward priority 0 \; }
    failed_when: no
    when: basechains.stdout.find("FAILED") != -1
    become: yes
    tags:
      - basechains
      - 3.5.2.5
      - three
      - remedy
      - all

  - name: 3.5.2.6 - Fetch the nfloopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.nfloopbacktraffic_3526_audit }}"
    register: nfloopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all
      
  - name: 3.5.2.6 - Implement the loopback rules
    command: "{{ item }}"
    with_items: 
      - nft add rule inet filter input iif lo accept
      - nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop
    failed_when: no
    when: nfloopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.6 - Checking if ipv6 is enabled or disabled
    shell: |
        if [ $(cat /proc/cmdline | grep ipv6.disable=1 | wc -l) -eq 0 ] && [ $(sysctl net.ipv6.conf.all.disable_ipv6 | grep 1 | wc -l) -eq 0 ]; then
          echo "enabled"
        else
          echo "disabled"
        fi
    register: ip6_en_dis_nfloopbacktraffic
    become: yes
    when: nfloopbacktraffic.stdout.find("FAILED") != -1
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.6 - adding loopback rules for ipv6
    shell: 'nft add rule inet filter input ip6 saddr ::1 counter drop'
    become: yes
    when:
      - nfloopbacktraffic.stdout.find("FAILED") != -1
      - ip6_en_dis_nfloopbacktraffic.stdout == "enabled"
    tags:
      - nfloopbacktraffic
      - 3.5.2.6
      - three
      - remedy
      - all

  - name: 3.5.2.7 - Fetching the nfoutbound value from ansible facts
    shell: echo "{{ ansible_local.nfoutbound_3527_audit }}"
    register: nfoutbound
    ignore_errors: True
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - name: 3.5.2.7 - Checking out if outbound connections and establish connections
    shell: |
       if [ $(sudo nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ] || [ $(sudo nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ]; then
            echo "not present"
       else
            echo "present"
            exit 1
       fi
    register: nftables_outbound
    failed_when: no
    when: nfoutbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - debug: msg="Add the outbound rules in nftables"
    when:
      - nfoutbound.stdout.find("FAILED") != -1
      - nftables_outbound.stdout == "not present"
    become: yes
    tags:
      - nfoutbound
      - 3.5.2.7
      - three
      - remedy
      - all

  - name: 3.5.2.8 - Fetch the nffirewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.nffirewallpolicy_3528_audit }}"
    register: nffirewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.8
      - three
      - remedy
      - all

  - name: 3.5.2.9 - creating a directory iptables_nft
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - saving the existing nftables ruleset
    shell: '{{ item }}'
    with_items:
      - nft list ruleset > /etc/ansible/backup/iptables_nft/nft_rules
      - sed -i '1s/^/#!\/sbin\/nft -f\nflush ruleset\n/' /etc/ansible/backup/iptables_nft/nft_rules
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - adding the inbound rules before droping the policy
    shell: nft add rule inet {{ table_name_ubuntu20 }} input {{ item.split(' ')[0] }} dport {{ item.split(' ')[1] }} accept
    loop: "{{ inbound_nft_ubuntu20.split(',') }}"
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - Implementing a default DROP policy
    shell: '{{item}}'
    with_items:
      - nft chain {{ table_family_ubuntu20 }} {{ table_name_nf_ubuntu20 }} input { policy drop \; }
      - nft chain {{ table_family_ubuntu20 }} {{ table_name_nf_ubuntu20 }} output { policy drop \; }
      - nft chain {{ table_family_ubuntu20 }} {{ table_name_nf_ubuntu20 }} forward { policy drop \; }
    failed_when: no
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.5.2.9
      - three
      - remedy
      - all

  - name: 3.5.2.9 - Fetch the nftablesenb value from ansible facts
    shell: echo "{{ ansible_local.nftablesenb_3529_audit }}"
    register: nftablesenb
    ignore_errors: True
    become: yes
    tags:
      - nftablesenb
      - 3.5.2.9
      - three
      - remedy
      - all
      
  - name: 3.5.2.9 - Enable nftables service
    service:    
      name: nftables
      enabled: yes
    failed_when: no
    when: nftablesenb.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - nftablesenb
      - 3.5.2.9
      - three
      - remedy
      - all
      
  - name: 3.5.2.10 - Fetch the nftablesrules value from ansible facts
    shell: echo "{{ ansible_local.nftablesrules_35210_audit }}"
    register: nftablesrules
    ignore_errors: True
    become: yes
    tags:
      - nftablesrules
      - 3.5.2.10
      - three
      - remedy
      - all
      
  - name: 3.5.2.10 - configuring nftablesrules file
    lineinfile:
      path: /etc/nftables.conf
      line: 'include "/etc/nftables.rules"'
      state: present
    failed_when: no
    when: nftablesrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablesrules
      - 3.5.2.10
      - three
      - remedy
      - all

  - name: 3.5.3.1.1 Fetch the iptablesins value from ansible facts
    shell: echo "{{ ansible_local.iptablesins_35311_audit }}" 
    register: iptablesins
    ignore_errors: True
    become: yes
    tags:
      - iptablesins
      - 3.5.3.1.1
      - three
      - remedy
      - all

  - name: 3.5.3.1.1 - Install iptables and iptables-persistent 
    apt:
      name: 
        - iptables
        - iptables-persistent
      state: present
    when: iptablesins.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesins
      - 3.5.3.1.1
      - three
      - remedy
      - all
      
  - name: 3.5.3.1.2 - Fetch the nftables value from ansible facts
    shell: echo "{{ ansible_local.nftables_35312_audit }}"
    register: nftables
    ignore_errors: True
    become: yes
    tags:
      - nftables
      - 3.5.3.1.2
      - three
      - remedy
      - all
      
  - name: 3.5.3.1.2 - Remove nftables
    apt:    
      name: nftables
      state: absent
    failed_when: no
    when: nftables.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - nftables
      - 3.5.3.1.2
      - three
      - remedy
      - all
      
  - name: 3.5.3.1.3 - Fetch the firewalldis value from ansible facts
    shell: echo "{{ ansible_local.firewalldis_35313_audit }}"
    register: firewalldis
    ignore_errors: True
    become: yes
    tags:
      - firewalldis
      - 3.5.3.1.3
      - three
      - remedy
      - all
      
  - name: 3.5.3.1.3 - stop ufw
    service: 
      name: ufw  
      enabled: no
    failed_when: no
    when: firewalldis.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - firewalldis
      - 3.5.3.1.3
      - three
      - remedy
      - all

  - name: 3.5.3.2.2 - Fetch the loopbacktrafficip value from ansible facts
    shell: echo "{{ ansible_local.loopbacktrafficip_35322_audit }}"
    register: loopbacktrafficip
    ignore_errors: True
    become: yes
    tags:
      - loopbacktrafficip
      - 3.5.3.2.2
      - three
      - remedy
      - all
      
  - name: 3.5.3.2.2 - Implement the loopback rules
    command: "{{item}}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT 
      - iptables -A OUTPUT -o lo -j ACCEPT 
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktrafficip.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktrafficip
      - 3.5.3.2.2
      - three
      - remedy
      - all

  - name: 3.5.3.2.3 - Fetching the outboundip value from ansible facts
    shell: echo "{{ ansible_local.outboundip_35323_audit }}"
    register: outboundip
    ignore_errors: True
    become: yes
    tags:
      - outboundip
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - name: 3.5.3.2.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outboundip.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outboundip.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.5.3.2.3
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_35324_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.4 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_ubuntu20.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.5.3.2.4
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_35321_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_ubuntu20.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.2.1 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.5.3.2.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.2 - Fetch the ipv6loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.ipv6loopbacktraffic_35332_audit }}"
    register: ipv6loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.5.3.3.2
      - three
      - remedy
      - all
      
  - name: 3.5.3.3.2 - Implement the loopback rules
    command: "{{item}}"
    with_items:
      - ip6tables -A INPUT -i lo -j ACCEPT
      - ip6tables -A OUTPUT -o lo -j ACCEPT
      - ip6tables -A INPUT -s ::1 -j DROP
    failed_when: no
    when: ipv6loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.5.3.3.2
      - three
      - remedy
      - all

  - name: 3.5.3.3.3 - Fetch the ipv6outbound value from ansible facts
    shell: echo "{{ ansible_local.ipv6outbound_35333_audit }}"
    register: ipv6outbound
    ignore_errors: True
    become: yes
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - name:  3.5.3.3.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_outbound
    failed_when: no
    when: ipv6outbound.stdout.find("FAILED") != -1
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6outbound.stdout.find("FAILED") != -1
      - ip6tables_outbound.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6outbound
      - 3.5.3.3.3
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Fetch the ipv6firewallrules value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallrules_35334_audit }}"
    register: ipv6firewallrules
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - saving the rules
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_fir_rules
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.4 - Adding the ipv6 firewallrules
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv6_ubuntu20.split(',') }}"
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.5.3.3.4
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - Fetch the ipv6firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallpolicy_35331_audit }}"
    register: ipv6firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_ipv6fir
    failed_when: no
    when: ipv6firewallpolicy.stdout.find("FAILED") != -1
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - saving the ip6tables
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_rules
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - adding the necessary ports to ip6tables before droping the policy
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv6_ubuntu20.split(',') }}"
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 3.5.3.3.1 - Implementing a default DROP policy
    command: "{{item}}"
    with_items:
      - ip6tables -P INPUT DROP
      - ip6tables -P OUTPUT DROP
      - ip6tables -P FORWARD DROP
    failed_when: no
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.5.3.3.1
      - three
      - remedy
      - all

  - name: 4.1.1.1 - Fetch the auditd value from ansible facts
    shell: echo "{{ ansible_local.auditd_4111_audit }}" 
    register: auditd
    ignore_errors: True
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - remedy
      - all
 
  - name: 4.1.1.1 - Install auditd
    apt:
      name: auditd
      state: present
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - remedy
      - all

  - name: 4.1.1.1 - Install audispd-plugins
    apt:
      name: audispd-plugins
      state: present
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - remedy
      - all      

  - name: 4.1.1.2 - Fetch the auditdservice value from ansible facts
    shell: echo "{{ ansible_local.auditdservice_4112_audit }}" 
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - remedy
      - all
      
  - name: 4.1.1.2 - Enable auditd service
    service:
      name: auditd
      enabled: yes
    failed_when: no
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - remedy
      - all

  - name: 4.1.1.3 - Fetch the auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_4113_audit }}" 
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - remedy
      - all

  - name: 4.1.1.3 - configuring auditdenable file
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit=1/' /etc/default/grub
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - remedy
      - all
      
  - name: 4.1.1.3 - update the grub2 configuration
    shell: update-grub
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - remedy
      - all
           
  - name: 4.1.1.4 - Fetch the backlog value from ansible facts
    shell: echo "{{ ansible_local.auditdbacklog_4114_audit }}" 
    register: auditdbacklog
    ignore_errors: True
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - remedy
      - all

  - name: 4.1.1.4 - configuring auditdbacklog file
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit_backlog_limit=8192/' /etc/default/grub
    failed_when: no
    when: auditdbacklog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - remedy
      - all

  - name: 4.1.1.4 - update the grub2 configuration
    shell: update-grub
    failed_when: no
    when: auditdbacklog.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - remedy
      - all
      
  - name: 4.1.2.1 - Fetch the auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4121_audit }}" 
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - remedy
      - all
      
  - name: 4.1.2.1 - configuring auditlogsize file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*|#max_log_file =*)"
      line: "max_log_file = {{ audit_log_size_ubuntu20 }}"
    failed_when: no
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - remedy
      - all      

  - name: 4.1.2.2 - Fetch the auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4122_audit }}" 
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - remedy
      - all
      
  - name: 4.1.2.2 - configuring auditlogdelete file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file_action =*|#max_log_file_action =*)"
      line: 'max_log_file_action = keep_logs'
    failed_when: no
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - remedy
      - all      

  - name: 4.1.2.3 - Fetch the sysdisable value from ansible facts
    shell: echo "{{ ansible_local.sysdisable_4123_audit }}" 
    register: sysdisable
    ignore_errors: True
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all
      
  - name: 4.1.2.3 - configuring sysdisable file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(space_left_action =*|#space_left_action =*)"
      line: 'space_left_action = email'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all
      
  - name: 4.1.2.3 - configuring sysdisable file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(action_mail_acct =*|#action_mail_acct =*)"
      line: 'action_mail_acct = root'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all
      
  - name: 4.1.2.3 - configuring sysdisable file
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(admin_space_left_action =*|#admin_space_left_action =*)"
      line: 'admin_space_left_action = halt'
    failed_when: no
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - remedy
      - all      

  - name: 4.1.3 - Fetch the moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_413_audit }}" 
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all
      
  - name: 4.1.3 - Creating moddatetime configuration file
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all
      
  - name: 4.1.3 - Creating moddatetime configuration file
    lineinfile:
      path: /etc/audit/rules.d/time_change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
      - moddatetime.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all
   
  - name: 4.1.3 - Restart auditd
    systemd:
       name: auditd
       state: reloaded
    failed_when: no
    when: moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.3
      - four
      - remedy
      - all

  - name: 4.1.4 - Fetch the modusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_414_audit }}" 
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - remedy
      - all
      
  - name: 4.1.4 - Creating modusergrp configuration file
    lineinfile:
      path: /etc/audit/rules.d/identity.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/group -p wa -k identity"
      - "-w /etc/passwd -p wa -k identity"
      - "-w /etc/gshadow -p wa -k identity"
      - "-w /etc/shadow -p wa -k identity"
      - "-w /etc/security/opasswd -p wa -k identity"
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.4 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.4
      - four
      - remedy
      - all

  - name: 4.1.5 - Fetch the modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_415_audit }}" 
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all
      
  - name: 4.1.5 - Creating modsysnet configuration file
    lineinfile:
      path: /etc/audit/rules.d/system_local.rules
      state: present
      line: "{{item}}"
      create: yes      
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/network -p wa -k system-locale"
    when:
      - modsysnet.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all
      
  - name: 4.1.5 - Creating modsysnet configuration file
    lineinfile:
      path: /etc/audit/rules.d/system_local.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/network -p wa -k system-locale"
    when:
     - modsysnet.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.5 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when:  modsysnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysnet
      - 4.1.5
      - four
      - remedy
      - all

  - name: 4.1.6 - Fetch the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_416_audit }}" 
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - remedy
      - all
      
  - name: 4.1.6 - Creating modsysmac configuration file
    lineinfile:
      path: /etc/audit/rules.d/MAC_policy.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/apparmor/ -p wa -k MAC-policy"
      - "-w /etc/apparmor.d/ -p wa -k MAC-policy"
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - remedy
      - all
      
  - name: 4.1.6 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.6
      - four
      - remedy
      - all

  - name: 4.1.7 - Fetch the loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_417_audit }}" 
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.7 - Creating loginout configuration file
    lineinfile:
      path: /etc/audit/rules.d/logins.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/log/lastlog -p wa -k logins"
      - "-w /var/run/faillog -p wa -k logins"
      - "-w /var/log/tallylog -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.7 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.7
      - four
      - remedy
      - all

  - name: 4.1.8 - Fetch the session value from ansible facts
    shell: echo "{{ ansible_local.session_418_audit }}" 
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - remedy
      - all
     
  - name: 4.1.8 - Creating session configuration file
    lineinfile:
      path: /etc/audit/rules.d/session.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/run/utmp -p wa -k session"
      - "-w /var/log/wtmp -p wa -k logins"
      - "-w /var/log/btmp -p wa -k logins"
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - remedy
      - all
      
  - name: 4.1.8 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.8
      - four
      - remedy
      - all

  - name: 4.1.9 - Fetch the dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_419_audit }}" 
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all
      
  - name: 4.1.9 - Creating dacperm configuration file
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295"
      - "-k perm_mod"
    when:
     - dacperm.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all
      
  - name: 4.1.9 - Creating dacperm configuration file
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:
      - dacperm.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all
      
  - name: 4.1.9 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: dacperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dacperm
      - 4.1.9
      - four
      - remedy
      - all

  - name: 4.1.10 - Fetch the fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_4110_audit }}" 
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all
    
  - name: 4.1.10 - Creating fileaccess configuration file
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes      
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all
    
  - name: 4.1.10 - Creating fileaccess configuration file
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when:
      - fileaccess.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all
      
  - name: 4.1.10 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: fileaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fileaccess
      - 4.1.10
      - four
      - remedy
      - all

  - name: 4.1.11 - Fetch the privilegecmd value from ansible facts
    shell: echo "{{ ansible_local.privilegecmd_4111_audit }}" 
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - remedy
      - all
      
  - name: 4.1.11 - configuring privilegecmd file
    shell: find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>='"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/privileged.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - remedy
      - all

  - name: 4.1.11 - Restart auditd 
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.11
      - four
      - remedy
      - all
      
  - name: 4.1.12 - Fetch the fsmount value from ansible facts
    shell: echo "{{ ansible_local.fsmount_4112_audit }}" 
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all
      
  - name: 4.1.12 - configuring fsmount file
    lineinfile:
      path: /etc/audit/rules.d/audit.rules
      state: present
      line: "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture != "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all
  
  - name: 4.1.12 - creating fsmount configuration file
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
      - "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when:
      - fsmount.stdout.find("FAILED") != -1
      - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all
    
  - name: 4.1.12 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: fsmount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsmount
      - 4.1.12
      - four
      - remedy
      - all

  - name: 4.1.13 - Fetch the filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4113_audit }}" 
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all
    
  - name: 4.1.13 - creating filedeletion configuration file
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      create: yes
      state: present
      line: "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when: 
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all

  - name: 4.1.13 - creating filedeletion configuration file
    lineinfile:
      path: /etc/audit/rules.d/deletion.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when: 
     - filedeletion.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all
  
  - name: 4.1.13 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: filedeletion.stdout.find("FAILED") != -1
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - remedy
      - all
      
  - name: 4.1.14 - Fetch the sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_4114_audit }}" 
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - remedy
      - all
      
  - name: 4.1.14 - creating sudoers configuration file
    lineinfile:
      path: /etc/audit/rules.d/scope.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /etc/sudoers -p wa -k scope"
      - "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - remedy
      - all
    
  - name: 4.1.14 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.14
      - four
      - remedy
      - all

  - name: 4.1.15 -  Fetch the sudos value from ansible facts 
    shell: echo "{{ ansible_local.sudos_4115_audit }}" 
    register: sudos
    ignore_errors: True
    become: yes
    tags:
      - sudos
      - 4.1.15
      - four
      - remedy
      - all
    
  - name: 4.1.15 - creating sudos configuration file
    lineinfile:
      path: /etc/audit/rules.d/actions.rules
      create: yes
      state: present
      line: "-a exit,always -F arch=b32 -C euid!=uid -F euid=0 -F auid>=1000 -F auid!=4294967295 -S execve -k actions"
    when: 
     - sudos.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - sudos
      - 4.1.15
      - four
      - remedy
      - all
      
  - name: 4.1.15 - creating sudos configuration file
    lineinfile:
      path: /etc/audit/rules.d/actions.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b64 -C euid!=uid -F euid=0 -F auid>=1000 -F auid!=4294967295 -S execve -k actions"
      - "-a always,exit -F arch=b32 -C euid!=uid -F euid=0 -F auid>=1000 -F auid!=4294967295 -S execve -k actions"     
    when: 
     - sudos.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - sudos
      - 4.1.15
      - four
      - remedy
      - all
      
  - name: 4.1.15 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: sudos.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudos
      - 4.1.15
      - four
      - remedy
      - all

  - name: 4.1.16 - Fetch the kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4116_audit }}" 
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all
      
  - name: 4.1.16 - creating kernelmodule configuration file
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture != "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all
    
  - name: 4.1.16 - creating kernelmodule configuration file
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when: 
     - kernelmodule.stdout.find("FAILED") != -1
     - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all
    
  - name: 4.1.16 - Reloading auditd
    systemd:
       name: auditd
       state: reloaded
    failed_when: no
    when: kernelmodule.stdout.find("FAILED") != -1
    become: yes
    tags:
      - kernelmodule
      - 4.1.16
      - four
      - remedy
      - all      

  - name: 4.1.17 - Fetch the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4117_audit }}" 
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - remedy
      - all    
    
  - name: 4.1.17 - creating auditconfig configuration file
    lineinfile:
      path:  /etc/audit/rules.d/99-finalize.rules
      create: yes
      state: present
      line: "-e 2"
    when: auditconfig.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - remedy
      - all
    
  - name: 4.1.17 - Restart auditd
    systemd:
       name: auditd
       state: restarted
    failed_when: no
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.17
      - four
      - remedy
      - all
      
  - name: 4.2.1.1 - Fetch the rsyslog value from ansible facts
    shell: echo "{{ ansible_local.rsyslog_4211_audit }}" 
    register: rsyslog
    ignore_errors: True
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - remedy
      - all
    
  - name: 4.2.1.1 - Install rsyslog
    apt:
      name: rsyslog
      state: present
    failed_when: no
    when: rsyslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - remedy
      - all
      
  - name: 4.2.1.2 - Fetch the rsyslogenb value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4212_audit }}" 
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - remedy
      - all
    
  - name: 4.2.1.2 - Enable rsyslog services
    service:
      name: rsyslog
      enabled: yes
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - remedy
      - all
      
  - name: 4.2.1.3 - Fetch the rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4213_audit }}" 
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all
    
  - name: 4.2.1.3 - creating rloggingconf configuration file
    lineinfile:
      path: /etc/rsyslog.conf
      create: yes
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all
 
  - name: 4.2.1.3 - Restart rsyslog
    service: 
      name: rsyslog.service
      state: restarted
    failed_when: no
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.3
      - four
      - remedy
      - all
  
  - name: 4.2.1.4 - Fetch the rsyslogperm value from ansible facts
    shell: echo "{{ ansible_local.rsyslogperm_4214_audit }}" 
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - remedy
      - all
    
  - name: 4.2.1.4 - Creating rsyslogperm configuration file
    lineinfile:
      path: /etc/rsyslog.conf
      create: yes
      state: present
      regexp: "^$FileCreateMode*"
      line: "$FileCreateMode 0640"
    when: rsyslogperm.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - remedy
      - all

  - name: 4.2.1.4 - configuring rsyslogperm file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    register: rsyslogperm_result
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - configuring rsyslogperm file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "$FileCreateMode 0640"
    loop: '{{ rsyslogperm_result.stdout_lines }}'
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.4
      - four
      - all
      - remedy
  
  - name: 4.2.1.5 - Fetch the rsyslogsendlogs value from ansible facts
    shell: echo "{{ ansible_local.rsyslogsendlogs_4215_audit }}" 
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - remedy
      - all
    
  - name: 4.2.1.5 - Creating rsyslogsendlogs configuration file
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - remedy
      - all

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    register: rsyslogsendlogs_result
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - configuring rsyslogsendlogs file
    lineinfile:
      path: '{{ item }}'
      state: present
      line: "*.* @@loghost.example.com"
    loop: '{{ rsyslogsendlogs_result.stdout_lines }}'
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy
         
  - name: 4.2.1.5 - Restart rsyslog
    service: 
      name: rsyslog.service
      state: restarted
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - remedy
      - all
      
  - name: 4.2.1.6 - Fetch the remotesyslogmsg value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogmsg_4216_audit }}" 
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all
    
  - name: 4.2.1.6 - Creating remotesyslogmsg configuration file
    lineinfile:
      path: '/etc/rsyslog.conf'
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "#$ModLoad imtcp", line: "$ModLoad imtcp" }
      - { regexp: "#$InputTCPServerRun 514",line: "$InputTCPServerRun 514" }
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - listing file in /etc/rsyslog.d/
    shell: find /etc/rsyslog.d/ -name "*.conf"
    failed_when: no
    register: remotesyslogmsg_result   
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - configuring remotesyslogmsg files
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.1.6 - configuring remotesyslogmsg files
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    loop: '{{ remotesyslogmsg_result.stdout_lines }}'
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - remedy
      - all
    
  - name: 4.2.1.6 - Restart rsyslog
    systemd: 
      name: rsyslog
      state: restarted
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.6
      - four
      - remedy
      - all

  - name: 4.2.2.1 - Fetch the journalsendlogs value from ansible facts
    shell: echo "{{ ansible_local.journalsendlogs_4221_audit }}" 
    register: journalsendlogs
    ignore_errors: True
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - remedy
      - all
    
  - name: 4.2.2.1 - Creating journalsendlogs configuration file
    lineinfile:
      path: /etc/systemd/journald.conf
      create: yes
      state: present
      regexp: "^(ForwardToSyslog*|#ForwardToSyslog*)"
      line: "ForwardToSyslog=yes"
    when: journalsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - remedy
      - all

  - name: 4.2.2.2 - Fetch the journalcompresslog value from ansible facts
    shell: echo "{{ ansible_local.journalcompresslog_4222_audit }}" 
    register: journalcompresslog
    ignore_errors: True
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - remedy
      - all
      
  - name: 4.2.2.2 - Creating journalcompresslog configuration file
    lineinfile:
      path: /etc/systemd/journald.conf
      create: yes
      state: present
      regexp: "^(Compress*|#Compress*)"
      line: "Compress=yes"
    when: journalcompresslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - remedy
      - all

  - name: 4.2.2.3 - Fetch the journalpersisdisk value from ansible facts
    shell: echo "{{ ansible_local.journalpersisdisk_4223_audit }}" 
    register: journalpersisdisk
    ignore_errors: True
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - remedy
      - all
    
  - name: 4.2.2.3 - Creating journalpersisdisk configuration file
    lineinfile:
      path: /etc/systemd/journald.conf
      create: yes
      state: present
      regexp: "^(Storage*|#Storage*)"
      line: "Storage=persistent"
    when: journalpersisdisk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - remedy
      - all

  - name: 4.2.3 - Fetch the permlogfiles value from ansible facts
    shell: echo "{{ ansible_local.permlogfiles_423_audit }}" 
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - remedy
      - all
      
  - name: 4.2.3 - set permissions on all existing log files
    shell: 'find /var/log -type f -exec chmod g-wx,o-rwx "{}" + -o -type d -exec chmod g-wx,o-rwx "{}" +'
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - remedy
      - all
      
  - name: 4.3 - Fetch the logrotate value from ansible facts
    shell: echo "{{ ansible_local.logrotate_43_audit }}" 
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - remedy
      - all
    
  - name: 4.3 - configuring logrotate file
    lineinfile:
      path: '{{ item }}'
      state: present
      regexp: "^(maxage*|#maxage*)"
      line: "maxage 90"
    with_items:
      - /etc/logrotate.conf
      - /etc/logrotate.d/rsyslog
    failed_when: no
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - remedy
      - all
      
  - name: 4.4 Fetch the logrotateperm value from ansible facts
    shell: echo "{{ ansible_local.logrotateperm_44_audit }}" 
    register: logrotateperm
    ignore_errors: True
    become: yes
    tags:
      - logrotateperm
      - '4.4'
      - four
      - remedy
      - all
    
  - name: 4.4 - configuring logrotateperm file
    lineinfile:
      path: /etc/logrotate.conf
      state: present
      regexp: '^(create*|#create*)'
      line: "create 0640 root utmp"
    when: logrotateperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotateperm
      - '4.4'
      - four
      - remedy
      - all
      
  - name: 5.1.1 - Fetch the cron value from ansible facts
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all
      
  - name: 5.1.1 - Enable cron daemon 
    systemd:
      name: crond
      enabled: yes
    failed_when: no
    when: cron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - remedy
      - all
      
  - name: 5.1.2 - Fetch the permcrontab value from ansible facts
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all    
 
  - name: 5.1.2 - configuring permcrontab file
    file:
      path: "/etc/crontab"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: permcrontab.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - remedy
      - all

  - name: 5.1.3 - Fetch the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all    

  - name: 5.1.3 - configuring permcronhourly file
    file:
      path: "/etc/cron.hourly"
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - remedy
      - all
      
  - name: 5.1.4 -Fetch the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all
      
  - name: 5.1.4 - configuring permcrondaily file
    file:
      path: "/etc/cron.daily"
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - remedy
      - all

  - name: 5.1.5 - Fetch the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all
      
  - name: 5.1.5 - configuring permcronweekly file
    file:
      path: "/etc/cron.weekly"
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - remedy
      - all
      
  - name: 5.1.6 - Fetch the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all
      
  - name: 5.1.6 - configuring permcronmonthly file
    file:
      path: "/etc/cron.monthly"
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - remedy
      - all
      
  - name: 5.1.7 - Fetch the permcrond value from ansible facts
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all
      
  - name: 5.1.7 - configuring permcrond file
    file:
      path: "/etc/cron.d"
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - remedy
      - all

  - name: 5.1.8 - Fetching the cronuser value from ansible facts
    shell: echo "{{ ansible_local.cronuser_518_audit }}"
    register: cronuser
    ignore_errors: True
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Creating a directory
    file:
      path: /etc/ansible/backup/cronuser
      state: directory
      mode: '0750'
      recurse: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Backing up cron.deny
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/cronuser/cron_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Removing /etc/cron.deny file
    file:
      path: "/etc/cron.deny"
      state: absent
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.8 - Creating /etc/cron.allow file
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cronuser
      - 5.1.8
      - five
      - remedy
      - all

  - name: 5.1.9 - Fetch the atcron value from ansible facts
    shell: echo "{{ ansible_local.atcron_519_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Creating directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0750'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Backing up at.deny
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - Removing /etc/at.deny file
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all

  - name: 5.1.9 - creating /etc/at.allow
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1    
    become: yes
    tags:
      - atcron
      - 5.1.9
      - five
      - remedy
      - all
    
  - name: 5.2.1 - Fetch the sshdperm value from ansible facts
    shell: echo "{{ ansible_local.sshdperm_521_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - remedy
      - all    

  - name: 5.2.1 - configuring sshdperm file
    file:
      path: "/etc/ssh/sshd_config"
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1     
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - remedy
      - all
      
  - name: 5.2.2 - Fetch the sshpermpvtkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpvtkey_522_audit }}"
    register: sshpermpvtkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.2
      - five
      - remedy
      - all 
  
  - name: 5.2.2 - configuring sshpermpvtkey file
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' | xargs chown root:root 
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' | xargs chmod 0600
    failed_when: no
    when: sshpermpvtkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.2
      - five 
      - remedy
      - all
  
  - name: 5.2.3 - Fetch the sshpermpubkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpubkey_523_audit }}"
    register: sshpermpubkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.3
      - five
      - remedy
      - all 
  
  - name: 5.2.3 - configuring sshpermpubkey file
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' | xargs chmod go-wx
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' | xargs chown root:root
    failed_when: no
    when: sshpermpubkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.3
      - five
      - remedy
      - all

  - name: 5.2.4 - Fetch the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_524_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.2.4
      - five
      - remedy
      - all
      
  - name: 5.2.4 - configuring sshloglevel file
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - sshloglevel
      - 5.2.4
      - five
      - remedy
      - all

  - name: 5.2.5 - Fetch the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_525_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.2.5
      - five
      - remedy
      - all
  
  - name: 5.2.5 - configuring sshx11forward file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshx11forward
      - 5.2.5
      - five
      - remedy
      - all

  - name: 5.2.6 - Fetch the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_526_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.6
      - five
      - remedy
      - all
  
  - name: 5.2.6 - configuring sshmaxauthtries file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries_ubuntu20 }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.6
      - five
      - remedy
      - all  
      
  - name: 5.2.7 - Fetch the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_527_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.7
      - five
      - remedy
      - all
  
  - name: 5.2.7 - configuring sshignorerhosts file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "IgnoreRhosts yes"
    failed_when: no
    when: sshignorerhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.7
      - five
      - remedy
      - all
 
  - name: 5.2.8 - Fetch the sshauthentication value from ansible facts
    shell: echo "{{ ansible_local.sshauthentication_528_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.2.8
      - five
      - remedy
      - all
  
  - name: 5.2.8 - configuring sshauthentication file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "HostbasedAuthentication no"
    failed_when: no
    when: sshauthentication.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshauthentication
      - 5.2.8
      - five
      - remedy
      - all

  - name: 5.2.9 - Fetch the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_529_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.2.9
      - five
      - remedy
      - all 

#  - name: 5.2.9 - configuring sshrootlogin file
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      regexp: "^(PermitRootLogin*|#PermitRootLogin*)"
#      line: "{{ PermitRootLogin_ubuntu20 }}"
#    when: sshrootlogin.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshrootlogin
#      - 5.2.9
#      - five
#      - remedy
#      - all

  - name: 5.2.10 - Fetch the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_5210_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.2.10
      - five
      - remedy
      - all
  
  - name: 5.2.10 - configuring sshpep file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "PermitEmptyPasswords no"
    failed_when: no
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.2.10
      - five
      - remedy
      - all
      
  - name: 5.2.11 - Fetch the sshpue value from ansible facts
    shell: echo "{{ ansible_local.sshpue_5211_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.2.11
      - five
      - remedy
      - all
  
  - name: 5.2.11 - configuring sshpue file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "PermitUserEnvironment no"
    failed_when: no
    when: sshpue.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpue
      - 5.2.11
      - five
      - remedy
      - all

  - name: 5.2.12 - Fetch the sshchipers value from ansible facts
    shell: echo "{{ ansible_local.sshchipers_5212_audit }}"
    register: sshchipers
    ignore_errors: True
    become: yes
    tags:
      - sshchipers
      - 5.2.12
      - five
      - remedy
      - all
    
  - name: 5.2.12 - configuring sshchipers file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Ciphers*|#Ciphers*)"
      line: "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
    failed_when: no
    when: sshchipers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshchipers
      - 5.2.12
      - five
      - remedy
      - all
      
#  - name: 5.2.13 - Fetch the sshmacalgorithm value from ansible facts
#    shell: echo "{{ ansible_local.sshmacalgorithm_5213_audit }}"
#    register: sshmacalgorithm
#    ignore_errors: True
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.2.13
#      - five
#      - remedy
#      - all
  
#  - name: 5.2.13 - configuring sshmacalgorithm file
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      state: present
#      line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256"
#    when: sshmacalgorithm.stdout.find("FAILED") != -1
    become: yes
#    tags:
#      - sshmacalgorithm
#      - 5.2.13
#      - five
#      - remedy
#      - all
      
  - name: 5.2.14 - Fetch the sshkeyexalgorithm value from ansible facts
    shell: echo "{{ ansible_local.sshkeyexalgorithm_5214_audit }}"
    register: sshkeyexalgorithm
    ignore_errors: True
    become: yes
    tags:
      - sshkeyexalgorithm
      - 5.2.14
      - five
      - remedy
      - all
    
  - name: 5.2.14 - configuring sshkeyexalgorithm file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellmangroup14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffiehellman-group-exchange-sha256"
    failed_when: no
    when: sshkeyexalgorithm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshkeyexalgorithm
      - 5.2.14
      - five
      - remedy
      - all

  - name: 5.2.15 - Fetch the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5215_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.15
      - five
      - remedy
      - all
  
  - name: 5.2.15 - configuring sshidletimeout file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval_ubuntu20 }}"
    failed_when: no
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.15
      - five
      - remedy
      - all
      
  - name: 5.2.15 - configuring sshidletimeout file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: "{{ ClientAliveCountMax_ubuntu20 }}"
    failed_when: no
    when: sshidletimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshidletimeout
      - 5.2.15
      - five
      - remedy
      - all
      
  - name: 5.2.16 - Fetch the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5216_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.16
      - five
      - remedy
      - all
    
  - name: 5.2.16 - configuring sshlogingracetime file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "LoginGraceTime 60"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.16
      - five
      - remedy
      - all
      
  - name: 5.2.17 - Fetch the sshaccess value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_5217_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.2.17
      - five
      - remedy
      - all
    
  - name: 5.2.17 - configuring sshaccess file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "{{item}}"
    with_items:
      - "AllowUsers   {{ allowusers_ubuntu20 }}"
      - "AllowGroups  {{ allowgroups_ubuntu20 }}"
      - "DenyUsers    {{ denyusers_ubuntu20 }}"
      - "DenyGroups   {{ denygroups_ubuntu20 }}"
    failed_when: no
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.17
      - five
      - remedy
      - all

  - name: 5.2.18 - Fetch the sshwarningbanner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5218_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.18
      - five
      - remedy
      - all
  
  - name: 5.2.18 - configuring sshwarningbanner file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.18
      - five
      - remedy
      - all

  - name: 5.2.19 - Fetch the sshpam value from ansible facts
    shell: echo "{{ ansible_local.sshpam_5219_audit }}"
    register: sshpam
    ignore_errors: True
    become: yes
    tags:
      - sshpam
      - 5.2.19
      - five
      - remedy
      - all
  
  - name: 5.2.19 - configuring sshpam file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(UsePAM*|#UsePAM*)"
      line: "UsePAM yes"
    failed_when: no
    when: sshpam.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpam
      - 5.2.19
      - five
      - remedy
      - all
      
  - name: 5.2.20 - Fetch the sshdistcpforward value from ansible facts
    shell: echo "{{ ansible_local.sshdistcpforward_5220_audit }}"
    register: sshdistcpforward
    ignore_errors: True
    become: yes
    tags:
      - sshdistcpforward
      - 5.2.20
      - five
      - remedy
      - all
  
  - name: 5.2.20 - configuring sshdistcpforward file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(AllowTcpForwarding*|#AllowTcpForwarding*)"
      line: "AllowTcpForwarding no"
    failed_when: no
    when: sshdistcpforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdistcpforward
      - 5.2.20
      - five
      - remedy
      - all

  - name: 5.2.21 - Fetch the sshmaxstartups value from ansible facts
    shell: echo "{{ ansible_local.sshmaxstartups_5221_audit }}"
    register: sshmaxstartups
    ignore_errors: True
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.21
      - five
      - remedy
      - all
  
  - name: 5.2.21 - configuring sshdistcpforward file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxStartups*|#MaxStartups*)"
      line: "MaxStartups 10:30:100"
    failed_when: no
    when: sshmaxstartups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.21
      - five
      - remedy
      - all
      
  - name: 5.2.22 - Fetch the sshmaxsessions value from ansible facts
    shell: echo "{{ ansible_local.sshmaxsessions_5222_audit }}"
    register: sshmaxsessions
    ignore_errors: True
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.22
      - five
      - remedy
      - all
    
  - name: 5.2.22 - configuring sshmaxsessions file
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(MaxSessions*|#MaxSessions*)"
      line: "MaxSessions 10"
    failed_when: no
    when: sshmaxsessions.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.22
      - five
      - remedy
      - all

  - name: 5.3.1 - Fetch the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_531_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - Install the pam_pwquality module
    apt:
      name: libpam-pwquality 
      state: present
    when: passwdcreation.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all
      
  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(minlen*|# minlen*)"
      line: "minlen = 14"
    when: passwdcreation.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.1 - configuring passwdcreation file
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp: "^(minclass*|# minclass*)"
      line: "minclass = 4"
    when: passwdcreation.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.3.1
      - five
      - remedy
      - all

  - name: 5.3.2 - Fetch the lockout value from ansible facts
    shell: echo "{{ ansible_local.lockout_532_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - configuring lockout file
    lineinfile:
      path: /etc/pam.d/common-auth
      state: present
      line: "auth    required    pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
      insertafter: "^auth.*required.*pam_permit.so.*"
    when: lockout.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - Grepping account.*requisite.*pam_deny.so
    shell: cat /etc/pam.d/common-account | grep "account.*requisite.*pam_deny.so" | wc -l
    register: deny
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - configuring lockout file
    lineinfile:
      path: /etc/pam.d/common-account
      state: present
      line: "account   requisite    pam_deny.so"
      insertafter: "^account.*pam_unix.so"
    when:
      - lockout.stdout.find("FAILED") != -1
      - deny.stdout == "0"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - Grepping account.*required.*pam_tally2.so
    shell: cat /etc/pam.d/common-account | grep "account.*required.*pam_tally2.so" | wc -l
    register: tally
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all

  - name: 5.3.2 - configuring lockout file
    lineinfile:
      path: /etc/pam.d/common-account
      state: present
      line: "account   required     pam_tally2.so"
      insertafter: "^account.*required.*pam_permit.so"
    when: 
      - lockout.stdout.find("FAILED") != -1
      - tally.stdout == "0"
    become: yes
    tags:
      - lockout
      - 5.3.2
      - five
      - remedy
      - all
      
  - name: 5.3.3 - Fetch the passwdreuse value from ansible facts 
    shell: echo "{{ ansible_local.passwdreuse_533_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - Grepping password.*required.*pam_pwhistory.so
    shell: cat /etc/pam.d/common-password | grep "password.*required.*pam_pwhistory.so" | wc -l
    register: reuse
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      line: "password required pam_pwhistory.so remember=5"
      insertafter: "^password.*required.*pam_permit.so"
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "0"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.3 - configuring passwdreuse file
    command: sed -i 's/password.*required.*pam_pwhistory.so.*/& remember=5/' /etc/pam.d/common-password
    when:
      - passwdreuse.stdout.find("FAILED") != -1
      - reuse.stdout == "1"
    become: yes
    tags:
      - passwdreuse
      - 5.3.3
      - five
      - remedy
      - all

  - name: 5.3.4 - Fetch the passwdhashing value from ansible facts 
    shell: echo "{{ ansible_local.passwdhashing_534_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - remedy
      - all   
  
  - name: 5.3.4 - configuring passwdhashing file
    lineinfile:
      path: /etc/pam.d/common-password
      state: present
      regexp: '^(password*[success=1 default=ignore]*pam_unix.so.*)$'
      line: '\1 sha512'
      backrefs: yes
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.3.4
      - five
      - remedy
      - all
      
  - name: 5.4.1.1 - Fetch the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5411_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all
      
  - name: 5.4.1.1 - configuring passwdexpiration file
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MAX_DAYS.*)"
      line: "PASS_MAX_DAYS {{ Pass_max_days_ubuntu20 }}"
    when: passwdexpiration.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all

  - name: 5.4.1.1 - Grepping value users
    shell: "grep ':$6' /etc/shadow | cut -d: -f1,5 | awk -F: '$2>=365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all
  
  - name: 5.4.1.1 - Modify user parameters for all users with a password set to match
    chage: user="{{ item }}" sp_max="{{ Pass_max_days_ubuntu20 }}"
    loop: "{{ echo.stdout_lines }}"
    when:     
      - passwdexpiration.stdout.find("FAILED") != -1 
      - item != "root"    
    become: yes
    tags:
      - passwdexpiration
      - 5.4.1.1
      - five
      - remedy
      - all

  - name: 5.4.1.2 - Fetch the minidays value from ansible facts
    shell: echo "{{ ansible_local.minidays_5412_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - configuring minidays file  
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MIN_DAYS.*)"
      line: "PASS_MIN_DAYS {{ Pass_min_days_ubuntu20 }}"
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - Grepping value $6>=7
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.2 - Modify user parameters for all users with a password set to match
    chage: user="{{ item }}" sp_min="{{ Pass_min_days_ubuntu20 }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
      - minidays.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - minidays
      - 5.4.1.2
      - five
      - remedy
      - all

  - name: 5.4.1.3 - Fetch the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5413_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all
      
  - name: 5.4.1.3 - configuring warningdays file  
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_WARN_AGE*)"
      line: "PASS_WARN_AGE {{ Pass_warn_age_ubuntu20 }}"
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.3 - Ensure password expiration warning days is 7 or more
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.3 - Modify user parameters for all users with a password set to match
    chage: user="{{ item }}" sp_warn="{{ Pass_warn_age_ubuntu20 }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
      - warningdays.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.4.1.3
      - five
      - remedy
      - all

  - name: 5.4.1.4 - Fetch the inactivepasswdlock value from ansible facts
    shell: echo "{{ ansible_local.inactivepasswdlock_5414_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - set the default password inactivity period to 30 days
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - Grepping users
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=1000 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.4 - Modify user parameters for all users with a password set to match
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when: 
    - inactivepasswdlock.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.4.1.4
      - five
      - remedy
      - all

  - name: 5.4.1.5 - Fetch the lastpasswdchange value from ansible facts
    shell: echo "{{ ansible_local.lastpasswdchange_5415_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - remedy
      - all
      
  - name: 5.4.1.5 - Grepping users last password change date is in the past
    shell: |
      count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
               fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.4.1.5
      - five
      - remedy
      - all

  - name: 5.4.2 - Fetch the sysaccnonlogin value from ansible facts
    shell: echo "{{ ansible_local.sysaccnonlogin_542_audit }}"
    register: sysaccnonlogin
    ignore_errors: True
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all
      
  - name: 5.4.2 - verify no results are returned
    shell: |
      awk -F: '$3<1000 && $7!="/usr/sbin/nologin" {print $1}' /etc/passwd
    register: echo
    when: sysaccnonlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.2 - Ensure system accounts are secured
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when:
      - sysaccnonlogin.stdout.find("FAILED") != -1
      - item != "root"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all

  - name: 5.4.2 - Ensure system accounts are secured
    user:
      name: "{{ item }}"
      shell: '/usr/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when: 
    - sysaccnonlogin.stdout.find("FAILED") != -1
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysaccnonlogin
      - 5.4.2
      - five
      - remedy
      - all
      
  - name: 5.4.3 - Fetch the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_543_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - remedy
      - all
      
  - name: 5.4.3 -  set the root user default group to GID 0
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultgroup
      - 5.4.3
      - five
      - remedy
      - all
      
  - name: 5.4.4 - Fetch the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_544_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - configuring defaultuser file
    lineinfile:
      path: /etc/login.defs
      state: present
      line: "UMASK 027" 
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - configuring defaultuser file
    lineinfile:
      path: /etc/pam.d/common-session
      state: present
      line: "session optional                        pam_umask.so"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - creating backup directory
    file:
      path: /etc/ansible/backup/defaultuser
      state: directory
      mode: '0755'
      recurse: yes    
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - backing up files
    copy:
      src: "{{ item }}"
      dest: /etc/ansible/backup/defaultuser/
      remote_src: yes
    with_items:
      - /etc/login.defs
      - /etc/profile*
      - /etc/bash.bashrc*
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all

  - name: 5.4.4 - changing value for umask
    lineinfile:
      path: '{{ item }}'
      regexp: '^(UMASK*|#UMASK*)'
      line: UMASK 027
    with_items:
      - '/etc/login.defs'
      - '/etc/profile*'
      - '/etc/bash.bashrc*'
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.4.4
      - five
      - remedy
      - all
 
  - name: 5.4.5 Fetch the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_545_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - remedy
      - all
      
  - name: 5.4.5 - configuring usershelltimeout file
    lineinfile:
      path: /etc/profile
      state: present
      line: '{{ item }}'
    with_items:
      - "TMOUT=900"
      - "readonly TMOUT"
      - "export TMOUT"
    failed_when: no
    when: usershelltimeout.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - usershelltimeout
      - 5.4.5
      - five
      - remedy
      - all

  - name: 5.5 - Fetch the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.rootlogin_55_audit }}"
    register: rootlogin
    ignore_errors: True
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - remedy
      - all
      
  - name: 5.5 - Remove entries for any consoles that are not in a physically secure location
    shell: sed -i '/^tty/!d'  /etc/securetty
    when: rootlogin.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - rootlogin
      - '5.5'
      - five
      - remedy
      - all

  - name: 5.6 - Fetch the suaccess value from ansible facts
    shell: echo "{{ ansible_local.suaccess_56_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all
      
  - name: 5.6 - Uncommenting pam_wheel line
    replace:
      path: /etc/pam.d/su
      regexp: '^(auth.*required.*pam_wheel.so.*use_uid)'
      replace: '#\1'
    failed_when: no
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all

  - name: 5.6 - Creating an empty group
    command: groupadd sugroup
    failed_when: no
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all

  - name: 5.6 - Adding a group to pam_wheel
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: 'auth   required pam_wheel.so use_uid group=sugroup'
    when: suaccess.stdout.find("FAILED") != -1   
    become: yes
    tags:
      - suaccess
      - '5.6'
      - five
      - remedy
      - all

  - name: 6.1.1 - Fetch the auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}" 
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all
      
  - name: 6.1.1 - Audit system file permissions
    shell: dpkg --get-selections | grep -v upgrade | awk '{ print $1 }'
    register: dpkg_output
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all

  - name: 6.1.1 verifying the settings for the package
    shell: dpkg --verify {{ item }}
    with_items: "{{ dpkg_output.stdout_lines }}"
    ignore_errors: yes
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - remedy
      - all
      
  - name: 6.1.2 - Fetch the permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}"
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all

  - name: 6.1.2 - configuring permpasswd file
    file:
      path: "/etc/passwd"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - remedy
      - all
     
  - name: 6.1.3 - Fetch the permgshadowi value from ansible facts
    shell: echo "{{ ansible_local.permgshadowi_613_audit }}"
    register: permgshadowi
    ignore_errors: True
    become: yes
    tags:
      - permgshadowi
      - 6.1.3
      - six
      - remedy
      - all

  - name: 6.1.3 - configuring permgshadowi file
    file:
      path: "/etc/gshadow-"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.3
      - six
      - remedy
      - all    

  - name: 6.1.3 - configuring permgshadowi file
    file:
      path: "/etc/gshadow-"
      state: touch
      mode: 0640
      owner: root
      group: shadow
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.3
      - six
      - remedy
      - all          
      
  - name: 6.1.4 - Fetch the permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_614_audit }}" 
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.4
      - six
      - remedy
      - all

  - name: 6.1.4 - configuring permshadow file
    file:
      path: "/etc/shadow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.4
      - six
      - remedy
      - all
      
  - name: 6.1.4 - configuring permshadow file
    file:
      path: "/etc/shadow"
      state: touch
      mode: 0640
      owner: root
      group: shadow
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.4
      - six
      - remedy
      - all
      
  - name: 6.1.5 - Fetch the permgroup value from ansible facts
    shell: echo "{{ ansible_local.permgroup_615_audit }}" 
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.5
      - six
      - remedy
      - all
  
  - name: 6.1.5 - configuring permgroup file
    file:
      path: "/etc/group"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.5
      - six
      - remedy
      - all
      
  - name: 6.1.6 - Fetch the permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_616_audit }}" 
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - remedy
      - all

  - name: 6.1.6 - configuring permpasswdi file
    file:
      path: "/etc/passwd-"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - remedy
      - all
      
  - name: 6.1.7 - Fetch the permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_617_audit }}" 
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all

  - name: 6.1.7 - configuring permshadowi file
    file:
      path: "/etc/shadow-"
      state: touch
      mode: 0640
      owner: root
      group: shadow
    when: permshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - remedy
      - all
      
  - name: 6.1.8 - Fetch the permgroupi value from ansible facts
    shell: echo "{{ ansible_local.permgroupi_618_audit }}" 
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - remedy
      - all

  - name: 6.1.8 - configuring permgroupi file
    file:
      path: "/etc/group-"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - remedy
      - all
      
  - name: 6.1.9 - Fetch the permgshadow value from ansible facts
    shell: echo "{{ ansible_local.permgshadow_619_audit }}" 
    register: permgshadow
    ignore_errors: True
    become: yes
    tags:
      - permgshadow
      - 6.1.9
      - six
      - remedy
      - all

  - name: 6.1.9 - configuring permgshadow file
    file:
      path: "/etc/gshadow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permgshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadow
      - 6.1.9
      - six
      - remedy
      - all
      
  - name: 6.1.9 - configuring permgshadow file
    file:
      path: "/etc/gshadow"
      state: touch
      mode: 0640
      owner: root
      group: shadow
    when: permgshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadow
      - 6.1.9
      - six
      - remedy
      - all
  
  - name: 6.1.10 - Fetch the wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_6110_audit }}" 
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name: 6.1.10 - Fetching world writable files
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name: 6.1.10 - Changing ownership to world writable files
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - remedy
      - all

  - name:  6.1.11 - Fetch the unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_6111_audit }}" 
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Fetching unowned files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Fetching unowned files or directories exist
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.11 - Setting ownership to unowned files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - remedy
      - all

  - name: 6.1.12 - Fetch the ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6112_audit }}" 
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Fetching ungrouped files or directories exist
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Fetching ungrouped files or directories exist
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all

  - name: 6.1.12 - Setting ownership to ungrouped files or directories exist
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - remedy
      - all
     
  - name: 6.2.1 - Fetch the emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_621_audit }}" 
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all
      
  - name: 6.2.1 - Grepping users
    shell: "grep '/home' /etc/passwd | awk  -F: '$3>=500 {print $1}'"
    register: echo
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.1 - Grepping users password fields that are empty
    shell: "grep '{{ echo.stdout }}' /etc/shadow | awk -F':' '$2==\"!\" || $2==\"\" || $2==\"!!\"{print $1}'"
    register: ech
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all

  - name: 6.2.1 - Locking users for password fields are empty
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ ech.stdout_lines }}"
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - remedy
      - all
           
  - name: 6.2.2 - Fetch the rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_622_audit }}" 
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.2
      - six
      - remedy
      - all

  - name: 6.2.2 - Removing users other than root with UID 0
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - rootuid
      - 6.2.2
      - six
      - remedy
      - all
      
  - name: 6.2.4 - Fetch the userhdir value from ansible facts
    shell: echo "{{ ansible_local.userhdir_624_audit }}" 
    register: userhdir
    ignore_errors: True
    become: yes
    tags:
      - userhdir
      - 6.2.4
      - six
      - remedy
      - all

  - name: 6.2.4 - Grepping users home directories that do not exist
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=1000 && $7!=/usr/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: userhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdir
      - 6.2.4
      - six
      - remedy
      - all

  - name: 6.2.4 - Creating home directory for user
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0700
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ echo.stdout_lines }}"
    when: userhdir.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - userhdir
      - 6.2.4
      - six
      - remedy
      - all    
      
  - name: 6.2.5 - Fetch the userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_625_audit }}" 
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.5
      - six
      - remedy
      - all

  - name: 6.2.5 - Grepping users home directories permissions are 750 or more restrictive
    shell: |
       cat /etc/passwd | awk -F: '($3>=1000 && $7 !="/sbin/nologin" && $7 !="/bin/false") { print $1 }' | sort
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.5
      - six
      - remedy
      - all

  - name: 6.2.5 - Changing users' home directories permissions are 750 or more restrictive
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.5
      - six
      - remedy
      - all    
      
  - name: 6.2.6 - Fetch the userownhdir value from ansible facts
    shell: echo "{{ ansible_local.userownhdir_626_audit }}" 
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.6
      - six
      - remedy
      - all

  - name: 6.2.6 - Checking the ownership of any home directories that are not owned by the defined user to the correct user
    shell: |
       cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | grep -v 'root 0 /root' | while read user uid dir; do
       if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
             owner=$(stat -L -c "%U" "$dir")
             if [ "$owner" != "$user" ]; then
                 echo "$dir:$user:$owner" >> /tmp/cisuserhdir
             fi
       fi
       done
          a=$(sed -i 's/\/:nobody.*//g' /tmp/cisuserhdir)
          b=$(cat /tmp/cisuserhdir | grep -v '^[[:space:]]*$')
          echo "$b"
          rm -rf /tmp/cisuserhdir
    register: userhdirreg
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.6
      - six
      - remedy
      - all

  - name: 6.2.6 - Change the ownership of any home directories to the correct user
    file:
      path: "{{ item.split(':')[0] }}"
      owner: "{{ item.split(':')[1] }}"
      group: "{{ item.split(':')[1] }}"
    loop: "{{ userhdirreg.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.6
      - six
      - remedy
      - all
      
  - name: 6.2.7 - Fetch the dotfiles value from ansible facts
    shell: echo "{{ ansible_local.dotfiles_627_audit }}" 
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.7
      - six
      - remedy
      - all
   
  - name: 6.2.7 - Finding users have dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.7
      - six
      - remedy
      - all

  - name: 6.2.7 - Changing ownership to dotfiles
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.7
      - six
      - remedy
      - all    
      
  - name: 6.2.8 - Fetch the forwardfiles value from ansible facts
    shell: echo "{{ ansible_local.forwardfiles_628_audit }}" 
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.8 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: forwardfiles_result
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.8
      - six
      - all
      - remedy
	  
  - name: 6.2.8 - creating backup directory
    file:
      path: /etc/ansible/backup/forwardfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.8 - backing up files
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/forwardfiles"
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.8
      - six
      - remedy
      - all

  - name: 6.2.8 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ forwardfiles_result.stdout_lines }}" 
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.8
      - six
      - remedy
      - all    
      
  - name: 6.2.9 - Fetch the netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_629_audit }}" 
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: netrcfiles_result
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.9 - creating backup directory
    file:
      path: /etc/ansible/backup/netrcfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/netrcfiles"
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.9
      - six
      - remedy
      - all

  - name: 6.2.9 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.9
      - six
      - remedy
      - all    
      
  - name: 6.2.10 - Fetch the grpnetrcfiles value from ansible facts
    shell: echo "{{ ansible_local.grpnetrcfiles_6210_audit }}" 
    register: grpnetrcfiles
    ignore_errors: True
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Finding users having .netrc Files are not group or world writable
    shell: "find /home/ -name '.netrc' -perm /g+w,o+w"
    register: echo
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Changing ownership to .netrc Files 
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.10
      - six
      - remedy
      - all
 
  - name: 6.2.11 - Fetch the rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6211_audit }}"
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts'"
    register: rhosts_result
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - creating backup directory
    file:
      path: /etc/ansible/backup/rhosts
      state: directory
      mode: '0750'
      recurse: yes
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/rhosts"
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - Removing .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.11
      - six
      - remedy
      - all   
      
  - name: 6.2.12 - Fetch the groups value from ansible facts
    shell: echo "{{ ansible_local.groups_6212_audit }}"
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.12
      - six
      - remedy
      - all

  - name: 6.2.12 - Adding groups to correct if any discrepancies found
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              groupadd $a
              usermod -g $a $a
            fi
        done
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.12
      - six
      - remedy
      - all
      
  - name: 6.2.13 - Fetch the duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6213_audit }}" 
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Checking for duplicate UID
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Checking for duplicate UID
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when:
      - duplicateuid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Checking for duplicate UID
    shell: "b=$(grep '/home/' /etc/passwd | cut -d':' -f3 |  sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c || true"
    register: val
    when:
      - duplicateuid.stdout.find("FAILED") != -1
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Assign an unique UID 
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicateuid.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.13
      - six
      - remedy
      - all
      
  - name: 6.2.14 - Fetch the duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6214_audit }}" 
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Checking for duplicate GID
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Checking for duplicate GID
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Checking for duplicate GID
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.14 - Assign an unique GID 
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicategid.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.14
      - six
      - remedy
      - all

  - name: 6.2.15 - Fetch the duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6215_audit }}" 
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.15
      - six
      - remedy
      - all

  - name: 6.2.15 - Checking if duplicate user name exist
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.15
      - six
      - remedy
      - all

  - name: 6.2.15 - Checking if duplicate user name exist
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when:
      - duplicateuser.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.15
      - six
      - remedy
      - all

  - name: 6.2.15 - Displaying if duplicate user name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicateuser.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.15
      - six
      - remedy
      - all
      
  - name: 6.2.16 - Fetch the duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6216_audit }}" 
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.16
      - six
      - remedy
      - all
 
  - name: 6.2.16 - Checking if duplicate group name exist
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Checking if duplicate group name exist
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'"
    register: val
    when:
      - duplicategroup.stdout.find("FAILED") != -1 
      - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.16 - Displaying if duplicate group name exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
      - duplicategroup.stdout.find("FAILED") != -1 
      - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.16
      - six
      - remedy
      - all

  - name: 6.2.17 - Fetch the shadowgroup value from ansible facts
    shell: echo "{{ ansible_local.shadowgroup_6217_audit }}"
    register: shadowgroup
    ignore_errors: True
    become: yes
    tags:
      - shadowgroup
      - 6.2.17
      - six
      - remedy
      - all
      
  - name: 6.2.17 - Removing groups assigned to shadow group
    shell: |
       a=$(cat /etc/group | grep "^shadow" | awk -F: '{print $3}')
       if [ $(cat /etc/group | grep "^shadow" | wc -l) -gt 0 ]; then
           for i in $(cat /etc/passwd | cut -d, -f1-3 | grep "$a" | awk -F: '{print $1}'); do
              usermod -g users $i
            done
       fi
    failed_when: no
    when: shadowgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shadowgroup
      - 6.2.17
      - six
      - remedy
      - all

  - name: Include Database
    include: tasks/after_linux.yml
