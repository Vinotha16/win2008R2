---
  - name: Include Actualfact
    include: tasks/actualfact_oraclelinux8.yml

  - name: Include Database
    include: tasks/before_linux.yml

  - name: reloading ansible_local audit
    setup: fact_path=/etc/ansible/audit.d
    become: yes
    become_method: sudo
    tags:
     - always

####REMEDY####
  - name: 1.1.1.1 - Fetching the cramfs value from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit }}"
    register: cramfs
    ignore_errors: True
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.1 - Creating cramfs configuration file 
    lineinfile:
      path: /etc/modprobe.d/cramfs.conf
      line: "install cramfs /bin/true # Disable cramfs Filesystems"
      state: present
      create: yes
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.1 - Unloading cramfs module
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Fetching the vfat value from ansible facts
    shell: echo "{{ ansible_local.vfat_1112_audit }}"
    register: vfat
    ignore_errors: True
    become: yes
    tags:
      - vfat
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Creating vfat configuration file 
    lineinfile:
      path: /etc/modprobe.d/vfat.conf
      line: "install vfat /bin/true # Disable vfat filesystems"
      state: present
      create: yes
    when: vfat.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vfat
      - 1.1.1.2
      - one
      - all
      - remedy

  - name: 1.1.1.2 - Unloading vfat module
    shell: "rmmod vfat"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vfat
      - 1.1.1.a
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Fetching the squashfs value from ansible facts
    shell: echo "{{ ansible_local.squashfs_1113_audit }}"
    register: squashfs
    ignore_errors: True
    become: yes
    tags:
      - squashfs
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.3 - Creating squashfs configuration file
    lineinfile:
      path: /etc/modprobe.d/squashfs.conf
      line: "install squashfs /bin/true # Disable suqashfs filesystems"
      state: present
      create: yes
    when: squashfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.3
      - one
      - all  
      - remedy

  - name: 1.1.1.3 - Unloading squashfs module
    shell: "rmmod squashfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - squashfs
      - 1.1.1.3
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Fetching the udf value from ansible facts
    shell: echo "{{ ansible_local.udf_1114_audit }}"
    register: udf
    ignore_errors: True
    become: yes
    tags:
      - udf
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Creating udf configuration file 
    lineinfile:
      path: /etc/modprobe.d/udf.conf
      line: "install udf /bin/true # Disable udf Filesystems"
      state: present
      create: yes
    when: udf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.1.4 - Unloading udf module
    shell: "rmmod udf"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - udf
      - 1.1.1.4
      - one
      - all
      - remedy

  - name: 1.1.2 Fetching the tmp value from ansible facts
    shell: echo "{{ ansible_local.tmp_112_audit }}"
    register: tmp
    ignore_errors: True
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 Enabling tmp.mount with masked value as no
    systemd:
      name: tmp.mount
      enabled: yes
      masked: no
    when: tmp.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.2 configuring /tmp.mount
    lineinfile:
      path: /etc/systemd/system/local-fs.target.wants/tmp.mount
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "[Mount]"
      - "What=tmpfs"
      - "Where=/tmp"
      - "Type=tmpfs"
      - "Options=mode=1777,strictatime,noexec,nodev,nosuid"
    when: tmp.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
     - tmp
     - 1.1.2
     - one
     - all
  
  - name: 1.1.2 Enabling tmp.mount
    systemd:
      name: tmp.mount
      enabled: yes
    when: tmp.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmp
      - 1.1.2
      - one
      - all
      - remedy

  - name: 1.1.3 Fetching the tmpnodev value from ansible facts
    shell: echo "{{ ansible_local.tmpnodev_113_audit }}"
    register: tmpnodev
    ignore_errors: True
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.3 Adding nodev to the /tmp.mount and Remounting /tmp 
    mount:
      path: /tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    when: tmpnodev.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnodev
      - 1.1.3
      - one
      - all
      - remedy

  - name: 1.1.4 - Fetching the tmpnosuid value from ansible facts
    shell: echo "{{ ansible_local.tmpnosuid_114_audit }}"
    register: tmpnosuid
    ignore_errors: True
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - all
      - remedy

  - name: 1.1.4 - Adding nosuid to the /tmp.mount and Remounting /tmp
    mount:
      path: /tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    when: tmpnosuid.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnosuid
      - 1.1.4
      - one
      - all
      - remedy

  - name: 1.1.5 - Fetching the tmpnoexec value from ansible facts
    shell: echo "{{ ansible_local.tmpnoexec_115_audit }}"
    register: tmpnoexec
    ignore_errors: True
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.5 - Adding noexec to the /tmp.mount and Remounting /tmp 
    mount:
      path: /tmp
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    when: tmpnoexec.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - tmpnoexec
      - 1.1.5
      - one
      - all
      - remedy

  - name: 1.1.6 Fetching the var value from ansible facts
    shell: echo "{{ ansible_local.var_116_audit }}"
    register: var
    ignore_errors: True
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 Grep /var from /etc/fstab
    shell: sudo grep "/var " /etc/fstab | wc -l
    ignore_errors: yes
    register: uname_result
    when: var.stdout.find("FAILED") != -1
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.6 Ensure separate partition exists for /var 
    debug: msg="The partition /var is already created"
    when:  
    - var.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags:
      - var
      - 1.1.6
      - one
      - all
      - remedy

  - name: 1.1.7 - Fetching the vartmp value from ansible facts
    shell: echo "{{ ansible_local.vartmp_117_audit }}"
    register: vartmp
    ignore_errors: True
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - all
      - remedy

  - name: 1.1.7 - Grep /var/tmp from /etc/fstab
    shell: sudo grep "/var/tmp " /etc/fstab | wc -l
    ignore_errors: yes
    register: uname_result
    when: vartmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vartmp
      - 1.1.7
      - one
      - all
      - remedy

  - name: 1.1.7 - Ensure separate partition exists for /var/tmp
    debug: msg="The partition /var/tmp is already created"
    when: 
    - vartmp.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags: 
      - vartmp
      - 1.1.7
      - one
      - all
      - remedy

  - name: 1.1.8 Fetching the vtnodev value from ansible facts
    shell: echo "{{ ansible_local.vtnodev_118_audit }}"
    register: vtnodev
    ignore_errors: True
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - all
      - remedy

  - name: 1.1.8 Adding nodev to the /var/tmp and Remounting /tmp 
    mount:
      path: /var/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    when: vtnodev.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - vtnodev
      - 1.1.8
      - one
      - all
      - remedy

  - name: 1.1.9 Fetching the vtnosuid value from ansible facts
    shell: echo "{{ ansible_local.vtnosuid_119_audit }}"
    register: vtnosuid
    ignore_errors: True
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - all
      - remedy

  - name: 1.1.9 Adding nosuid to the /var/tmp and Remounting /tmp
    mount:
      path: /var/tmp
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: vtnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnosuid
      - 1.1.9
      - one
      - all
      - remedy

  - name: 1.1.10 Fetching the vtnoexec value from ansible facts
    shell: echo "{{ ansible_local.vtnoexec_1110_audit }}"
    register: vtnoexec
    ignore_errors: True
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.10  Adding noexec to the /var/tmp and Remounting /tmp
    mount:
      path: /var/tmp
      src: /etc
      opts: noexec
      fstype: non
      state: remounted
    failed_when: no
    when: vtnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - vtnoexec
      - 1.1.10
      - one
      - all
      - remedy

  - name: 1.1.11 Fetching the varlog value from ansible facts
    shell: echo "{{ ansible_local.varlog_1111_audit }}"
    register: varlog
    ignore_errors: True
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 Grep /var/log from /etc/fstab 
    shell: sudo grep "/var/log " /etc/fstab | wc -l
    ignore_errors: yes
    register: uname_result
    when: varlog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.11 Ensure separate partition exists for /var/log
    debug: msg="The partition /var/log is already created"
    when: 
    - varlog.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags:
      - varlog
      - 1.1.11
      - one
      - all
      - remedy

  - name: 1.1.12 Fetching the varlogaudit value from ansible facts
    shell: echo "{{ ansible_local.varlogaudit_1112_audit }}"
    register: varlogaudit
    ignore_errors: True
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.12  Grep /var/log/audit from /etc/fstab 
    shell: sudo grep "/var/log/audit" /etc/fstab | wc -l
    ignore_errors: yes
    register: uname_result
    when: varlogaudit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.12 Ensure separate partition exists for /var/log/audit 
    debug: msg="The partition /var/log/audit is already created"
    when:
    - varlogaudit.stdout.find("FAILED") != -1 
    - uname_result.stdout == "0" 
    become: yes
    tags:
      - varlogaudit
      - 1.1.12
      - one
      - all
      - remedy

  - name: 1.1.13 Fetching the home value from ansible facts
    shell: echo "{{ ansible_local.home_1113_audit }}"
    register: home
    ignore_errors: True
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.13 Grep /home from /etc/fstab   
    shell: '(sudo grep /home /etc/fstab | wc -l)'
    ignore_errors: yes
    register: uname_result
    when: home.stdout.find("FAILED") != -1
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.13 Ensure separate partition exists for /home
    debug: msg="The partition /home is already created"
    when:
    - home.stdout.find("FAILED") != -1  
    - uname_result.stdout == "0"
    become: yes
    tags:
      - home
      - 1.1.13
      - one
      - all
      - remedy

  - name: 1.1.14 Fetching the homenodev value from ansible facts
    shell: echo "{{ ansible_local.homenodev_1114_audit }}"
    register: homenodev
    ignore_errors: True
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - all
      - remedy

  - name: 1.1.14 Adding nodev to the /home and remounting
    mount:
      path: /home
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: homenodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - homenodev
      - 1.1.14
      - one
      - all
      - remedy

  - name: 1.1.15 Fetching the shmnodev value from ansible facts
    shell: echo "{{ ansible_local.shmnodev_1115_audit }}"
    register: shmnodev
    ignore_errors: True
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - all
      - remedy

  - name: 1.1.15 Adding nodev to the /dev/shm and remounting
    mount:
      path: /dev/tmp
      src: /etc
      opts: nodev
      fstype: none
      state: remounted
    failed_when: no
    when: shmnodev.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnodev
      - 1.1.15
      - one
      - all
      - remedy
 
  - name: 1.1.16 Fetching the shmnosuid value from ansible facts
    shell: echo "{{ ansible_local.shmnosuid_1116_audit }}"
    register: shmnosuid
    ignore_errors: True
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - all
      - remedy

  - name: 1.1.16 Adding nosuid to the /dev/shm and remounting
    mount:
      path: /dev/shm
      src: /etc
      opts: nosuid
      fstype: none
      state: remounted
    failed_when: no
    when: shmnosuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnosuid
      - 1.1.16
      - one
      - all
      - remedy
 
  - name: 1.1.17 Fetching the shmnoexec value from ansible facts  
    shell: echo "{{ ansible_local.shmnoexec_1117_audit }}"
    register: shmnoexec
    ignore_errors: True
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - all
      - remedy
 
  - name: 1.1.17 Adding noexec to the /dev/shm and remounting
    mount:
      path: /dev/shm
      src: /etc
      opts: noexec
      fstype: none
      state: remounted
    failed_when: no
    when: shmnoexec.stdout.find("FAILED") != -1
    become: yes
    tags:
      - shmnoexec
      - 1.1.17
      - one
      - all
      - remedy

  - name: 1.1.18 - Fetching the medianodev value from ansible facts
    shell: echo "{{ ansible_local.medianodev_1118_audit }}"
    register: medianodev
    ignore_errors: True
    become: yes
    tags:
      - medianodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.18 - nodev option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nodev/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes	
    when: medianodev.stdout.find("FAILED") != -1	
    tags:
      - medianodev
      - 1.1.18
      - one
      - remedy
      - all

  - name: 1.1.19 - Fetching the medianosuid value from ansible facts
    shell: echo "{{ ansible_local.medianosuid_1119_audit }}"
    register: medianosuid
    ignore_errors: True
    become: yes
    tags:
      - medianosuid
      - 1.1.19
      - one
      - remedy
      - all

  - name: 1.1.19 - nosuid option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,nosuid/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianosuid.stdout.find("FAILED") != -1	
    tags:
      - medianosuid
      - 1.1.19
      - one
      - remedy	  
      - all

  - name: 1.1.20 - Fetching the medianoexec value from ansible facts
    shell: echo "{{ ansible_local.medianoexec_1120_audit }}"
    register: medianoexec
    ignore_errors: True
    become: yes
    tags:
      - medianoexec
      - 1.1.20
      - one
      - remedy
      - all

  - name: 1.1.20 - noexec option is set on removable media partitions
    shell: |
       for a in $(mount -l -t vfat,iso9660,ext | awk '{print $1}'); do
           for i in $(grep "$a" /etc/fstab | awk '{print $4}'); do
              b=$(grep -nr $a /etc/fstab | sed 's/^\([0-9]\+\):.*$/\1/')
                  sed -i "$b s/$i/&,noexec/g" /etc/fstab
           done
       done
    failed_when: no
    become: yes
    when: medianoexec.stdout.find("FAILED") != -1
    tags:
      - medianoexec
      - 1.1.20
      - one
      - remedy
      - all
      
  - name: 1.1.21 Fetching the stickybit value from ansible facts 
    shell: echo "{{ ansible_local.stickybit_1121_audit }}"
    register: stickybit
    ignore_errors: True
    become: yes
    tags:
      - stickybit
      - 1.1.21
      - one
      - all
      - remedy

  - name: 1.1.21 Setting the sticky bit on all world writable directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    changed_when: no
    failed_when: no
    when: stickybit.stdout.find("FAILED") != -1
    become: yes
    tags:
      - stickybit
      - 1.1.21
      - one
      - all  
      - remedy
 
  - name: 1.1.22 - Fetching the automount value from ansible facts
    shell: echo "{{ ansible_local.automount_1122_audit }}"
    register: automount
    ignore_errors: True
    become: yes
    tags:
      - automount
      - 1.1.22
      - one
      - all
      - remedy
 
  - name: 1.1.22 - Disable autofs
    service:
      name: autofs
      enabled: no
    failed_when: no
    when: automount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - automount
      - 1.1.22
      - one
      - all
      - remedy

  - name: 1.1.23 Fetching the ubstorage value from ansible facts
    shell: echo "{{ ansible_local.usbstorage_1123_audit }}"
    register: usbstorage
    ignore_errors: True
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - all
      - remedy

  - name: 1.1.23 Install USB Storage 
    lineinfile:
      state: present
      dest: /etc/modprobe.d/usb-storage.conf
      line: 'install usb-storage /bin/true'
      create: yes
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - all 
      - remedy

  - name: 1.1.23 Disable USB Storage
    modprobe:
      name: usb-storage
      state: absent
    when: usbstorage.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usbstorage
      - 1.1.23
      - one
      - all
      - remedy
 
  - name: 1.2.1 - Fetching the gpgkey value from ansible facts
    shell: echo "{{ ansible_local.gpgkey_121_audit }}"
    register: gpgkey
    ignore_errors: True
    become: yes
    tags:
      - gpgkey
      - 1.2.1
      - one
      - all
      - remedy
 
  - name: 1.2.1 - Updating package manager GPG keys in accordance with site policy.
    command: sudo rpm -qa gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
    changed_when: no
    failed_when: no
    when: gpgkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.1
      - gpgkey
      - one
      - all
      - remedy

  - name: 1.2.2 - Fetching the gpgcheck value from ansible facts
    shell: echo "{{ ansible_local.gpgcheck_122_audit }}"
    register: gpgcheck
    ignore_errors: True
    become: yes
    tags:
      - gpgcheck
      - 1.2.2
      - one
      - all
      - remedy

  - name: 1.2.2 - Editing /etc/yum.conf and set 'gpgcheck=1'
    lineinfile:
      name: /etc/yum.conf
      regexp: "^gpgcheck=*"
      line: "gpgcheck=1"
    when: gpgcheck.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.2.2
      - gpgcheck
      - one
      - all
      - remedy

  - name: grep gpgcheck=0 in yum.repos.d
    shell: grep -iRl ^gpgcheck=0 /etc/yum.repos.d/*
    register: gpgcheck
    when: gpgcheck.stdout.find("FAILED") != -1

  - debug: msg={{gpgcheck}}

  - name: Change gpgcheck=0 to gpgcheck=1 in /etc/yum.repos.d/*
    shell: "sed -i 's/gpgcheck=0/gpgcheck=1/g' {{item}}"
    loop: "{{ gpgcheck.stdout_lines }}"
    when: gpgcheck.stdout.find("FAILED") != -1

  - name: 1.2.3 Fetching the repoconfig value from ansible facts
    shell: echo "{{ ansible_local.repoconfig_123_audit }}"
    register: repoconfig
    ignore_errors: True
    become: yes
    tags:
      - repoconfig
      - 1.2.3
      - one
      - all
      - remedy

  - name: 1.2.3 Configuring package manager repositories according to site policy
    yum:
      name: repolist
    failed_when: no
    when: repoconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
     - 1.2.3
     - repoconfig
     - one
     - all

  - name: 1.3.1 -  Fetching the sudo value from ansible facts
    shell: echo "{{ ansible_local.sudo_131_audit }}"
    register: sudo
    ignore_errors: True
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 -  Verifying sudo version 
    shell: (rpm -q sudo | grep 'sudo-[0-9]\+' | wc -l)
    ignore_errors: yes
    register: uname_result
    when: sudo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 -  Checking sudo is already installed or not
    debug: msg="Ensure sudo is already installed"
    when: 
    - sudo.stdout.find("FAILED") != -1
    - uname_result.stdout != "0"
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 - Checking sudo is installed or not
    yum: name=sudo state=present
    when: sudo.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all
      - remedy

  - name: 1.3.1 -  Ensure sudo is now installed
    debug: msg="Ensure sudo is now installed"
    when: 
    - sudo.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags:
      - sudo
      - 1.3.1
      - one
      - all 
      - remedy

  - name: 1.3.2 - Fetching the sudopty value from ansible facts
    shell: echo "{{ ansible_local.sudopty_132_audit }}"
    register: sudopty
    ignore_errors: True
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy

  - name:  1.3.2 - Checks whether sudo use pty
    shell: (grep -Ei '^\s*Defaults\s+(\[^#]+,\s*)?use_pty' /etc/sudoers /etc/sudoers.d/* 2> /dev/null | wc -l )
    ignore_errors: yes
    register: uname_result
    when: sudopty.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy

  - name: 1.3.2 - Ensure sudo commands already use pty 
    debug: msg="sudo commands already use pty"
    when:
    - sudopty.stdout.find("FAILED") != -1 
    - uname_result.stdout != "0"
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy

  - name: 1.3.2 - Ensure sudo commands use pty 
    lineinfile:
      state: present
      dest: /etc/sudoers
      line: 'Defaults use_pty'
    when: sudopty.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all
      - remedy

  - name: 1.3.2 - Ensure sudo commands use pty 
    debug: msg="sudo commands now use pty"
    when: 
    - sudopty.stdout.find("FAILED") != -1
    - uname_result.stdout == "0"
    become: yes
    tags:
      - sudopty
      - 1.3.2
      - one
      - all 
      - remedy

  - name: 1.3.3 - Fetching the sudologfiles value from ansible facts 
    shell: echo "{{ ansible_local.sudologfiles_133_audit }}"
    register: sudologfiles
    ignore_errors: True
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name:  1.3.3 - Checks whether sudo log file exists
    shell: ( grep -Ei '^\s*Defaults\s+([^#]+,\s*)?logfile=' /etc/sudoers /etc/sudoers.d/* 2>/dev/null | wc -l)
    ignore_errors: yes
    register: uname_result
    when: sudologfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name:  1.3.3 - Ensure sudo log file exists
    debug: msg="Ensure sudo log file already exists"
    when: 
    - sudologfiles.stdout.find("FAILED") != -1
    - uname_result.stdout != "0"
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name: 1.3.3 - Ensure sudo log file is created
    lineinfile:
      state: present
      path: /etc/sudoers
      line: 'Defaults logfile="/var/log/sudo.log"'
    when: sudologfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name: 1.3.3 - Checks Sudo log file exists
    debug: msg='Ensure sudo log file now exists'
    when:
    - sudologfiles.stdout.find("FAILED") != -1 
    - uname_result.stdout == "0"
    become: yes
    tags:
      - sudologfiles
      - 1.3.3
      - one
      - all
      - remedy

  - name: 1.4.1 - Fetching the aide value from ansible facts
    shell: echo "{{ ansible_local.aide_141_audit }}"
    register: aide
    ignore_errors: True
    become: yes
    tags:
      - aide
      - 1.4.1
      - one
      - all
      - remedy

  - name: 1.4.1 - Ensure AIDE is installed
    yum:
     name: aide
     state: present
    failed_when: no
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.1
      - aide
      - one
      - all
      - remedy

  - name: 1.4.1 - Initializing AIDE and environment setup
    command: /usr/sbin/aide --init -B 'database_out=file:/var/lib/aide/aide.db.gz'
    args:
      creates: /var/lib/aide/aide.db.gz
    changed_when: no
    failed_when: no
    async: 45
    poll: 0
    when: aide.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.1
      - aide
      - one
      - all
      - remedy

  - name: 1.4.2 - Fetching the fsintegrity value from ansible facts
    shell: echo "{{ ansible_local.fsintegrity_142_audit }}"
    register: fsintegrity
    ignore_errors: True
    become: yes
    tags:
      - fsintegrity
      - 1.4.2
      - one
      - all
      - remedy

  - name: 1.4.2 - Filesystem integrity Check
    cron:
      name: Run Aide integrity check weekly
      user: "root"
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "usr/sbin/aide --check"
    when: fsintegrity.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.4.2
      - fsintegrity
      - one
      - all
      - remedy

  - name: 1.5.1 -  Fetching the bootloadperm value from ansible facts
    shell: echo "{{ ansible_local.bootloadperm_151_audit }}"
    register: bootloadperm
    ignore_errors: True
    become: yes
    tags:
      - bootloadperm
      - 1.5.1
      - one
      - all
      - remedy

  - name: 1.5.1 - Setting permissions in /boot/grub2/grub.cfg
    file:
      path: /boot/grub2/grub.cfg
      owner: root
      group: root
      mode: og-rwx
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - bootloadperm
      - one
      - all
      - remedy

  - name: 1.5.1 - Setting permissions in /boot/grub2/grubenv
    file:
      path: /boot/grub2/grubenv
      owner: root
      group: root
      mode: og-rwx
    when: bootloadperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.1
      - bootloadperm
      - one
      - all
      - remedy
 
  - name: 1.5.2 - Fetching the bootloadpass value from ansible facts
    shell: echo "{{ ansible_local.bootloadpass_152_audit }}"
    register: bootloadpass
    ignore_errors: True
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Installing pip2
    yum: name=python-pip state=present
    when: 
      - ansible_python_version <= "3.0.0"
      - bootloadpass.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Installing pip2 package[pexpect]
    pip:
      name: pexpect
    failed_when: no
    when: 
      - ansible_python_version <= "3.0.0"
      - bootloadpass.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Checking if pexpect package available
    shell: (pip3 search pexpect | grep INSTALLED | wc -l)
    register: check_pexpect
    ignore_errors: yes
    when: 
      - ansible_python_version >= "3.0.0"
      - bootloadpass.stdout.find("FAILED") != -1  
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Installing pip3 package[pexpect]
    pip:
      name: pexpect
    when:
      - ansible_python_version >= "3.0.0"
      - check_pexpect.stdout == "0"
      - bootloadpass.stdout.find("FAILED") != -1  
    failed_when: no
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy
 
  - name: 1.5.2 - Creating an encrypted password with grub2-setpassword
    expect:
      command: grub2-setpassword
      responses:
        Enter password: "{{ bootloader_password }}"
        Confirm password: "{{ bootloader_password }}"
    failed_when: no
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.2 - Updating the grub2 configuration
    command: grub2-mkconfig -o /boot/grub2/grub.cfg
    failed_when: no
    when: bootloadpass.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bootloadpass
      - 1.5.2
      - one
      - all
      - remedy

  - name: 1.5.3 - Fetching the singleusermode value from ansible facts
    shell: echo "{{ ansible_local.singleusermode_153_audit }}"
    register: singleusermode
    ignore_errors: True
    become: yes
    tags:
      - singleusermode
      - 1.5.3
      - one
      - all
      - remedy

  - name: 1.5.3 - Editing /usr/lib/systemd/system/rescue.service
    replace:
      path: /usr/lib/systemd/system/rescue.service
      regexp: '^(ExecStart=*)'
      replace: 'ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue'
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
     - singleusermode
     - 1.5.3
     - one
     - all

  - name: 1.5.3 - Editing the following /usr/lib/systemd/system/emergency.service
    replace:
      path: /usr/lib/systemd/system/emergency.service
      regexp: '^(ExecStart=*)'
      replace: 'ExecStart=-/usr/lib/systemd/systemd-sulogin-shell emergency'
    when: singleusermode.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.5.3
      - singleusermode
      - one
      - all
      - remedy

  - name: 1.6.1 - Fetching the coredumps value from ansible facts
    shell: echo "{{ ansible_local.coredumps_161_audit }}"
    register: coredumps
    ignore_errors: True
    become: yes
    tags:
      - coredumps
      - 1.6.1
      - one
      - all
      - remedy

  - name: 1.6.1 - Adding hard core 0
    lineinfile:
      state: present
      dest: /etc/security/limits.conf
      regexp: '^#?\\*.*core'
      line: '* hard core 0'
      insertbefore: '^# End of file'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.6.1 -  Setting parameter fs.suid_dumpable = 0 
    lineinfile:
      state: present
      dest: /etc/sysctl.conf
      regexp: "^fs.suid_dumpable*"
      line: 'fs.suid_dumpable=0'
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.6.1 - Set the active kernal parameter
    sysctl:
      name: fs.suid_dumpable
      value: 0
      state: present
      reload: yes
      sysctl_set: yes
    when: coredumps.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.1
      - coredumps
      - one
      - all
      - remedy

  - name: 1.6.2 - Fetching the aslr value from ansible facts
    shell: echo "{{ ansible_local.aslr_162_audit }}"
    register: aslr
    ignore_errors: True
    become: yes
    tags:
      - aslr
      - 1.6.2
      - one
      - all
      - remedy

  - name: 1.6.2 -  Editing configuration file and adding lines
    lineinfile:
      path: /etc/sysctl.conf
      line: kernel.randomize_va_space = 2
      state: present
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2
      - aslr
      - one
      - all
      - remedy

  - name: 1.6.2 - Set the active kernel parameter
    sysctl:
      name: kernel.randomize_va_space
      value: 2
      state: present
      reload: yes
      sysctl_set: yes
    when: aslr.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.6.2
      - aslr
      - one
      - all
      - remedy
 
  - name: 1.7.1.1 - Fetching the selinux value from ansible facts
    shell: echo "{{ ansible_local.selinux_1711_audit }}"
    register: selinux
    ignore_errors: True
    become: yes
    tags:
      - selinux
      - 1.7.1.1
      - one
      - all
      - remedy
 
  - name: 1.7.1.1 - Ensure SELinux is installed
    yum:
      name: libselinux
      state: present
    failed_when: no
    when: selinux.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.1
      - selinux
      - one
      - all
      - remedy
 
  - name: 1.7.1.2 - Fetching the automount value from ansible facts
    shell: echo "{{ ansible_local.seldisable_1712_audit }}"
    register: seldisable
    ignore_errors: True
    become: yes
    tags:
      - seldisable
      - 1.7.1.2
      - one
      - all
      - remedy
 
  - name: 1.7.1.2 - Update the grub2 configuration
    replace:
      dest: /boot/grub/grub.conf
      regexp: '(selinux|enforcing)\s*=\s*0\s*'
      follow: yes
    register: selinux_grub_patch
    failed_when: no
    when: seldisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.2
      - seldisable
      - one
      - all
      - remedy

  - name: 1.7.1.3 - Fetching the selpolicy value from ansible facts
    shell: echo "{{ ansible_local.selpolicy_1713_audit }}"
    register: selpolicy
    ignore_errors: True
    become: yes
    tags:
      - selpolicy
      - 1.7.1.3
      - one
      - all
      - remedy

  - name: 1.7.1.3 - Set the SELINUXTYPE parameter
    replace:
      path: /etc/selinux/config
      regexp: '^SELINUXTYPE=*'
      replace: 'SELINUXTYPE=targeted'
    when: selpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.3
      - selpolicy
      - one
      - all
      - remedy

  - name: 1.7.1.4 - Fetching the selstate value from ansible facts
    shell: echo "{{ ansible_local.selstate_1714_audit }}"
    register: selstate
    ignore_errors: True
    become: yes
    tags:
      - selstate
      - 1.7.1.4
      - one
      - all
      - remedy

  - name: 1.7.1.4 -  Set the SELinux state from disable to enforcing
    replace:
      path: /etc/selinux/config
      regexp: '^SELINUX=disabled'
      replace: 'SELINUX=enforcing'
    when: selstate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.4
      - selstate
      - one
      - all
      - remedy

  - name: 1.7.1.4 - Ensure the SELinux state from permissive to enforcing
    replace:
      path: /etc/selinux/config
      regexp: '^SELINUX=permissive'
      replace: 'SELINUX=enforcing'
    when: selstate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.4
      - selstate
      - one
      - all
      - remedy

  - name: 1.7.1.6 - Fetching the setroubleshoot value from ansible facts
    shell: echo "{{ ansible_local.setroubleshoot_1716_audit }}"
    register: setroubleshoot
    ignore_errors: True
    become: yes
    tags:
      - setroubleshoot
      - 1.7.1.6
      - one
      - all
      - remedy

  - name: 1.7.1.6 - Uninstall SETroubleshoot 
    yum:
      name: setroubleshoot
      state: absent
    failed_when: no
    when: setroubleshoot.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.6
      - setroubleshoot
      - one
      - all
      - remedy

  - name: 1.7.1.7 - Fetching the mcs value from ansible facts
    shell: echo "{{ ansible_local.mcs_1717_audit }}"
    register: mcs
    ignore_errors: True
    become: yes
    tags:
      - 1.7.1.7
      - mcs
      - one
      - all
      - remedy

  - name: 1.7.1.7 -  Uninstall mcstrans
    yum:
      name: mcstrans
      state: absent
    failed_when: no
    when: mcs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.7.1.7
      - mcs
      - one
      - all
      - remedy

  - name: 1.8.1.1 -  Fetching the msgday value from ansible facts
    shell: echo "{{ ansible_local.msgday_1811_audit }}"
    register: msgday
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.1
      - msgday
      - one
      - all
      - remedy

  - name: 1.8.1.1 - Ensure message of the day is configured properly
    lineinfile:
      path: /etc/motd
      state: present
      line: "Welcome to RedHat 8"
    failed_when: no
    when: msgday.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.1
      - msgday
      - one
      - all 
      - remedy
 
  - name: 1.8.1.2 - Fetching the locallogin value from ansible facts
    shell: echo "{{ ansible_local.locallogin_1812_audit }}"
    register: locallogin
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.2
      - locallogin
      - one
      - all
      - remedy
 
  - name: 1.8.1.2 - Ensure local login warning banner is configured properly
    shell: echo "" > /etc/issue
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.2
      - locallogin
      - one
      - all
      - remedy

  - name: 1.8.1.2 - Editing /etc/issue file with the appropriate contents according to our site policy
    lineinfile:
      path: /etc/issue
      line: "Authorized uses only. All activity may be monitored and reported"
      state: present
    when: locallogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.2
      - locallogin
      - one
      - all
      - remedy
 
  - name: 1.8.1.3 - Fetching the remotelogin value from ansible facts
    shell: echo "{{ ansible_local.remotelogin_1813_audit }}"
    register: remotelogin
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.3
      - remotelogin
      - one
      - all 
      - remedy
 
  - name: 1.8.1.3 -  Editing /etc/issue.net file with the appropriate contents according to our site policy
    shell: echo "" > /etc/issue.net
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.3
      - remotelogin
      - one
      - all
      - remedy
  
  - name: 1.8.1.3 - Ensure remote login warning banner is configured properly
    lineinfile:
      path: /etc/issue.net
      line: "Authorized uses only. All activity may be monitored and reported"
    when: remotelogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.3
      - remotelogin
      - one
      - all
      - remedy

  - name: 1.8.1.4 - Fetching the motdperm value from ansible facts
    shell: echo "{{ ansible_local.motdperm_1814_audit }}"
    register: motdperm
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.4
      - motdperm
      - one
      - all 
      - remedy

  - name: 1.8.1.4 - SET permissions on /etc/motd
    file:
      path: /etc/motd
      state: file
      owner: root
      group: root
      mode: 0644
    when: motdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.4
      - motdperm
      - one
      - all
      - remedy

  - name: 1.8.1.5 - Fetching the issueperm value from ansible facts
    shell: echo "{{ ansible_local.issueperm_1815_audit }}"
    register: issueperm
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.5
      - issueperm
      - one
      - all 
      - remedy

  - name: 1.8.1.5 - Set permissions on /etc/issue 
    file:
      path: /etc/issue
      state: file
      owner: root
      group: root
      mode: 0644
    when: issueperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.5
      - issueperm
      - one
      - all
      - remedy

  - name: 1.8.1.6 - Fetching the issuenetperm value from ansible facts
    shell: echo "{{ ansible_local.issuenetperm_1816_audit }}"
    register: issuenetperm
    ignore_errors: True
    become: yes
    tags:
      - 1.8.1.6
      - issuenetperm
      - one
      - all 
      - remedy

  - name: 1.8.1.6 - Set permissions on /etc/issue.net
    file:
      dest: /etc/issue.net
      state: file
      owner: root
      group: root
      mode: 0644
    when: issuenetperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.1.6
      - issuenetperm
      - one
      - all
      - remedy

  - name: 1.8.2 - Fetching the gdm value from ansible facts
    shell: echo "{{ ansible_local.gdm_182_audit }}"
    register: gdm
    ignore_errors: True
    become: yes
    tags:
      - 1.8.2
      - gdm
      - one
      - all 
      - remedy

  - name: 1.8.2 - Adding required lines in /etc/gdm3/greeter.dconf-defaults
    lineinfile:
      path: /etc/gdm3/greeter.dconf-defaults 
      line: "{{item}}"
      create: yes
      state: present
    with_items:
      - "[org/gnome/login-screen]"
      - "banner-message-enable=true"
      - "banner-message-text='Authorized uses only. All activity may be monitored and reported.'"
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.2
      - gdm
      - one
      - all
      - remedy

  - name: 1.8.2 - Ensure GDM login banner is configured
    shell: "dconf update"
    failed_when: no
    when: gdm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 1.8.2
      - gdm
      - one
      - all
      - remedy

  - name: 1.10 - Fetching the crypolicy value from ansible facts
    shell: echo "{{ ansible_local.crypolicyfuture_110_audit }}"
    register: crypolicyfuture
    ignore_errors: True
    become: yes
    tags:
      - '1.10'
      - crypolicyfuture
      - one
      - all 
      - remedy

  - name:  1.10 - Updating crypto policy to future
    shell: update-crypto-policies --set FUTURE
    when: crypolicyfuture.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - crypolicyfuture
      - '1.10'
      - one
      - all
      - remedy

  - name: 1.11 - Fetching the crypolicy value from ansible facts
    shell: echo "{{ ansible_local.crypolicy_111_audit }}"
    register: crypolicy
    ignore_errors: True
    become: yes
    tags:
      - '1.11'
      - crypolicy
      - one
      - all 
      - remedy

  - name: 1.11 - Updating crypto policy
    shell: update-crypto-policies --set "{{ CRYPTO_POLICY_oracle8 }}"
    when: crypolicy.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - crypolicy
      - '1.11'
      - one
      - all
      - remedy

#####################################################CHAPTER 2 ##########################################################################

  - name: 2.1.1 - Fetching the xinetd value from ansible facts
    shell: echo "{{ ansible_local.xinetd_211_audit }}"
    register: xinetd
    ignore_errors: True
    become: yes
    tags:
      - 2.1.1
      - xinetd
      - two
      - all 
      - remedy

  - name: 2.1.1 - Remove xinetd
    yum:
      name: xinetd
      state: absent
    when: xinetd.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - 2.1.1
      - xinetd
      - two
      - all
      - remedy

  - name: 2.2.1.1 - Fetching the timesync value from ansible facts
    shell: echo "{{ ansible_local.timesync_2211_audit }}"
    register: timesync
    ignore_errors: True
    become: yes
    tags:
      - 2.2.1.1
      - timesync
      - two
      - all 
      - remedy

  - name: 2.2.1.1 - Installing Chrony
    yum:
      name: chrony
      state: present
    failed_when: no
    when: timesync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.1.1
      - timesync
      - two
      - all
      - remedy
  
  - name: 2.2.1.2 - Fetching the chrony value from ansible facts
    shell: echo "{{ ansible_local.chrony_2212_audit }}"
    register: chrony
    ignore_errors: True
    become: yes
    tags:
      - 2.2.1.2
      - chrony
      - two
      - all
      - remedy

  - name: 2.2.1.2 - Updating /etc/chrony.conf file
    lineinfile:
      path: /etc/chrony.conf
      state: present
      line: server {{ remote_server }}
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.1.2
      - chrony
      - two
      - all      
      - remedy

  - name: 2.2.1.2 - Restarting Chrony 
    service:
      state: restarted
      name: chronyd
    failed_when: no
    when: chrony.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.1.2
      - chrony
      - two
      - all
      - remedy

  - name: 2.2.2 - Fetching the xorg value from ansible facts
    shell: echo "{{ ansible_local.xorg_222_audit }}"
    register: xorg
    ignore_errors: True
    become: yes
    tags:
      - 2.2.2
      - xorg
      - two
      - all 
      - remedy

  - name: 2.2.2 - Removing xorg-x11
    yum:
      name: "xorg-x11*"
      state: absent
    failed_when: no
    when: xorg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.2
      - xorg
      - two
      - all
      - remedy

  - name: 2.2.3 - Fetching the rsync value from ansible facts
    shell: echo "{{ ansible_local.rsync_223_audit }}"
    register: rsync
    ignore_errors: True
    become: yes
    tags:
      - 2.2.3
      - rsync
      - two
      - all 
      - remedy

  - name: 2.2.3 - Disable rsyncd
    service:
      name: rsyncd
      enabled: no
    failed_when: no
    when: rsync.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.3
      - rsync
      - two
      - all
      - remedy

  - name: 2.2.4 - Fetching the avahi value from ansible facts
    shell: echo "{{ ansible_local.avahi_224_audit }}"
    register: avahi
    ignore_errors: True
    become: yes
    tags:
      - 2.2.4
      - avahi
      - two
      - all 
      - remedy

  - name: 2.2.4 - Disable avahi-daemon
    service:
      name: avahi-daemon
      enabled: no
    failed_when: no
    when: avahi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.4
      - avahi
      - two
      - all
      - remedy

  - name: 2.2.5 - Fetching the snmp value from ansible facts
    shell: echo "{{ ansible_local.snmp_225_audit }}"
    register: snmp
    ignore_errors: True
    become: yes
    tags:
      - 2.2.5
      - snmp
      - two
      - all 
      - remedy

  - name: 2.2.5 - Disable snmpd
    service:
      name: snmpd
      enabled: no
    failed_when: no
    when: snmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.5
      - snmp
      - two
      - all
      - remedy

  - name: 2.2.6 - Fetching the proxy value from ansible facts
    shell: echo "{{ ansible_local.proxy_226_audit }}"
    register: proxy
    ignore_errors: True
    become: yes
    tags:
      - 2.2.6
      - proxy
      - two
      - all 
      - remedy

  - name: 2.2.6 - Disable squid
    service:
      name: squid
      enabled: no
    failed_when: no
    when: proxy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.6
      - proxy
      - two
      - all
      - remedy

  - name: 2.2.7 - Fetching the samba value from ansible facts
    shell: echo "{{ ansible_local.samba_227_audit }}"
    register: samba
    ignore_errors: True
    become: yes
    tags:
      - 2.2.7
      - samba
      - two
      - all
      - remedy

  - name: 2.2.7 -  Disable smb 
    service:
      name: smb
      enabled: no
    failed_when: no
    when: samba.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.7
      - samba
      - two
      - all
      - remedy

  - name: 2.2.8 - Fetching the imap value from ansible facts
    shell: echo "{{ ansible_local.imap_228_audit }}"
    register: imap
    ignore_errors: True
    become: yes
    tags:
      - 2.2.8
      - imap
      - two
      - all
      - remedy

  - name: 2.2.8 - Disable dovecot
    service:
      name: dovecot
      enabled: no
    failed_when: no
    when: imap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.8
      - imap
      - two
      - all
      - remedy

  - name: 2.2.9 - Fetching the http value from ansible facts
    shell: echo "{{ ansible_local.http_229_audit }}"
    register: http
    ignore_errors: True
    become: yes
    tags:
      - 2.2.9
      - http
      - two
      - all
      - remedy

  - name: 2.2.9 - Disable httpd
    service:
      name: httpd
      enabled: no
    failed_when: no
    when: http.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.9
      - http
      - two
      - all
      - remedy

  - name: 2.2.10 - Fetching the ftp value from ansible facts
    shell: echo "{{ ansible_local.ftp_2210_audit }}"
    register: ftp
    ignore_errors: True
    become: yes
    tags:
      - 2.2.10
      - ftp
      - two
      - all
      - remedy

  - name: 2.2.10 - Disable vsftpd
    service:
      name: vsftpd
      enabled: no
    failed_when: no
    when: ftp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.10
      - ftp
      - two
      - all
      - remedy

  - name: 2.2.11 - Fetching the dns value from ansible facts
    shell: echo "{{ ansible_local.dns_2211_audit }}"
    register: dns
    ignore_errors: True
    become: yes
    tags:
      - 2.2.11
      - dns
      - two
      - all
      - remedy

  - name: 2.2.11 - Disable named
    service:
      name: named
      enabled: no
    failed_when: no
    when: dns.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.11
      - dns
      - two
      - all
      - remedy

  - name: 2.2.12 - Fetching the nfs value from ansible facts
    shell: echo "{{ ansible_local.nfs_2212_audit }}"
    register: nfs
    ignore_errors: True
    become: yes
    tags:
      - 2.2.12
      - nfs
      - two
      - all
      - remedy

  - name: 2.2.12 - Disable nfs
    service:
      name: nfs
      enabled: no
    failed_when: no
    when: nfs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.12
      - nfs
      - two
      - all
      - remedy

  - name: 2.2.13 - Fetching the rpc value from ansible facts
    shell: echo "{{ ansible_local.rpc_2213_audit }}"
    register: rpc
    ignore_errors: True
    become: yes
    tags:
      - 2.2.13
      - rpc
      - two
      - all
      - remedy

  - name: 2.2.13 - Disable rpc
    service:
      name: rpcbind
      enabled: no
    failed_when: no
    when: rpc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.13
      - rpc
      - two
      - all
      - remedy

  - name: 2.2.14 - Fetching the ldap value from ansible facts
    shell: echo "{{ ansible_local.ldap_2214_audit }}"
    register: ldap
    ignore_errors: True
    become: yes
    tags:
      - 2.2.14
      - ldap
      - two
      - all
      - remedy

  - name: 2.2.14 - Disable slapd
    service:
      name: slapd
      enabled: no
    failed_when: no
    when: ldap.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.14
      - ldap
      - two
      - all
      - remedy

  - name: 2.2.15 - Fetching the dhcp value from ansible facts
    shell: echo "{{ ansible_local.dhcp_2215_audit }}"
    register: dhcp
    ignore_errors: True
    become: yes
    tags:
      - 2.2.15
      - dhcp
      - two
      - all
      - remedy

  - name: 2.2.15 - Disable dhcpd
    service:
      name: dhcpd
      enabled: no
    failed_when: no
    when: dhcp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.15
      - dhcp
      - two
      - all
      - remedy

  - name: 2.2.16 - Fetching the cups value from ansible facts
    shell: echo "{{ ansible_local.cups_2216_audit }}"
    register: cups
    ignore_errors: True
    become: yes
    tags:
      - 2.2.16
      - cups
      - two
      - all
      - remedy

  - name: 2.2.16 - Disable cups
    service:
      name: cups
      enabled: no
    failed_when: no
    when: cups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.16
      - cups
      - two
      - all
      - remedy

  - name: 2.2.17 - Fetching the nis value from ansible facts
    shell: echo "{{ ansible_local.nis_2217_audit }}"
    register: nis
    ignore_errors: True
    become: yes
    tags:
      - 2.2.17
      - nis
      - two
      - all
      - remedy

  - name: 2.2.17 - Disable ypserv
    service:
      name: ypserv
      enabled: no
    failed_when: no
    when: nis.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.17
      - nis
      - two
      - all
      - remedy
  
  - name: 2.2.18 - Fetching the mail value from ansible facts
    shell: echo "{{ ansible_local.mail_2218_audit }}"
    register: mail
    ignore_errors: True
    become: yes
    tags:
      - 2.2.18
      - mail
      - two
      - all
      - remedy

  - name: 2.2.18 - Ensure mail transfer agent is configured for local-only mode
    yum: 
      name: postfix
      state: present
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.18
      - mail
      - two
      - all
      - remedy
  
  - name: 2.2.18 - Editing /etc/postfix/main.cf with repuired lines
    lineinfile:
      path: /etc/postfix/main.cf
      state: present
      regexp: "^inet_interfaces*"
      line: "inet_interfaces = loopback-only"
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.18
      - mail
      - two
      - all
      - remedy

  - name: 2.2.18 - Restart postfix
    service:
      name: postfix
      state: restarted
    failed_when: no
    when: mail.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.2.18
      - mail
      - two
      - all
      - remedy

  - name: 2.3.1 - Fetching the nisc value from ansible facts
    shell: echo "{{ ansible_local.nisc_231_audit }}"
    register: nisc
    ignore_errors: True
    become: yes
    tags:
      - 2.3.1
      - nisc
      - two
      - all
      - remedy

  - name: 2.3.1 - Remove ypbind
    yum:
      name: ypbind
      state: absent
    failed_when: no
    when: nisc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.3.1
      - nisc
      - two
      - all
      - remedy

  - name: 2.3.2 - Fetching the telnetc value from ansible facts
    shell: echo "{{ ansible_local.telnetc_232_audit }}"
    register: telnetc
    ignore_errors: True
    become: yes
    tags:
      - 2.3.2
      - telnetc
      - two
      - all
      - remedy

  - name: 2.3.2 - Ensure TELNET Client is not installed
    yum:
      name: telnet
      state: absent
    failed_when: no
    when: telnetc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 2.3.2
      - telnetc
      - two
      - all
      - remedy

  - name: 2.3.3 - Fetching the ldapc value from ansible facts
    shell: echo "{{ ansible_local.ldapc_233_audit }}"
    register: ldapc
    ignore_errors: True
    become: yes
    tags:
      - 2.3.3
      - ldapc
      - two
      - all
      - remedy

  - name: 2.3.3 - Ensure LDAP client is not installed
    yum:
      name: openldap-clients
      state: absent
    failed_when: no
    when: ldapc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - two
      - 2.3.3
      - ldapc
      - all
      - remedy
################################################################### CHAP 3 ######################################################

  - name: 3.1.1 - Fetching the ipforward value from ansible facts
    shell: echo "{{ ansible_local.ipforward_311_audit }}"
    register: ipforward
    ignore_errors: True
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.1 - IP forwarding set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.ip_forward*", line: "net.ipv4.ip_forward=0"}
      - {regexp: "^net.ipv6.conf.all.forwarding*", line: "net.ipv6.conf.all.forwarding=0"}
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.1 - Updating the values of net.ipv4.ip_forward and net.ipv4.route.flush
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
      - name: net.ipv6.conf.all.forwarding
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: ipforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipforward
      - 3.1.1
      - three
      - all
      - remedy

  - name: 3.1.2 - Fetching the packetredirect value from ansible facts
    shell: echo "{{ ansible_local.packetredirect_312_audit }}"
    register: packetredirect
    ignore_errors: True
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.1.2 - Send_directories set to 0 
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items: 
      - {regexp: "^net.ipv4.conf.all.send_redirects*", line: "net.ipv4.conf.all.send_redirects=0"}
      - {regexp: "^net.ipv4.conf.default.send_redirects*", line: "net.ipv4.conf.default.send_redirects=0"}
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.1.2 - Set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.send_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.send_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: packetredirect.stdout.find("FAILED") != -1
    become: yes
    tags:
      - packetredirect
      - 3.1.2
      - three
      - all
      - remedy

  - name: 3.2.1 - Fetching the routedpacket value from ansible facts
    shell: echo "{{ ansible_local.routedpacket_321_audit }}"
    register: routedpacket
    ignore_errors: True
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 - Accept_source_route set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items: 
      - {regexp: "^net.ipv4.conf.all.accept_source_route*", line: "net.ipv4.conf.all.accept_source_route=0"}
      - {regexp: "^net.ipv4.conf.default.accept_source_route*", line: "net.ipv4.conf.default.accept_source_route=0"}
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.1 -  Set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.accept_source_route 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_source_route
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: routedpacket.stdout.find("FAILED") != -1
    become: yes
    tags:
      - routedpacket
      - 3.2.1
      - three
      - all
      - remedy

  - name: 3.2.2 - Fetching the icmp value from ansible facts
    shell: echo "{{ ansible_local.icmp_322_audit }}"
    register: icmp
    ignore_errors: True
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy

  - name: 3.2.2 - accept_redirects set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.accept_redirects*", line: "net.ipv4.conf.all.accept_redirects=0"}
      - {regexp: "^net.ipv4.conf.default.accept_redirects*", line: "net.ipv4.conf.default.accept_redirects=0"}
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy
 
  - name: 3.2.2 - Set the active kernel parameters
    sysctl: "{{ item }}"
    with_items:
      - name: net.ipv4.conf.all.accept_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.accept_redirects
        value: '0'
        sysctl_set: yes
      -  name: net.ipv4.route.flush
         value: '1'
         sysctl_set: yes
    failed_when: no
    when: icmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - icmp
      - 3.2.2
      - three
      - all
      - remedy
  
  - name: 3.2.3 - Fetching the secureicmp value from ansible facts
    shell: echo "{{ ansible_local.secureicmp_323_audit }}"
    register: secureicmp
    ignore_errors: True
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.3 - secure_redirects set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      line: "{{item.line}}"
      regexp: "{{item.regexp}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.secure_redirects*", line: "net.ipv4.conf.all.secure_redirects=0"}
      - {regexp: "^net.ipv4.conf.default.secure_redirects*", line: "net.ipv4.conf.default.secure_redirects=0"}
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy
  
  - name: 3.2.3 -  Set the active kernel parameters
    sysctl: "{{ item }}"
    with_items: 
      - name: net.ipv4.conf.all.secure_redirects 
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.conf.default.secure_redirects
        value: '0'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: secureicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - secureicmp
      - 3.2.3
      - three
      - all
      - remedy

  - name: 3.2.4 - Fetching the suspicious value from ansible facts
    shell: echo "{{ ansible_local.suspicious_324_audit }}"
    register: suspicious
    ignore_errors: True
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - net.ipv4.conf.all.log_martians set to 1
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.all.log_martians*"
      line: "net.ipv4.conf.all.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - net.ipv4.conf.default.log_martians set to 1
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.conf.default.log_martians*"
      line: "net.ipv4.conf.default.log_martians=1"
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Set the active kernel parameters
    sysctl:
      name: net.ipv4.conf.all.log_martians 
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Set the active kernel parameters
    sysctl:
      name: net.ipv4.conf.default.log_martians
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.4 - Set the active kernel parameters
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: suspicious.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suspicious
      - 3.2.4
      - three
      - all
      - remedy

  - name: 3.2.5 - Fetching the broadcasticmp value from ansible facts
    shell: echo "{{ ansible_local.broadcasticmp_325_audit }}"
    register: broadcasticmp
    ignore_errors: True
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.5 - Updating /etc/sysctl.conf 
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_echo_ignore_broadcasts*"
      line: "net.ipv4.icmp_echo_ignore_broadcasts=1"
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.5 -  net.ipv4.icmp_echo_ignore_broadcasts set to 1
    sysctl:
      name: net.ipv4.icmp_echo_ignore_broadcasts
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.5 - net.ipv4.route.flush set to 1
    sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: broadcasticmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - broadcasticmp
      - 3.2.5
      - three
      - all
      - remedy

  - name: 3.2.6 - Fetching the bogusicmp value from ansible facts
    shell: echo "{{ ansible_local.bogusicmp_326_audit }}"
    register: bogusicmp
    ignore_errors: True
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.6 - Updating /etc/sysctl.conf 
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.icmp_ignore_bogus_error_responses*"
      line: "net.ipv4.icmp_ignore_bogus_error_responses=1"
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.6 - Set the active kernel parameters 
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items: 
      - name: net.ipv4.icmp_ignore_bogus_error_responses 
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes 
    failed_when: no
    when: bogusicmp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - bogusicmp
      - 3.2.6
      - three
      - all
      - remedy

  - name: 3.2.7 - Fetching the reversepathfilter value from ansible facts
    shell: echo "{{ ansible_local.reversepathfilter_327_audit }}"
    register: reversepathfilter
    ignore_errors: True
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - all
      - remedy

  - name: 3.2.7 - Reverse Path Filtering set to 1
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "^net.ipv4.conf.all.rp_filter*" ,line: "net.ipv4.conf.all.rp_filter=1"}
      - {regexp: "^net.ipv4.conf.default.rp_filter" ,line: "net.ipv4.conf.default.rp_filter=1"}
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
      - reversepathfilter
      - 3.2.7
      - three
      - all
      - remedy

  - name: 3.2.7 - Set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.conf.all.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.conf.default.rp_filter
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: reversepathfilter.stdout.find("FAILED") != -1
    become: yes
    tags:
     - reversepathfilter
     - 3.2.7
     - three
     - all

  - name: 3.2.8 - Fetching the tcpsyncookies value from ansible facts
    shell: echo "{{ ansible_local.tcpsyncookies_328_audit }}"
    register: tcpsyncookies
    ignore_errors: True
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all
      - remedy

  - name: 3.2.8 - TCP SYN Cookies set to 1
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv4.tcp_syncookies*"
      line: "net.ipv4.tcp_syncookies=1"
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all
      - remedy

  - name: 3.2.8 - Set the active kernel parameters
    sysctl: "{{item}}"
    ignore_errors: yes
    with_items:
      - name: net.ipv4.tcp_syncookies
        value: '1'
        sysctl_set: yes
      - name: net.ipv4.route.flush
        value: '1'
        sysctl_set: yes
    failed_when: no
    when: tcpsyncookies.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tcpsyncookies
      - 3.2.8
      - three
      - all 
      - remedy

  - name: 3.2.9 - Fetching the ipv6router value from ansible facts
    shell: echo "{{ ansible_local.ipv6router_329_audit }}"
    register: ipv6router
    ignore_errors: True
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all
      - remedy

  - name: 3.2.9 - net.ipv6.conf.all.accept_ra set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv6.conf.all.accept_ra*"
      line: "net.ipv6.conf.all.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all
      - remedy

  - name: 3.2.9 - IPv6 router advertisements set to 0
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: "^net.ipv6.conf.default.accept_ra*"
      line: "net.ipv6.conf.default.accept_ra=0"
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all
      - remedy

  - name: 3.2.9 - net.ipv6.conf.all.accept_ra set to 0
    sysctl:
      name: net.ipv6.conf.all.accept_ra 
      value: '0'
      sysctl_set: yes    
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all
      - remedy

  - name: 3.2.9 - net.ipv6.conf.all.accept_ra set to 0
    sysctl:
      name: net.ipv6.conf.default.accept_ra
      value: '0'
      sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all
      - remedy

  - name: 3.2.9 - Ensure IPv6 flush set to 1
    sysctl:
      name: net.ipv6.route.flush
      value: '1'
      sysctl_set: yes
    failed_when: no
    when: ipv6router.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6router
      - 3.2.9
      - three
      - all 
      - remedy

  - name: 3.3.1 - Fetching the dccp value from ansible facts
    shell: echo "{{ ansible_local.dccp_331_audit }}"
    register: dccp
    ignore_errors: True
    become: yes
    tags:
      - dccp
      - 3.3.1
      - three
      - all
      - remedy

  - name: 3.3.1 - Ensure DCCP is disabled
    lineinfile:
      path: /etc/modprobe.d/dccp.conf
      state: present
      line: "install dccp /bin/true"
      create: yes
    failed_when: no
    when: dccp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dccp
      - 3.3.1
      - three
      - all  
      - remedy

  - name: 3.3.2 - Fetching the sctp value from ansible facts
    shell: echo "{{ ansible_local.sctp_332_audit }}"
    register: sctp
    ignore_errors: True
    become: yes
    tags:
      - sctp
      - 3.3.2
      - three
      - all
      - remedy

  - name: 3.3.2 - Ensure SCTP is disabled
    lineinfile:
      path: /etc/modprobe.d/sctp.conf
      state: present
      line: "install sctp /bin/true"
      create: yes
    failed_when: no
    when: sctp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sctp
      - 3.3.2
      - three
      - all  
      - remedy
  
  - name: 3.3.3 - Fetching the rds value from ansible facts
    shell: echo "{{ ansible_local.rds_333_audit }}"
    register: rds
    ignore_errors: True
    become: yes
    tags:
      - rds
      - 3.3.3
      - three
      - all 
      - remedy
  
  - name: 3.3.3 - Ensure RDS is disabled
    lineinfile:
      path: /etc/modprobe.d/rds.conf
      state: present
      line: "install rds /bin/true"
      create: yes
    failed_when: no
    when: rds.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rds
      - 3.3.3
      - three
      - all  
      - remedy

  - name: 3.3.4 - Fetching the tipc value from ansible facts
    shell: echo "{{ ansible_local.tipc_334_audit }}"
    register: tipc
    ignore_errors: True
    become: yes
    tags:
      - tipc
      - 3.3.4
      - three
      - all 
      - remedy

  - name: 3.3.4 - Ensure TIPC is disabled
    lineinfile:
      path: /etc/modprobe.d/tipc.conf
      state: present
      line: "install tipc /bin/true"
      create: yes
    failed_when: no
    when: tipc.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tipc
      - 3.3.4
      - three
      - all
      - remedy
 
  - name: 3.4.1.1 - Fetching the firewallpack value from ansible facts
    shell: echo "{{ ansible_local.firewallpack_3411_audit }}"
    register: firewallpack
    ignore_errors: True
    become: yes
    tags:
      - firewallpack
      - 3.4.1.1
      - three
      - all 
      - remedy
 
  - name: 3.4.1.1 - Ensure a Firewall package is installed
    yum: name=firewalld  state=latest
    when: firewallpack.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpack
      - 3.4.1.1
      - three
      - all
      - remedy
 
  - name: 3.4.2.1 - Fetching the firewallenb value from ansible facts
    shell: echo "{{ ansible_local.firewallenb_3421_audit }}"
    register: firewallenb
    ignore_errors: True
    become: yes
    tags:
      - firewallenb
      - 3.4.2.1
      - three
      - all 
      - remedy
 
  - name: 3.4.2.1 - Ensure firewalld service is enabled and running
    systemd:
      name: firewalld
      enabled: yes
    failed_when: no
    when: firewallenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallenb
      - 3.4.2.1
      - three
      - all
      - remedy

  - name: 3.4.2.2 Fetching the nftables value from ansible facts
    shell: echo "{{ ansible_local.nftables_3422_audit }}"
    register: nftables
    ignore_errors: True
    become: yes
    tags:
      - nftables
      - 3.4.2.2
      - three
      - all 
      - remedy

  - name: 3.4.2.2 Ensure nftables is not enabled
    systemd:
      name: nftables
      masked: yes
    when: nftables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftables
      - 3.4.2.2
      - three
      - all
      - remedy

  - name: 3.4.2.3 - Fetching the iptables value from ansible facts
    shell: echo "{{ ansible_local.iptables_3423_audit }}"
    register: iptables
    ignore_errors: True
    become: yes
    tags:
      - iptables
      - 3.4.2.3
      - three
      - all
      - remedy

  - name: 3.4.2.3 - Ensure iptables is not enabled
    command: systemctl --now mask iptables
    failed_when: no
    when: iptables.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptables
      - 3.4.2.3
      - three
      - all
      - remedy

  - name: 3.4.2.4 - Fetching the defaultzone value from ansible facts
    shell: echo "{{ ansible_local.defaultzone_3424_audit }}"
    register: defaultzone
    ignore_errors: True
    become: yes
    tags:
      - defaultzone
      - 3.4.2.4
      - three
      - all
      - remedy

  - name: 3.4.2.4 - Ensure default zone is set
    command: firewall-cmd --set-default-zone=public
    failed_when: no
    when: defaultzone.stdout.find("FAILED") != -1
    become: yes
    tags: 
      - defaultzone
      - 3.4.2.4
      - three
      - all 
      - remedy

  - name: 3.4.2.5 - Fetching the netinterface value from ansible facts 
    shell: echo "{{ ansible_local.netinterface_3425_audit }}"
    register: netinterface
    ignore_errors: True
    become: yes
    tags:
      - netinterface
      - 3.4.2.5
      - three
      - all
      - remedy

  - name: 3.4.2.5 - Ensure network interfaces are assigned to appropriate zone
    command: firewall-cmd --zone={{zone_name}} --change-interface={{interface_name}}
    failed_when: no
    when: netinterface.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netinterface
      - 3.4.2.5
      - three
      - all
      - remedy

  - name: 3.4.2.6 - Fetching the unnecservport value from ansible facts
    shell: echo "{{ ansible_local.unnecservport_3426_audit }}"
    register: unnecservport
    ignore_errors: True
    become: yes
    tags:
      - unnecservport
      - 3.4.2.6
      - three
      - all
      - remedy

  - name: 3.4.2.6 - Ensure unnecessary services and ports are not accepted
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: disabled
    failed_when: no
    loop: "{{ unnecservport_service_oracle8.split(',') }}" 
    when: unnecservport.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unnecservport
      - 3.4.2.6
      - three
      - all
      - remedy

  - name: 3.4.2.6 - Ensure unnecessary services and ports are not accepted
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: disabled
    loop: "{{ unnecservport_service_oracle8.split(',') }}"
    failed_when: no
    when: unnecservport.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unnecservport
      - 3.4.2.6
      - three
      - remedy
      - all

  - name: 3.4.3.1 - Fetching the iptablesflush value from ansible facts
    shell: echo "{{ ansible_local.iptablesflush_3431_audit }}"
    register: iptablesflush
    ignore_errors: True
    become: yes
    tags:
      - iptablesflush
      - 3.4.3.1
      - three
      - remedy
      - all

  - name: 3.4.3.1 - Fetching the iptablesflush value from ansible facts
    shell: echo "{{ ansible_local.iptablesflush_3431_audit }}"
    register: iptablesflush
    ignore_errors: True
    become: yes
    tags:
      - iptablesflush
      - 3.4.3.1
      - three
      - remedy
      - all

  - name: 3.5.2.4 - Creating a directory
    file:
      path: /etc/ansible/backup/iptablesflush
      state: directory
      mode: '0750'
      recurse: yes
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.4.3.1
      - three
      - remedy
      - all

  - name: 3.5.2.4 - Saving iptablesrules
    shell: "{{ item }}"
    with_items:
      - 'iptables-save >> /etc/ansible/backup/iptablesflush/iptables_rules_{{ansible_hostname}}'
      - 'ip6tables-save >> /etc/ansible/backup/iptablesflush/ip6tables_rules_{{ansible_hostname}}'
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.4.3.1
      - three
      - remedy
      - all

  - name: 3.4.3.1 - Flushing iptables and ip6tables
    command: "{{ item }}"
    with_items:
      - iptables -F
      - ip6tables -F
    failed_when: no
    when: iptablesflush.stdout.find("FAILED") != -1
    become: yes
    tags:
      - iptablesflush
      - 3.4.3.1
      - three
      - remedy
      - all

  - name: 3.4.3.2 - Fetching the tablexists value from ansible facts
    shell: echo "{{ ansible_local.tablexists_3432_audit }}"
    register: tablexists
    ignore_errors: True
    become: yes
    tags:
      - tablexists
      - 3.4.3.2
      - three
      - remedy
      - all

  - name: 3.4.3.2 - Creating a table in nftables
    command: nft create table inet {{ table_name_oracle8 }}
    failed_when: no
    when: tablexists.stdout.find("FAILED") != -1
    become: yes
    tags:
      - tablexists
      - 3.4.3.2
      - three
      - remedy
      - all

  - name: 3.4.3.3 - Fetching the basechains value from ansible facts
    shell: echo "{{ ansible_local.basechains_3433_audit }}"
    register: basechains
    ignore_errors: True
    become: yes
    tags:
      - basechains
      - 3.4.3.3
      - three
      - remedy
      - all

  - name: 3.4.3.3 - Creating the base chains
    shell: '{{ item }}'
    with_items:
      - nft create chain inet {{ table_name_bc_oracle8 }} {{ base_chain_name_input_oracle8 }} { type filter hook input priority 0 \; }
      - nft create chain inet {{ table_name_bc_oracle8 }} {{ base_chain_name_output_oracle8 }} { type filter hook output priority 0 \; }
      - nft create chain inet {{ table_name_bc_oracle8 }} {{ base_chain_name_forward_oracle8 }} { type filter hook forward priority 0 \; }
    failed_when: no
    when: basechains.stdout.find("FAILED") != -1
    become: yes
    tags:
      - basechains
      - 3.4.3.3
      - three
      - remedy
      - all

  - name: 3.4.3.4 - Fetching the nfloopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.nfloopbacktraffic_3434_audit }}"
    register: nfloopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - nfloopbacktraffic
      - 3.4.3.4
      - three
      - remedy
      - all

  - name: 3.4.3.4 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - nft add rule inet filter input iif lo accept
      - nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop
      - nft add rule inet filter input ip6 saddr ::1 counter drop
    failed_when: no
    when: nfloopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfloopbacktraffic
      - 3.4.3.4
      - three
      - remedy
      - all

  - name: 3.4.3.5 - Fetching the nfoutbound value from ansible facts
    shell: echo "{{ ansible_local.nfoutbound_3435_audit }}"
    register: nfoutbound
    ignore_errors: True
    become: yes
    tags:
      - nfoutbound
      - 3.4.3.5
      - three
      - remedy
      - all

  - name: 3.4.3.5 - Checking out if outbound connections and establish connections
    shell: |
       if [ $(sudo nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ] || [ $(sudo nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ]; then
            echo "not present"
       else
            echo "present"
            exit 1
       fi
    register: nftables_outbound
    failed_when: no
    when: nfoutbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nfoutbound
      - 3.4.3.5
      - three
      - remedy
      - all

  - debug: msg="Add the outbound rules in nftables"
    when:
      - nfoutbound.stdout.find("FAILED") != -1
      - nftables_outbound.stdout == "not present"
    become: yes
    tags:
      - nfoutbound
      - 3.4.3.5
      - three
      - remedy
      - all

  - name: 3.4.3.6 - Fetching the nffirewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.nffirewallpolicy_3436_audit }}"
    register: nffirewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.6 - Checking out if outbound connections and establish connections
    shell: |
       if [ $(sudo nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ] || [ $(sudo nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' | wc -l) -eq 0 ]; then
            echo "not present"
       else
            echo "present"
            exit 1
       fi
    register: nftables_nff_outbound
    failed_when: no
    when: nffirewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - debug: msg="Add the outbound rules in nftables"
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "not present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.6 - creating a directory iptables_nft
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.6 - saving the existing nftables ruleset
    shell: '{{ item }}'
    with_items:
      - nft list ruleset > /etc/ansible/backup/iptables_nft/nft_rules
      - sed -i '1s/^/#!\/sbin\/nft -f\nflush ruleset\n/' /etc/ansible/backup/iptables_nft/nft_rules
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.6 - adding the inbound rules before droping the policy
    shell: nft add rule inet {{ table_name_oracle8 }} input {{ item.split(' ')[0] }} dport {{ item.split(' ')[1] }} accept
    loop: "{{ inbound_nft_oracle8.split(',') }}"
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.6 - Implementing a default DROP policy
    shell: '{{item}}'
    with_items:
      - nft chain {{ table_family_oracle8 }} {{ table_name_nf_oracle8 }} input { policy drop \; }
      - nft chain {{ table_family_oracle8 }} {{ table_name_nf_oracle8 }} output { policy drop \; }
      - nft chain {{ table_family_oracle8 }} {{ table_name_nf_oracle8 }} forward { policy drop \; }
    failed_when: no
    when:
      - nffirewallpolicy.stdout.find("FAILED") != -1
      - nftables_nff_outbound.stdout == "present"
    become: yes
    tags:
      - nffirewallpolicy
      - 3.4.3.6
      - three
      - remedy
      - all

  - name: 3.4.3.7 - Fetching the nftablesenb value from ansible facts
    shell: echo "{{ ansible_local.nftablesenb_3437_audit }}"
    register: nftablesenb
    ignore_errors: True
    become: yes
    tags:
      - nftablesenb
      - 3.4.3.7
      - three
      - remedy
      - all

  - name: 3.4.3.7 - Enabling nftables
    service:
      name: nftables
      enabled: yes
    failed_when: no
    when: nftablesenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablesenb
      - 3.4.3.7
      - three
      - remedy
      - all

  - name: 3.4.3.8 - Fetching the nftablesrules value from ansible facts
    shell: echo "{{ ansible_local.nftablesrules_3438_audit }}"
    register: nftablesrules
    ignore_errors: True
    become: yes
    tags:
      - nftablesrules
      - 3.4.3.8
      - three
      - remedy
      - all

  - name: 3.4.3.8 - Setting up nftables ruleset on boot
    lineinfile:
      path: /etc/sysconfig/nftables.conf
      line: 'include "/etc/nftables/nftables.rules"'
      state: present
    failed_when: no
    when: nftablesrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nftablesrules
      - 3.4.3.8
      - three
      - remedy
      - all
 
  - name: 3.4.4.1.2 - Fetching the loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.loopbacktraffic_34412_audit }}"
    register: loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - loopbacktraffic
      - 3.4.4.1.2
      - three
      - remedy
      - all

  - name: 3.4.4.1.2 - Implementing the loopback rules
    command: "{{ item }}"
    with_items:
      - iptables -A INPUT -i lo -j ACCEPT
      - iptables -A OUTPUT -o lo -j ACCEPT
      - iptables -A INPUT -s 127.0.0.0/8 -j DROP
    failed_when: no
    when: loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loopbacktraffic
      - 3.4.4.1.2
      - three
      - remedy
      - all

  - name: 3.4.4.1.3 - Fetching the outbound value from ansible facts
    shell: echo "{{ ansible_local.outbound_34413_audit }}"
    register: outbound
    ignore_errors: True
    become: yes
    tags:
      - outbound
      - 3.4.4.1.3
      - three
      - remedy
      - all

  - name: 3.4.4.1.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_outbound
    failed_when: no
    when: outbound.stdout.find("FAILED") != -1
    become: yes
    tags:
      - outbound
      - 3.4.4.1.3
      - three
      - remedy
      - all

  - debug: msg="{{iptables_outbound.stdout}}"
    when:
      - outbound.stdout.find("FAILED") != -1
      - iptables_outbound.stdout == "Add the outbound rules in iptables"
    become: yes
    tags:
      - outbound
      - 3.4.4.1.3
      - three
      - remedy
      - all

  - name: 3.4.4.1.4 - Fetching the firewallrules value from ansible facts
    shell: echo "{{ ansible_local.firewallrules_34414_audit }}"
    register: firewallrules
    ignore_errors: True
    become: yes
    tags:
      - firewallrules
      - 3.4.4.1.4
      - three
      - remedy
      - all

  - name: 3.4.4.1.4 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.4.4.1.4
      - three
      - remedy
      - all

  - name: 3.4.4.1.4 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_fir_rules
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.4.4.1.4
      - three
      - remedy
      - all

  - name: 3.4.4.1.4 - Adding the ipv4 firewallrules
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv4_oracle8.split(',') }}"
    when: firewallrules.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallrules
      - 3.4.4.1.4
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - Fetching the firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.firewallpolicy_34411_audit }}"
    register: firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo iptables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in iptables"
       else
           echo "outbound rule for iptables is present"
          exit 0
       fi
    register: iptables_fir_outbound
    failed_when: no
    when: firewallpolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - debug: msg="{{iptables_fir_outbound.stdout}}"
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "Add the outbound rules in iptables"
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - saving the existing iptables rules
    shell: iptables-save > /etc/ansible/backup/iptables_nft/iptablesv4_rules
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - adding the necessary ports to iptables before droping the policy
    shell: "iptables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv4_oracle8.split(',') }}"
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.1.1 - Implementing a default DROP policy
    command: "{{ item }}"
    with_items:
      - iptables -P INPUT DROP
      - iptables -P OUTPUT DROP
      - iptables -P FORWARD DROP
    failed_when: no
    when:
      - firewallpolicy.stdout.find("FAILED") != -1
      - iptables_fir_outbound.stdout == "outbound rule for iptables is present"
    become: yes
    tags:
      - firewallpolicy
      - 3.4.4.1.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.2 - Fetching the ipv6loopbacktraffic value from ansible facts
    shell: echo "{{ ansible_local.ipv6loopbacktraffic_34422_audit }}"
    register: ipv6loopbacktraffic
    ignore_errors: True
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.4.4.2.2
      - three
      - remedy
      - all

  - name: 3.4.4.2.2 - Implementing the loopback rules
    command: "{{item}}"
    with_items:
      - ip6tables -A INPUT -i lo -j ACCEPT
      - ip6tables -A OUTPUT -o lo -j ACCEPT
      - ip6tables -A INPUT -s ::1 -j DROP
    failed_when: no
    when: ipv6loopbacktraffic.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6loopbacktraffic
      - 3.4.4.2.2
      - three
      - remedy
      - all

  - name: 3.4.4.2.3 - Fetching the ipv6outbound value from ansible facts
    shell: echo "{{ ansible_local.ipv6outbound_34423_audit }}"
    register: ipv6outbound
    ignore_errors: True
    become: yes
    tags:
      - ipv6outbound
      - 3.4.4.2.3
      - three
      - remedy
      - all

  - name:  3.4.4.2.3 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_outbound
    failed_when: no
    when: ipv6outbound.stdout.find("FAILED") != -1
    tags:
      - ipv6outbound
      - 3.4.4.2.3
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6outbound.stdout.find("FAILED") != -1
      - ip6tables_outbound.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6outbound
      - 3.4.4.2.3
      - three
      - remedy
      - all

  - name: 3.4.4.2.4 - Fetching the ipv6firewallrules value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallrules_34424_audit }}"
    register: ipv6firewallrules
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallrules
      - 3.4.4.2.4
      - three
      - remedy
      - all

  - name: 3.4.4.2.4 - Creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.4.4.2.4
      - three
      - remedy
      - all

  - name: 3.4.4.2.4 - saving the rules
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_fir_rules
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.4.4.2.4
      - three
      - remedy
      - all

  - name: 3.4.4.2.4 - Adding the ipv6 firewallrules
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ portsv6_oracle8.split(',') }}"
    when: ipv6firewallrules.stdout.find("FAILED") != -1
    failed_when: no
    tags:
      - ipv6firewallrules
      - 3.4.4.2.4
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - Fetching the ipv6firewallpolicy value from ansible facts
    shell: echo "{{ ansible_local.ipv6firewallpolicy_34421_audit }}"
    register: ipv6firewallpolicy
    ignore_errors: True
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - checking if outbound connections and establish connections are present
    shell: |
       if [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state ESTABLISHED" | wc -l) -eq 0 ] || [ $(sudo ip6tables -L -v -n | grep ".*ACCEPT.*--.*0.0.0.0/0.*0.0.0.0/0.*state NEW,ESTABLISHED" | wc -l) -eq 0 ]; then
           echo "Add the outbound rules in ip6tables"
       else
           echo "outbound rule for ip6tables is present"
          exit 0
       fi
    become: yes
    register: ip6tables_ipv6fir
    failed_when: no
    when: ipv6firewallpolicy.stdout.find("FAILED") != -1
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - debug: msg="{{ip6tables_outbound.stdout}}"
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "Add the outbound rules in ip6tables"
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - creating a backup directory
    file:
      path: /etc/ansible/backup/iptables_nft/
      state: directory
      recurse : yes
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - saving the ip6tables
    shell: ip6tables-save > /etc/ansible/backup/iptables_nft/iptablesv6_rules
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - adding the necessary ports to ip6tables before droping the policy
    shell: "ip6tables -A INPUT -p {{ item.split(' ')[0] }} --dport {{ item.split(' ')[1] }} -m state --state NEW -j ACCEPT"
    loop: "{{ firewallpolicy_portsv6_oracle8.split(',') }}"
    become: yes
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.4.4.2.1 - Implementing a default DROP policy
    command: "{{item}}"
    with_items:
      - ip6tables -P INPUT DROP
      - ip6tables -P OUTPUT DROP
      - ip6tables -P FORWARD DROP
    failed_when: no
    when:
      - ipv6firewallpolicy.stdout.find("FAILED") != -1
      - ip6tables_ipv6fir.stdout == "outbound rule for ip6tables is present"
    become: yes
    tags:
      - ipv6firewallpolicy
      - 3.4.4.2.1
      - three
      - remedy
      - all

  - name: 3.5 - Fetching the wireless value from ansible facts
    shell: echo "{{ ansible_local.wireless_35_audit }}"
    register: wireless
    ignore_errors: True
    become: yes
    tags:
      - wireless
      - '3.5'
      - three
      - all
      - remedy
  
  - name: 3.5 - Checking wireless interfaces 
    shell: "iwconfig 2> /dev/null | grep 'no wireless' | wc -l"
    register: iwconfig
    when: wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - '3.5'
      - three
      - all
      - remedy
    
  - name:  3.5 - Ip link show up
    shell: "ip link show up | grep '[0-9][aAa-zZz][0-9]' | awk -F: {'print $2'} | cut -d' ' -f2 | wc -l"
    register: iplink
    when: 
    - iwconfig|int == 0
    - wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - '3.5'
      - three
      - all
      - remedy
  
  - name:  3.5 - Ensure wireless interfaces are disabled
    shell: "wifi=$(ip link show up | cut -d: -f2 | grep '[aAa-zZz][0-9]' | cut -d' ' -f2) && sudo ip link set $wifi down"
    when:
    - iplink|int >= 2
    - wireless.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wireless
      - '3.5'
      - three
      - all
      - remedy

  - name: 3.6 - Fetching the ipv6disable value from ansible facts
    shell: echo "{{ ansible_local.ipv6disable_36_audit }}"
    register: ipv6disable
    ignore_errors: True
    become: yes
    tags:
      - ipv6disable
      - '3.6'
      - three
      - all
      - remedy

  - name: 3.6 - Editing GRUB_CMDLINE_LINUX parameters
    shell: '(grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | wc -l)'
    when: ipv6disable.stdout.find("FAILED") != -1
    register: ipv6
    become: yes
    tags:
      - ipv6disable
      - '3.6'
      - three
      - all
      - remedy

  - name: 3.6 - Update the grub2 configuration
    lineinfile:
      path: /etc/default/grub
      state: present
      line: 'GRUB_CMDLINE_LINUX=""'
    when:
      - ipv6disable.stdout.find("FAILED") != -1
      - ipv6 == '0'
    become: yes
    tags:
      - ipv6disable
      - '3.6'
      - three
      - all
      - remedy

  - name: 3.6 - Ensure IPv6 is disabled
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& ipv6.disable=1/' /etc/default/grub
    failed_when: no
    when:
      - ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - '3.6'
      - three
      - all
      - remedy

  - name: 3.6 - Update the grub2 configuration
    command: 'grub2-mkconfig > /boot/grub2/grub.cfg'
    failed_when: no
    when: ipv6disable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ipv6disable
      - '3.6'
      - three
      - all
      - remedy

  - name: 4.1.1.1 -  Fetching the auditd value from ansible facts
    shell: echo "{{ ansible_local.auditd_4111_audit }}"
    register: auditd
    ignore_errors: True
    become: yes
    tags:
      - auditd
      - 4.1.1.1
      - four
      - all
      - remedy

  - name: 4.1.1.1 -  Ensure auditd is installed
    yum: name=auditd state=present
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 4.1.1.1
      - auditd
      - four
      - all
      - remedy

  - name: 4.1.1.1 -  Ensure auditd-libs is installed
    yum: name=audit-libs state=present
    failed_when: no
    when: auditd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - 4.1.1.1
      - auditd
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Fetching the auditdservice value from ansible facts
    shell: echo "{{ ansible_local.auditdservice_4112_audit }}"
    register: auditdservice
    ignore_errors: True
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.2 - Ensure auditd service is enabled
    service: name=auditd enabled=yes
    when: auditdservice.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdservice
      - 4.1.1.2
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Fetching the auditdenable value from ansible facts
    shell: echo "{{ ansible_local.auditdenable_4113_audit}}"
    register: auditdenable
    ignore_errors: True
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Grep GRUB_CMDLINE_LINUX=" /etc/default/grub
    shell: '(grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | wc -l)'
    when: auditdenable.stdout.find("FAILED") != -1
    register: audit
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Ensure auditing for processes that start prior to auditd is enabled
    lineinfile:
      path: /etc/default/grub
      state: present
      line: 'GRUB_CMDLINE_LINUX=""'
    when:
      - auditdenable.stdout.find("FAILED") != -1
      - audit == 0
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all
      - remedy

  - name: 4.1.1.3 - Updating  /etc/default/grub with audit set to 1
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit=1/' /etc/default/grub
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all 
      - remedy
     
  - name: 4.1.1.3 - update the grub2 configuration
    command: grub2-mkconfig -o /boot/grub2/grub.cfg
    failed_when: no
    when: auditdenable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdenable
      - 4.1.1.3
      - four
      - all                                                                                     
      - remedy

  - name: 4.1.1.4 - Fetching the auditdbacklog value from ansible facts
    shell: echo "{{ ansible_local.auditdbacklog_4114_audit }}"
    register: auditdbacklog
    ignore_errors: True
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - all
      - remedy

  - name: 4.1.1.4 - Grep "GRUB_CMDLINE_LINUX=" /etc/default/grub
    shell: '(grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | wc -l)'
    when: auditdbacklog.stdout.find("FAILED") != -1
    register: backlog
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - all
      - remedy

  - name: 4.1.1.4 - Ensure audit_backlog_limit is sufficient
    lineinfile:
      path: /etc/default/grub
      state: present
      line: 'GRUB_CMDLINE_LINUX=""'
    when:
      - auditdbacklog.stdout.find("FAILED") != -1
      - backlog == 0
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - all
      - remedy

  - name: 4.1.1.4 - Update /etc/default/grub as audit_backlog_limit=8192
    command: sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit_backlog_limit=8192/' /etc/default/grub
    failed_when: no
    when: 
      - auditdbacklog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - all 
      - remedy
  
  - name: 4.1.1.4 - update the grub2 configuration
    command: grub2-mkconfig -o /boot/grub2/grub.cfg
    failed_when: no
    when: auditdbacklog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditdbacklog
      - 4.1.1.4
      - four
      - all      
      - remedy

  - name: 4.1.2.1 Fetching the auditlogsize value from ansible facts
    shell: echo "{{ ansible_local.auditlogsize_4121_audit }}"
    register: auditlogsize
    ignore_errors: True
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - all
      - remedy

  - name: 4.1.2.1 Ensure audit log storage size is configured
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^(max_log_file =*|#max_log_file =*)"
      line: "max_log_file = {{ audit_log_size }}"
    when: auditlogsize.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogsize
      - 4.1.2.1
      - four
      - all
      - remedy

  - name: 4.1.2.2 - Fetching the auditlogdelete value from ansible facts
    shell: echo "{{ ansible_local.auditlogdelete_4122_audit }}"
    register: auditlogdelete
    ignore_errors: True
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - all
      - remedy

  - name: 4.1.2.2 - Ensure audit logs are not automatically deleted
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: "^max_log_file_action =*"
      line: "max_log_file_action = keep_logs"
    when: auditlogdelete.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditlogdelete
      - 4.1.2.2
      - four
      - all
      - remedy

  - name: 4.1.2.3 - Ensure system is disabled when audit logs are full
    shell: echo "{{ ansible_local.sysdisable_4123_audit }}"
    register: sysdisable
    ignore_errors: True
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy

  - name: 4.1.2.3 - Fetching the sysdisable value from ansible facts
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^space_left_action =*'
      line: 'space_left_action = email'
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy
      
  - name: 4.1.2.3 - Updating /etc/audit/auditd.conf with admin_space_left_action = halt
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^admin_space_left_action =*'
      line: 'admin_space_left_action = halt'
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy

  - name: 4.1.2.3 - Updating /etc/audit/auditd.conf with action_mail_acct = root
    lineinfile:
      path: /etc/audit/auditd.conf
      state: present
      regexp: '^action_mail_acct =*'
      line: 'action_mail_acct = root'
    when: sysdisable.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysdisable
      - 4.1.2.3
      - four
      - all
      - remedy

  - name: 4.1.3 - Fetching the sudoers value from ansible facts
    shell: echo "{{ ansible_local.sudoers_413_audit }}"
    register: sudoers
    ignore_errors: True
    become: yes
    tags:
      - sudoers
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.3 - create a .rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/scope.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
       - "-w /etc/sudoers -p wa -k scope"
       - "-w /etc/sudoers.d/ -p wa -k scope"
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.3 - Relod service auditd
    command: service auditd reload
    when: sudoers.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudoers
      - 4.1.3
      - four
      - all
      - remedy

  - name: 4.1.4 - Fetching the loginout value from ansible facts
    shell: echo "{{ ansible_local.loginout_414_audit }}"
    register: loginout
    ignore_errors: True
    become: yes
    tags:
      - loginout
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.4 - create a .rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/audit.rules 
      state: present
      line: "{{item}}"
    with_items:
       - "-w /var/log/lastlog -p wa -k logins"
       - "-w /var/run/faillock -p wa -k logins"
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.4 - Relod service auditd
    command: service auditd reload
    when: loginout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - loginout
      - 4.1.4
      - four
      - all
      - remedy

  - name: 4.1.5 - Fetching the session value from ansible facts
    shell: echo "{{ ansible_local.session_415_audit }}"
    register: session
    ignore_errors: True
    become: yes
    tags:
      - session
      - 4.1.5
      - four
      - all
      - remedy

  - name: 4.1.5 - create a login.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/logins.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /var/run/utmp -p wa -k session"
      - "-w /var/log/btmp -p wa -k logins"
      - "-w /var/log/btmp -p wa -k logins"     
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.5
      - four
      - all
      - remedy
    
  - name: 4.1.5 - Relod service auditd
    command: service auditd reload
    when: session.stdout.find("FAILED") != -1
    become: yes
    tags:
      - session
      - 4.1.5
      - four
      - all
      - remedy

  - name: 4.1.6 - Fetching the moddatetime value from ansible facts
    shell: echo "{{ ansible_local.moddatetime_416_audit }}"
    register: moddatetime
    ignore_errors: True
    become: yes
    tags:
      - moddatetime
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.6 - create a time-change.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/time-change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
    - ansible_architecture == "x86_64"
    - moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.6 - create a time-change.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/time-change.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
      - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
      - "-w /etc/localtime -p wa -k time-change"
    when: 
    - ansible_architecture != "x86_64"
    - moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.6
      - four
      - all
      - remedy

  - name: 4.1.6 - Relod service auditd
    command: service auditd reload
    when: moddatetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - moddatetime
      - 4.1.6
      - four
      - all 
      - remedy

  - name: 4.1.7 - Fetching the modsysmac value from ansible facts
    shell: echo "{{ ansible_local.modsysmac_417_audit }}"
    register: modsysmac
    ignore_errors: True
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - create a MAC-ploicy.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/MAC-policy.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - '-w /etc/selinux/ -p wa -k MAC-policy'
      - '-w /usr/share/selinux/ -p wa -k MAC-policy'
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all
      - remedy

  - name: 4.1.7 - Relod service auditd
    command: service auditd reload
    when: modsysmac.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysmac
      - 4.1.7
      - four
      - all 
      - remedy

  - name: 4.1.8 - Fetching the modsysnet value from ansible facts
    shell: echo "{{ ansible_local.modsysnet_418_audit }}"
    register: modsysnet
    ignore_errors: True
    become: yes
    tags:
      - modsysnet
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.8 - create a system-locale.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/system-locale.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
    when: 
    - modsysnet.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.8 - create a system-locale.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/system-locale.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
      - "-w /etc/issue -p wa -k system-locale"
      - "-w /etc/issue.net -p wa -k system-locale"
      - "-w /etc/hosts -p wa -k system-locale"
      - "-w /etc/sysconfig/network -p wa -k system-locale"
    when:
    - modsysnet.stdout.find("FAILED") != -1 
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - modsysnet
      - 4.1.8
      - four
      - all
      - remedy

  - name:  4.1.8 - service auditd reload
    command: service auditd reload
    when: modsysnet.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modsysnet
      - 4.1.8
      - four
      - all
      - remedy

  - name: 4.1.9 - Fetching the fileaccess value from ansible facts
    shell: echo "{{ ansible_local.fileaccess_419_audit }}"
    register: fileaccess
    ignore_errors: True
    become: yes
    tags:
      - fileaccess
      - 4.1.9
      - four
      - all
      - remedy
 
  - name: 4.1.9 - create a access.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when:
    - fileaccess.stdout.find("FAILED") != -1 
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.9 - create a access.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/access.rules
      state: present
      line: "{{item}}"
    with_items:
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
      - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    when: 
    - fileaccess.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fileaccess
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.9 - Relod service auditd
    command: service auditd reload
    when: fileaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fileaccess
      - 4.1.9
      - four
      - all
      - remedy

  - name: 4.1.10 - Fetching the modusergrp value from ansible facts
    shell: echo "{{ ansible_local.modusergrp_4110_audit }}"
    register: modusergrp
    ignore_errors: True
    become: yes
    tags:
      - modusergrp
      - 4.1.10
      - four
      - all
      - remedy

  - name: 4.1.10 - create a identity.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/identity.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /etc/group -p wa -k identity"
      - "-w /etc/passwd -p wa -k identity"
      - "-w /etc/gshadow -p wa -k identity"
      - "-w /etc/shadow -p wa -k identity"
      - "-w /etc/security/opasswd -p wa -k identity"
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.10
      - four
      - all
      - remedy
      
  - name: 4.1.10 - Relod Service auditd
    command: service auditd reload
    when: modusergrp.stdout.find("FAILED") != -1
    become: yes
    tags:
      - modusergrp
      - 4.1.10
      - four
      - all 
      - remedy

  - name: 4.1.11 -  Fetching the fsmount value from ansible facts
    shell: echo "{{ ansible_local.fsmount_4111_audit }}"
    register: fsmount
    ignore_errors: True
    become: yes
    tags:
      - fsmount
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - create a mounts.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
      - "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when:
    - fsmount.stdout.find("FAILED") != -1 
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 -  create a mounts.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/mounts.rules
      state: present
      line: "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    when: 
    - fsmount.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - fsmount
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.11 - Relod Service Auditd
    command: service auditd reload
    when: fsmount.stdout.find("FAILED") != -1
    become: yes
    tags:
      - fsmount
      - 4.1.11
      - four
      - all
      - remedy

  - name: 4.1.12 - Ensure use of privileged commands is collected
    shell: echo "{{ ansible_local.privilegecmd_4112_audit }}"
    register: privilegecmd
    ignore_errors: True
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.12 - Ensure use of privileged commands is collected
    shell: find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>='"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/privileged.rules
    when: privilegecmd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - privilegecmd
      - 4.1.12
      - four
      - all
      - remedy

  - name: 4.1.13 - Fetching the filedeletion value from ansible facts
    shell: echo "{{ ansible_local.filedeletion_4113_audit }}"
    register: filedeletion
    ignore_errors: True
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - create a delete.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/delete.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
      - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    when: 
    - filedeletion.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - create a delete.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/delete.rules
      state: present
      line: "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
      create: yes
    when: 
    - filedeletion.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.13 - Relod service auditd
    command: service auditd reload
    when: filedeletion.stdout.find("FAILED") != -1
    become: yes
    tags:
      - filedeletion
      - 4.1.13
      - four
      - all
      - remedy

  - name: 4.1.14 - Fetching the kernelmodule value from ansible facts
    shell: echo "{{ ansible_local.kernelmodule_4114_audit }}"
    register: kernelmodule
    ignore_errors: True
    become: yes
    tags:
      - kernelmodule
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.14 - create a modules.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
    when:
    - kernelmodule.stdout.find("FAILED") != -1 
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.14 - create a modules.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/modules.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-w /sbin/insmod -p x -k modules"
      - "-w /sbin/rmmod -p x -k modules"
      - "-w /sbin/modprobe -p x -k modules"
      - "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules"
    when: 
    - kernelmodule.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - kernelmodule
      - 4.1.14
      - four
      - all 
      - remedy

  - name: 4.1.14 - Relod service auditd
    command: service auditd reload
    when: kernelmodule.stdout.find("FAILED") != -1
    become: yes
    tags:
      - kernelmodule
      - 4.1.14
      - four
      - all
      - remedy

  - name: 4.1.15 - Fetching the sudolog value from ansible facts
    shell: echo "{{ ansible_local.sudolog_4115_audit }}"
    register: sudolog
    ignore_errors: True
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.15 - create a sudo.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/audit.rules
      state: present
      line: "-w /var/log/sudo.log -p wa -k actions"
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy
      
  - name: 4.1.15 - ReLod Service auditd
    command: service auditd reload
    when: sudolog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sudolog
      - 4.1.15
      - four
      - all
      - remedy

  - name: 4.1.16  - Fetching the auditconfig value from ansible facts
    shell: echo "{{ ansible_local.auditconfig_4116_audit }}"
    register: auditconfig
    ignore_errors: True
    become: yes
    tags:
      - auditconfig
      - 4.1.16
      - four
      - all
      - remedy

  - name: 4.1.16 - create a 99-finalize.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/99-finalize.rules
      state: present
      line: "-e 2"
      create: yes
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.16
      - four
      - all
      - remedy
      
  - name: 4.1.16 - Relod service auditd
    command: service auditd reload
    when: auditconfig.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditconfig
      - 4.1.16
      - four
      - all
      - remedy
   
  - name: 4.1.17 - Fetching the dacperm value from ansible facts
    shell: echo "{{ ansible_local.dacperm_4117_audit }}"
    register: dacperm
    ignore_errors: True
    become: yes
    tags:
      - dacperm
      - 4.1.17
      - four
      - all
      - remedy

  - name:  4.1.17 - create a perm_mod.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:  
    - dacperm.stdout.find("FAILED") != -1
    - ansible_architecture == "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.17
      - four
      - all
      - remedy

  - name:  4.1.17 - create a perm_mod.rules file in the /etc/audit/rules.d/ directory
    lineinfile:
      path: /etc/audit/rules.d/perm_mod.rules
      state: present
      line: "{{item}}"
      create: yes
    with_items:
      - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
      - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    when:
    - dacperm.stdout.find("FAILED") != -1 
    - ansible_architecture != "x86_64"
    become: yes
    tags:
      - dacperm
      - 4.1.17
      - four
      - all
      - remedy

  - name: 4.1.17 - Relod service auditd
    command: service auditd reload
    when: dacperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dacperm
      - 4.1.17
      - four
      - all
      - remedy
      
  - name: 4.2.1.1 Fetching the rsyslog value from ansible facts
    shell: echo "{{ ansible_local.rsyslog_4211_audit }}"
    register: rsyslog
    ignore_errors: True
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - all
      - remedy

  - name: 4.2.1.1 Ensure rsyslog is installed
    yum: name=rsyslog state=present
    failed_when: no
    when: rsyslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslog
      - 4.2.1.1
      - four
      - all
      - remedy

  - name: 4.2.1.2 - Fetching the rsyslogenb value from ansible facts
    shell: echo "{{ ansible_local.rsyslogenb_4212_audit }}"
    register: rsyslogenb
    ignore_errors: True
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - all
      - remedy

  - name: 4.2.1.2 - Ensure rsyslog Service is enabled
    service: 
      name: rsyslog
      enabled: yes
    failed_when: no
    when: rsyslogenb.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogenb
      - 4.2.1.2
      - four
      - all
      - remedy

  - name: 4.2.1.3 - Fetching the rsyslogperm value from ansible facts
    shell: echo "{{ ansible_local.rsyslogperm_4213_audit }}"
    register: rsyslogperm
    ignore_errors: True
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.3 - Ensure rsyslog default file permissions configured
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "$FileCreateMode 0640"
    failed_when: no
    when: rsyslogperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogperm
      - 4.2.1.3
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Fetching the rloggingconf value from ansible facts
    shell: echo "{{ ansible_local.rloggingconf_4214_audit }}"
    register: rloggingconf
    ignore_errors: True
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Editing the lines in  /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.emerg :omusrmsg:*"
      - "mail.* -/var/log/mail"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Editing the lines in  /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "mail.info -/var/log/mail.info"
      - "mail.warning -/var/log/mail.warn"
      - "mail.err /var/log/mail.err"
      - "news.crit -/var/log/news/news.crit"
      - "news.err -/var/log/news/news.err"
      - "news.notice -/var/log/news/news.notice"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - Editing the lines in  /etc/rsyslog.conf 
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "{{item}}"
    with_items:
      - "*.=warning;*.=err -/var/log/warn"
      - "*.crit /var/log/warn"
      - "*.*;mail.none;news.none -/var/log/messages"
      - "local0,local1.* -/var/log/localmessages"
      - "local2,local3.* -/var/log/localmessages"
      - "local4,local5.* -/var/log/localmessages"
      - "local6,local7.* -/var/log/localmessages"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.4 - restart rsyslog
    command: "{{item}}"
    with_items:
      - "systemctl restart rsyslog"
      - "pkill -HUP rsyslogd"
    when: rloggingconf.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rloggingconf
      - 4.2.1.4
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Ensure rsyslog is configured to send logs to a remote log host
    shell: echo "{{ ansible_local.rsyslogsendlogs_4215_audit }}"
    register: rsyslogsendlogs
    ignore_errors: True
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Fetching the rsyslogsendlogs value from ansible facts
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      line: "*.* @@loghost.example.com"
    failed_when: no
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.5 - Restart rsyslog
    command: "{{item}}"
    with_items:
      - "systemctl restart rsyslog"
      - "pkill -HUP rsyslogd"
    when: rsyslogsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rsyslogsendlogs
      - 4.2.1.5
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Fetching the remotesyslogmsg value from ansible facts
    shell: echo "{{ ansible_local.remotesyslogmsg_4216_audit }}"
    register: remotesyslogmsg
    ignore_errors: True
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Ensure remote rsyslog messages are only accepted on designated log hosts
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      regexp: "#$ModLoad imtcp"
      line: "$ModLoad imtcp"
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Editing the lines in /etc/rsyslog.conf
    lineinfile:
      path: /etc/rsyslog.conf
      state: present
      regexp: "#$InputTCPServerRun 514"
      line: "$InputTCPServerRun 514"
    failed_when: no
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy

  - name: 4.2.1.6 - Restart rsyslog
    command: "{{item}}"
    with_items:
      - "systemctl restart rsyslog"
      - "pkill -HUP rsyslogd"
    when: remotesyslogmsg.stdout.find("FAILED") != -1
    become: yes
    tags:
      - remotesyslogmsg
      - 4.2.1.6
      - four
      - all
      - remedy
 
  - name: 4.2.2.1 - Fetching the journalsendlogs value from ansible facts
    shell: echo "{{ ansible_local.journalsendlogs_4221_audit }}"
    register: journalsendlogs
    ignore_errors: True
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - all
      - remedy
 
  - name: 4.2.2.1 - Ensure journald is configured to send logs to rsyslog
    lineinfile:
      path: /etc/systemd/journald.conf
      state: present
      regexp: "ForwardToSyslog =*"
      line: "ForwardToSyslog=yes"
    when: journalsendlogs.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalsendlogs
      - 4.2.2.1
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Fetching the journalcompresslog value from ansible facts
    shell: echo "{{ ansible_local.journalcompresslog_4222_audit }}"
    register: journalcompresslog
    ignore_errors: True
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.2 - Ensure journald is configured to compress large log files
    lineinfile:
      path: /etc/systemd/journald.conf
      state: present
      line: "Compress=yes"
    when: journalcompresslog.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalcompresslog
      - 4.2.2.2
      - four
      - all
      - remedy

  - name: 4.2.2.3 - Fetching the journalpersisdisk value from ansible facts
    shell: echo "{{ ansible_local.journalpersisdisk_4223_audit }}"
    register: journalpersisdisk
    ignore_errors: True
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - all
      - remedy

  - name: 4.2.2.3 - Ensure journald is configured to write logfiles to persistent disk
    lineinfile:
      path: /etc/systemd/journald.conf
      state: present
      line: "Storage=persistent"
    when: journalpersisdisk.stdout.find("FAILED") != -1
    become: yes
    tags:
      - journalpersisdisk
      - 4.2.2.3
      - four
      - all
      - remedy

  - name: 4.2.3 - Fetching the permlogfiles value from ansible facts
    shell: echo "{{ ansible_local.permlogfiles_423_audit }}"
    register: permlogfiles
    ignore_errors: True
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - all
      - remedy

  - name: 4.2.3 - Ensure permissions on all logfiles are configured
    shell: find /var/log -type f -exec chmod g-wx,o-rwx "{}" + -o -type d -exec chmod g-w,o-rwx "{}" +
    when: permlogfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permlogfiles
      - 4.2.3
      - four
      - all
      - remedy

  - name: 4.3 - Fetching the logrotate value from ansible facts
    shell: echo "{{ ansible_local.logrotate_43_audit }}"
    register: logrotate
    ignore_errors: True
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

  - name: 4.3 - Ensure logrotate is configured 
    lineinfile:
      path: /etc/logrotate.conf
      state: present
      line: "maxage 90  # Specifies the number of days after which old log files should be removed"
    when: logrotate.stdout.find("FAILED") != -1
    become: yes
    tags:
      - logrotate
      - '4.3'
      - four
      - all
      - remedy

 ###########chap5######################################################################################################
 
  - name: 5.1.1 - Fetching the cron value from ansible facts
    shell: echo "{{ ansible_local.cron_511_audit }}"
    register: cron
    ignore_errors: True
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy

  - name: 5.1.1 - Ensure cron daemon is enabled 
    service:
      name: crond
      enabled: yes
    when: cron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - cron
      - 5.1.1
      - five
      - all
      - remedy
 
  - name: 5.1.2 - Fetching the permcrontab value from ansible facts
    shell: echo "{{ ansible_local.permcrontab_512_audit }}"
    register: permcrontab
    ignore_errors: True
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all
      - remedy
 
  - name: 5.1.2 - Ensure permissions on /etc/crontab are configured
    file:
      path: "/etc/crontab"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: permcrontab.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrontab
      - 5.1.2
      - five
      - all
      - remedy

  - name: 5.1.3 - Fetching the permcronhourly value from ansible facts
    shell: echo "{{ ansible_local.permcronhourly_513_audit }}"
    register: permcronhourly
    ignore_errors: True
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all
      - remedy

  - name: 5.1.3 - Ensure permissions on /etc/cron.hourly are configured
    file:
      path: "/etc/cron.hourly"
      state: touch
      mode: 0700
      owner: root
      group: root
    when: permcronhourly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronhourly
      - 5.1.3
      - five
      - all
      - remedy

  - name: 5.1.4 Fetching the permcrondaily value from ansible facts
    shell: echo "{{ ansible_local.permcrondaily_514_audit }}"
    register: permcrondaily
    ignore_errors: True
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy

  - name: 5.1.4 Ensure permissions on /etc/cron.daily are configured
    file:
      path: "/etc/cron.daily"
      state: touch
      mode: 0700
      owner: root
      group: root
    when: permcrondaily.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrondaily
      - 5.1.4
      - five
      - all
      - remedy

  - name: 5.1.5 - Fetching the permcronweekly value from ansible facts
    shell: echo "{{ ansible_local.permcronweekly_515_audit }}"
    register: permcronweekly
    ignore_errors: True
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy

  - name: 5.1.5 - Ensure permissions on /etc/cron.weekly are configured
    file:
      path: "/etc/cron.weekly"
      state: touch
      mode: 0700
      owner: root
      group: root
    when: permcronweekly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronweekly
      - 5.1.5
      - five
      - all
      - remedy

  - name: 5.1.6 - Fetching the permcronmonthly value from ansible facts
    shell: echo "{{ ansible_local.permcronmonthly_516_audit }}"
    register: permcronmonthly
    ignore_errors: True
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy

  - name: 5.1.6 - Ensure permissions on /etc/cron.monthly are configured
    file:
      path: "/etc/cron.monthly"
      state: touch
      mode: 0700
      owner: root
      group: root
    when: permcronmonthly.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcronmonthly
      - 5.1.6
      - five
      - all
      - remedy

  - name: 5.1.7 Fetching the permcrond value from ansible facts
    shell: echo "{{ ansible_local.permcrond_517_audit }}"
    register: permcrond
    ignore_errors: True
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy

  - name: 5.1.7 Ensure permissions on /etc/cron.d are configured
    file:
      path: "/etc/cron.d"
      state: touch
      mode: 0700
      owner: root
      group: root
    when: permcrond.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permcrond
      - 5.1.7
      - five
      - all
      - remedy

  - name: 5.1.8 - Fetching the atcron value from ansible facts
    shell: echo "{{ ansible_local.atcron_518_audit }}"
    register: atcron
    ignore_errors: True
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Creating directory
    file:
      path: /etc/ansible/backup/atcron
      state: directory
      mode: '0755'
      recurse: yes
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Backing up cron.deny
    copy:
      src: "/etc/cron.deny"
      dest: /etc/ansible/backup/atcron/cron_deny_{{ansible_hostname}}
      remote_src: yes
    when: cronuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Backing up at.deny
    copy:
      src: "/etc/at.deny"
      dest: /etc/ansible/backup/atcron/at_deny_{{ansible_hostname}}
      remote_src: yes
    failed_when: no
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Remove "/etc/cron.deny"  
    file:
      path: "/etc/cron.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Remove "/etc/at.deny" 
    file:
      path: "/etc/at.deny"
      state: absent
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Set permissions for etc/cron.allow
    file:
      path: "/etc/cron.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.1.8 - Set permissions for etc/at.allow
    file:
      path: "/etc/at.allow"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: atcron.stdout.find("FAILED") != -1
    become: yes
    tags:
      - atcron
      - 5.1.8
      - five
      - all
      - remedy

  - name: 5.2.1 - Fetching the sshdperm value from ansible facts
    shell: echo "{{ ansible_local.sshdperm_521_audit }}"
    register: sshdperm
    ignore_errors: True
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all
      - remedy

  - name: 5.2.1 - Ensure permissions on /etc/ssh/sshd_config are configured
    file:
      path: "/etc/ssh/sshd_config"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: sshdperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshdperm
      - 5.2.1
      - five
      - all 
      - remedy

  - name: 5.2.2 - Fetching the sshaccess value from ansible facts
    shell: echo "{{ ansible_local.sshaccess_522_audit }}"
    register: sshaccess
    ignore_errors: True
    become: yes
    tags:
      - sshaccess
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.2 - Edit lines in /etc/ssh/sshd_config with allowusers
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "AllowUsers   #<userlist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.2 - Edit lines in /etc/ssh/sshd_config with allowgroups
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "AllowGroups  #<grouplist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.2 - Edit lines in /etc/ssh/sshd_config with denyusres
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "DenyUsers    #<userlist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.2 - Edit lines in /etc/ssh/sshd_config with denygroups
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "DenyGroups   #<grouplist>"
    when: sshaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshaccess
      - 5.2.2
      - five
      - all
      - remedy

  - name: 5.2.3 - Fetching the sshpermpvtkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpvtkey_523_audit }}"
    register: sshpermpvtkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.3
      - five 
      - all
      - remedy

  - name: 5.2.3 - Ensure permissions on SSH private host key files are configured
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} \;
    when: sshpermpvtkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpvtkey
      - 5.2.3
      - five 
      - all
      - remedy
 
  - name: 5.2.4 Fetching the sshpermpubkey value from ansible facts
    shell: echo "{{ ansible_local.sshpermpubkey_524_audit }}"
    register: sshpermpubkey
    ignore_errors: True
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.4
      - five
      - all
      - remedy
 
  - name: 5.2.4 Ensure permissions on SSH public host key files are configured
    command: "{{item}}"
    with_items:
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \;
      - find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod 0644 {} \;
    when: sshpermpubkey.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpermpubkey
      - 5.2.4
      - five
      - all
      - remedy

  - name: 5.2.5 - Fetching the sshloglevel value from ansible facts
    shell: echo "{{ ansible_local.sshloglevel_525_audit }}"
    register: sshloglevel
    ignore_errors: True
    become: yes
    tags:
      - sshloglevel
      - 5.2.5
      - five
      - all  
      - remedy

  - name: 5.2.5 - Ensure SSH LogLevel is appropriate
    lineinfile:
      path: /etc/ssh/sshd_config 
      state: present
      regexp: "^(LogLevel*|#LogLevel*)"
      line: "LogLevel INFO"
    when: sshloglevel.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshloglevel
      - 5.2.5
      - five
      - all  
      - remedy

  - name: 5.2.6 - Fetching the sshx11forward value from ansible facts
    shell: echo "{{ ansible_local.sshx11forward_526_audit }}"
    register: sshx11forward
    ignore_errors: True
    become: yes
    tags:
      - sshx11forward
      - 5.2.6
      - five
      - all  
      - remedy

  - name: 5.2.6 - Ensure SSH X11 forwarding is disabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(X11Forwarding*|#X11Forwarding*)"
      line: "X11Forwarding no"
    when: sshx11forward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshx11forward
      - 5.2.6
      - five
      - all
      - remedy

  - name: 5.2.7 - Fetching the sshmaxauthtries value from ansible facts
    shell: echo "{{ ansible_local.sshmaxauthtries_527_audit }}"
    register: sshmaxauthtries
    ignore_errors: True
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.7
      - five
      - all
      - remedy

  - name: 5.2.7 - Ensure SSH MaxAuthTries is set to 4 or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(MaxAuthTries*|#MaxAuthTries*)"
      line: "{{ MaxAuthTries }}"
    when: sshmaxauthtries.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxauthtries
      - 5.2.7
      - five
      - all
      - remedy

  - name: 5.2.8 - Fetching the sshignorerhosts value from ansible facts
    shell: echo "{{ ansible_local.sshignorerhosts_528_audit }}"
    register: sshignorerhosts
    ignore_errors: True
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.8
      - five
      - all
      - remedy

  - name: 5.2.8 - Ensure SSH IgnoreRhosts is enabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(IgnoreRhosts*|#IgnoreRhosts*)"
      line: "{{ IgnoreRhosts }}"
    when: sshignorerhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshignorerhosts
      - 5.2.8
      - five
      - all
      - remedy

  - name: 5.2.9 - Fetching the sshauthentication value from ansible facts
    shell: echo "{{ ansible_local.sshauthentication_529_audit }}"
    register: sshauthentication
    ignore_errors: True
    become: yes
    tags:
      - sshauthentication
      - 5.2.9
      - five
      - all
      - remedy

  - name: 5.2.9 - Ensure SSH HostbasedAuthentication is disabled 
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(HostbasedAuthentication*|#HostbasedAuthentication*)"
      line: "{{ HostbasedAuthentication }}"
    when: sshauthentication.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshauthentication
      - 5.2.9
      - five
      - all
      - remedy

  - name: 5.2.10 - Fetching the sshrootlogin value from ansible facts
    shell: echo "{{ ansible_local.sshrootlogin_5210_audit }}"
    register: sshrootlogin
    ignore_errors: True
    become: yes
    tags:
      - sshrootlogin
      - 5.2.10
      - five
      - all
      - remedy

  - name: 5.2.10 - Ensure SSH root login is disabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: "{{ PermitRootLogin }}"
      regexp:  "^(PermitRootLogin*|#PermitRootLogin*)"
    when: sshrootlogin.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - sshrootlogin
      - 5.2.10
      - five
      - all
      - remedy

  - name: 5.2.11 - Fetching the sshpep value from ansible facts
    shell: echo "{{ ansible_local.sshpep_5211_audit }}"
    register: sshpep
    ignore_errors: True
    become: yes
    tags:
      - sshpep
      - 5.2.11
      - five
      - all
      - remedy

  - name: 5.2.11 - Ensure SSH PermitEmptyPasswords is disabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(PermitEmptyPasswords*|#PermitEmptyPasswords*)"
      line: "{{ PermitEmptyPasswords }}"
    when: sshpep.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpep
      - 5.2.11
      - five
      - all
      - remedy

  - name: 5.2.12 - Fetching the sshpue value from ansible facts
    shell: echo "{{ ansible_local.sshpue_5212_audit }}"
    register: sshpue
    ignore_errors: True
    become: yes
    tags:
      - sshpue
      - 5.2.12
      - five
      - all
      - remedy

  - name: 5.2.12 - Ensure SSH PermitUserEnvironment is disabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(PermitUserEnvironment*|#PermitUserEnvironment*)"
      line: "{{ PermitUserEnvironment }}"
    when: sshpue.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpue
      - 5.2.12
      - five
      - all
      - remedy

  - name: 5.2.13 - Fetching the sshidletimeout value from ansible facts
    shell: echo "{{ ansible_local.sshidletimeout_5213_audit }}"
    register: sshidletimeout
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.13 - Edit lines in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveInterval*|#ClientAliveInterval*)"
      line: "{{ ClientAliveInterval }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.13 - Edit lines in /etc/ssh/sshd_config
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "^(ClientAliveCountMax*|#ClientAliveCountMax*)"
      line: "{{ ClientAliveCountMax }}"
    when: sshidletimeout.stdout.find("FAILED") != -1
    ignore_errors: True
    become: yes
    tags:
      - sshidletimeout
      - 5.2.13
      - five
      - all
      - remedy

  - name: 5.2.14 - Fetching the sshlogingracetime value from ansible facts
    shell: echo "{{ ansible_local.sshlogingracetime_5214_audit }}"
    register: sshlogingracetime
    ignore_errors: True
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.14 - Ensure SSH LoginGraceTime is set to one minute or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(LoginGraceTime*|#LoginGraceTime*)"
      line: "{{ LoginGraceTime }}"
    when: sshlogingracetime.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshlogingracetime
      - 5.2.14
      - five
      - all
      - remedy

  - name: 5.2.15 - Fetching the sshwarningbanner value from ansible facts
    shell: echo "{{ ansible_local.sshwarningbanner_5215_audit }}"
    register: sshwarningbanner
    ignore_errors: True
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - all
      - remedy

  - name: 5.2.15 - Ensure SSH warning banner is configured
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(Banner*|#Banner*)"
      line: "Banner /etc/issue.net"
    when: sshwarningbanner.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshwarningbanner
      - 5.2.15
      - five
      - all
      - remedy

  - name: 5.2.16 - Fetching the sshpam value from ansible facts
    shell: echo "{{ ansible_local.sshpam_5216_audit }}"
    register: sshpam
    ignore_errors: True
    become: yes
    tags:
      - sshpam
      - 5.2.16
      - five
      - all
      - remedy

  - name: 5.2.16 - Ensure SSH PAM is enabled 
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(UsePAM*|#UsePAM*)"
      line: "UsePAM yes"
    when: sshpam.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshpam
      - 5.2.16
      - five
      - all
      - remedy
 
  - name: 5.2.17 - Fetching the sshtcpforward value from ansible facts
    shell: echo "{{ ansible_local.sshtcpforward_5217_audit }}"
    register: sshtcpforward
    ignore_errors: True
    become: yes
    tags:
      - sshtcpforward
      - 5.2.17
      - five
      - all
      - remedy
 
  - name: 5.2.17 - Ensure SSH AllowTcpForwarding is disabled
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(AllowTcpForwarding*|#AllowTcpForwarding*)"
      line: "AllowTcpForwarding no"
    when: sshtcpforward.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshtcpforward
      - 5.2.17
      - five
      - all
      - remedy

  - name: 5.2.18 - Fetching the sshmaxstartups value from ansible facts
    shell: echo "{{ ansible_local.sshmaxstartups_5218_audit }}"
    register: sshmaxstartups
    ignore_errors: True
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.18
      - five
      - all
      - remedy

  - name: 5.2.18 - Ensure SSH MaxStartups is configured
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(MaxStartups*|#MaxStartups*)"
      line: "MaxStartups 10:30:60"
    when: sshmaxstartups.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxstartups
      - 5.2.18
      - five
      - all
      - remedy

  - name: 5.2.19 - Fetching the sshmaxsessions value from ansible facts
    shell: echo "{{ ansible_local.sshmaxsessions_5219_audit }}"
    register: sshmaxsessions
    ignore_errors: True
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.19
      - five
      - all
      - remedy

  - name: 5.2.19 - Ensure SSH MaxSessions is set to 4 or less
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp:  "^(MaxSessions*|#MaxSessions*)"
      line: "MaxSessions 4"
    when: sshmaxsessions.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshmaxsessions
      - 5.2.19
      - five
      - all
      - remedy

  - name: 5.2.20 Fetching the sshsyscrytopolicy value from ansible facts
    shell: echo "{{ ansible_local.sshsyscrytopolicy_5220_audit }}"
    register: sshsyscrytopolicy
    ignore_errors: True
    become: yes
    tags:
      - sshsyscrytopolicy
      - 5.2.20
      - five
      - all
      - remedy

  - name: 5.2.20 Ensure system-wide crypto policy is not over-ridden 
    shell: sed -ri "s/^\s*(CRYPTO_POLICY\s*=.*)$/# \1/" /etc/sysconfig/sshd
    when: sshsyscrytopolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshsyscrytopolicy
      - 5.2.20
      - five
      - all
      - remedy

  - name: 5.2.20 Reload sshd
    systemd:
      name: sshd
      state: reloaded
    when: sshsyscrytopolicy.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sshsyscrytopolicy
      - 5.2.20
      - five
      - all
      - remedy

  - name: 5.3.1 - Fetching the authselect value from ansible facts
    shell: echo "{{ ansible_local.authselect_531_audit }}"
    register: authselect
    ignore_errors: True
    become: yes
    tags:
      - authselect
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.1 - Create custom authselect profile
    command: authselect create-profile custom-profile -b sssd --symlink-meta
    when: authselect.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - authselect
      - 5.3.1
      - five
      - all
      - remedy

  - name: 5.3.2 - Fetching the authselectprofile value from ansible facts
    shell: echo "{{ ansible_local.authselectprofile_532_audit }}"
    register: authselectprofile
    ignore_errors: True
    become: yes
    tags:
      - authselectprofile
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.2 - Select authselect profile
    command: authselect select custom/custom-profile with-sudo with-faillock without-nullok --force
    when: authselectprofile.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - authselectprofile
      - 5.3.2
      - five
      - all
      - remedy

  - name: 5.3.3 Fetching the authselectfaillock.stdout.find("FAILED") value from ansible facts
    shell: echo "{{ ansible_local.authselectfaillock_533_audit }}"
    register: authselectfaillock
    ignore_errors: True
    become: yes
    tags:
      - authselectfaillock
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.3.3 Ensure authselect includes with-faillock
    command: authselect select custom/custom-profile with-sudo with-faillock without-nullok 
    when: authselectfaillock.stdout.find("FAILED") != -1
    failed_when: no
    become: yes
    tags:
      - authselectfaillock
      - 5.3.3
      - five
      - all
      - remedy

  - name: 5.4.1 - Fetching the passwdcreation value from ansible facts
    shell: echo "{{ ansible_local.passwdcreation_541_audit }}"
    register: passwdcreation
    ignore_errors: True
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - all
      - remedy

  - name:  5.4.1 - Configuring Password length
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp:  "^(minlen*|# minlen*)"
      line: "minlen = 14"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - all
      - remedy

  - name:  5.4.1 - Configuring Password with min.classes
    lineinfile:
      path: /etc/security/pwquality.conf
      state: present
      regexp:  "^(minclass*|# minclass*)"
      line: "minclass = 4"
    when: passwdcreation.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdcreation
      - 5.4.1
      - five
      - all
      - remedy

  - name: 5.4.2 - Fetching the lockout value from ansible facts
    shell: echo "{{ ansible_local.lockout_542_audit }}"
    register: lockout
    ignore_errors: True
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - Updating password authentication
    lineinfile:
      path: /etc/pam.d/password-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.2 - Updating password authentication
    lineinfile:
      path: /etc/pam.d/system-auth
      state: present
      line: "{{item}}"
    with_items:
      - "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900"
      - "auth [success=1 default=bad] pam_unix.so"
      - "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900"
      - "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
    when: lockout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lockout
      - 5.4.2
      - five
      - all
      - remedy

  - name: 5.4.3 - Fetching the passwdreuse value from ansible facts
    shell: echo "{{ ansible_local.passwdreuse_543_audit }}"
    register: passwdreuse
    ignore_errors: True
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - all
      - remedy

  - name: 5.4.3 - Updating password authentication 
    command: sed -i 's/pam_unix.so.*/& remember=5/' /etc/pam.d/password-auth
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - all
      - remedy

  - name: 5.4.3 - Updating password authentication
    command: sed -i 's/pam_unix.so.*/& remember=5/' /etc/pam.d/system-auth
    when: passwdreuse.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdreuse
      - 5.4.3
      - five
      - all
      - remedy

  - name: 5.4.4 - Fetching the passwdhashing value from ansible facts
    shell: echo "{{ ansible_local.passwdhashing_544_audit }}"
    register: passwdhashing
    ignore_errors: True
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.4 - Updating password hashing to SHA-512  
    command: sed -i 's/pam_unix.so.*/& sha512/' /etc/pam.d/password-auth
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.4.4 - Updating password hashing to SHA-512  
    command: sed -i 's/pam_unix.so.*/& sha512/' /etc/pam.d/system-auth
    when: passwdhashing.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdhashing
      - 5.4.4
      - five
      - all
      - remedy

  - name: 5.5.1.1 - Fetching the passwdexpiration value from ansible facts
    shell: echo "{{ ansible_local.passwdexpiration_5511_audit }}"
    register: passwdexpiration
    ignore_errors: True
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - all
      - remedy

  - name: 5.5.1.1 - Updating password expiration days to maximum
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^(PASS_MAX_DAYS.*)"
      line: "{{ PASS_MAX_DAYS }}"
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - all
      - remedy

  - name:  Grep user names
    shell: "grep ':$6' /etc/shadow | cut -d: -f1,5 | awk -F: '$2>=365 {print $1}'"
    register: echo
    when: passwdexpiration.stdout.find("FAILED") != -1
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - all
      - remedy

  - name: 5.5.1.1 - Updating password expiration days for users
    chage: user="{{ item }}" sp_max=365
    loop: "{{ echo.stdout_lines }}"
    when:
    - passwdexpiration.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - passwdexpiration
      - 5.5.1.1
      - five
      - all
      - remedy

  - name: 5.5.1.2 Fetching the minidays value from ansible facts
    shell: echo "{{ ansible_local.minidays_5512_audit }}"
    register: minidays
    ignore_errors: True
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - all
      - remedy

  - name: 5.5.1.2 Updating password expiration days to minimum
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^PASS_MIN_DAYS*"
      line: "{{ PASS_MIN_DAYS }}"
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - all
      - remedy

  - name: 5.5.1.2  Grep user names
    shell: "grep ':$6' /etc/shadow | awk -F: '$4<7 {print $1}'"
    register: echo
    when: minidays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - all
      - remedy

  - name: 5.5.1.2 Ensure minimum days between password changes is 7 or more
    chage: user="{{ item }}" sp_min=7
    loop: "{{ echo.stdout_lines }}"
    when:
    - minidays.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - minidays
      - 5.5.1.2
      - five
      - all
      - remedy

  - name: 5.5.1.3 Fetching the warningdays value from ansible facts
    shell: echo "{{ ansible_local.warningdays_5513_audit }}"
    register: warningdays
    ignore_errors: True
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - all
      - remedy

  - name: 5.5.1.3 Set password warning age
    lineinfile:
      path: /etc/login.defs
      state: present
      regexp: "^PASS_WARN_AGE*"
      line: "{{ PASS_WARN_AGE }}"
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - all
      - remedy

  - name: 5.5.1.3 Ensure password expiration warning days is 7 or more
    shell: "grep ':$6' /etc/shadow | awk -F: '$6<7 {print $1}'"
    register: echo
    when: warningdays.stdout.find("FAILED") != -1
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - all
      - remedy

  - name: 5.5.1.3 Set password warning age
    chage: user="{{ item }}" sp_warn=7
    loop: "{{ echo.stdout_lines }}"
    when: 
    - warningdays.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - warningdays
      - 5.5.1.3
      - five
      - all
      - remedy

  - name: 5.5.1.4 Fetching the inactivepasswdlock value from ansible facts
    shell: echo "{{ ansible_local.inactivepasswdlock_5514_audit }}"
    register: inactivepasswdlock
    ignore_errors: True
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - all
      - remedy

  - name: 5.5.1.4 Ensure inactive password lock is 30 days or less
    shell: "useradd -D -f 30"
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - all
      - remedy

  - name: 5.5.1.4 Grep user names
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 {print $1}'"
    register: echo
    when: inactivepasswdlock.stdout.find("FAILED") != -1
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - all
      - remedy

  - name: 5.5.1.4 Updation of Inactive password lock for users
    chage: user="{{ item }}" sp_inact=30
    loop: "{{ echo.stdout_lines }}"
    when:
    - inactivepasswdlock.stdout.find("FAILED") != -1 
    - item != "root"
    become: yes
    tags:
      - inactivepasswdlock
      - 5.5.1.4
      - five
      - all
      - remedy

  - name: 5.5.1.5 - Fetching the lastpasswdchange value from ansible facts
    shell: echo "{{ ansible_local.lastpasswdchange_5515_audit }}"
    register: lastpasswdchange
    ignore_errors: True
    become: yes
    tags:
      - lastpasswdchange
      - 5.5.1.5
      - five
      - all
      - remedy

  - name: 5.5.1.5 - Ensure all users last password change date is in the past
    shell: |
       count=0
       NOW=$(date +%s)
       for i in $(egrep "^[^:]+:[\$]|^[^:]+:\!\!" /etc/shadow | awk -F: '$6==7 {print $1}'); do
            if [ "$i" != 'root' ]; then
            UPA=$(chage --list $i | grep "Last password change" | cut -d: -f2)
            EPOCH=$(date -d "$UPA" +%s)
                if [[ $EPOCH -gt $NOW ]]; then
                passwd -f -l "$i"
                fi
            fi
        done
    when: lastpasswdchange.stdout.find("FAILED") != -1
    become: yes
    tags:
      - lastpasswdchange
      - 5.5.1.5
      - five
      - all
      - remedy

  - name: 5.5.2 Fetching the sysacclogin value from ansible facts
    shell: echo "{{ ansible_local.sysacclogin_552_audit }}"
    register: sysacclogin
    ignore_errors: True
    become: yes
    tags:
      - sysacclogin
      - 5.5.2
      - five
      - all
      - remedy

  - name: 5.5.2 Listing system accounts
    shell: |
        awk -F: '$3<1000 && $7!="/sbin/nologin" {print $1}' /etc/passwd
    register: echo
    when: sysacclogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - sysacclogin
      - 5.5.2
      - five
      - all
      - remedy

  - name: 5.5.2 Enabling password lock
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ echo.stdout_lines }}"
    when: 
    - sysacclogin.stdout.find("FAILED") != -1
    - item != "root"
    become: yes
    tags:
      - sysacclogin
      - 5.5.2
      - five
      - all
      - remedy

  - name: 5.5.2 Ensure system accounts are non-login
    user:
      name: "{{ item }}"
      shell: '/sbin/nologin'
    loop: "{{ echo.stdout_lines }}"
    when:
    - sysacclogin.stdout.find("FAILED") != -1 
    - item != "root" and item != "sync" and item != "shutdown" and item != "halt"
    become: yes
    tags:
      - sysacclogin
      - 5.5.2
      - five
      - all
      - remedy

  - name: 5.5.3 Fetching the usershelltimeout value from ansible facts
    shell: echo "{{ ansible_local.usershelltimeout_553_audit }}"
    register: usershelltimeout
    ignore_errors: True
    become: yes
    tags:
      - usershelltimeout
      - 5.5.3
      - five
      - all
      - remedy

  - name: 5.5.3 Edit umask parameters for  /etc/bashrc
    lineinfile:
      path: /etc/bashrc
      state: present
      line: 'TMOUT=900'
    when: usershelltimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershelltimeout
      - 5.5.3
      - five
      - all
      - remedy

  - name: 5.5.3 Edit umask parameters for  /etc/bashprofile 
    lineinfile:
      path: /etc/profile
      state: present
      line: 'TMOUT=900'
    when: usershelltimeout.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershelltimeout
      - 5.5.3
      - five
      - all
      - remedy

  - name: 5.5.4 Fetching the defaultgroup value from ansible facts
    shell: echo "{{ ansible_local.defaultgroup_554_audit }}"
    register: defaultgroup
    ignore_errors: True
    become: yes
    tags:
      - defaultgroup
      - 5.5.4
      - five
      - all
      - remedy

  - name: 5.5.4 set the root user default group to GID 0
#    shell: "usermod -g 0 root"
    user:
      name: root
      groups: root
    when: defaultgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultgroup
      - 5.5.4
      - five
      - all
      - remedy

  - name: 5.5.5 - Fetching the defaultuser value from ansible facts
    shell: echo "{{ ansible_local.defaultuser_555_audit }}"
    register: defaultuser
    ignore_errors: True
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - all
      - remedy

  - name: 5.5.5 - Ensure default user umask is 027 for /etc/bashrc
    lineinfile:
      path: /etc/bashrc
      state: present
      line: "umask 027"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - all
      - remedy

  - name: 5.5.5 - Ensure default user umask is 027 for /etc/bashprofile
    lineinfile:
      path: /etc/profile
      state: present
      line: "umask 027"
    failed_when: no
    when: defaultuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - defaultuser
      - 5.5.5
      - five
      - all
      - remedy

  - name: 5.6  Fetching the rootlogin value from ansible facts
    shell: echo "{{ ansible_local.rootlogin_56_audit }}"
    register: rootlogin
    ignore_errors: True
    become: yes
    tags:
      - rootlogin
      - '5.6'
      - five
      - all
      - remedy

  - name: 5.6  Ensure root login is restricted to system console
    lineinfile:
      path: /etc/securetty
      state: absent
      regexp: 'vc*'
    when: rootlogin.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rootlogin
      - '5.6'
      - five
      - all
      - remedy

  - name: 5.7 Fetching the suaccess value from ansible facts
    shell: echo "{{ ansible_local.suaccess_57_audit }}"
    register: suaccess
    ignore_errors: True
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - all
      - remedy

  - name: 5.7  Add lines to the /etc/pam.d/su file
    lineinfile:
      path: /etc/pam.d/su
      state: present
      line: "auth required pam_wheel.so use_uid"
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - all
      - remedy

  - name: 5.7  Create list of users in the wheel statement in the /etc/group file
    lineinfile:
      path: /etc/group
      state: present
      regexp: "wheel*"
      line: "wheel:x:10:root #<user_list>"
    when: suaccess.stdout.find("FAILED") != -1
    become: yes
    tags:
      - suaccess
      - '5.7'
      - five
      - all
      - remedy
      
 #########chap6##################################################################################################################

  - name: 6.1.1 - Fetching the auditsysperm value from ansible facts
    shell: echo "{{ ansible_local.auditsysperm_611_audit }}"
    register: auditsysperm
    ignore_errors: True
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.1 - Reviewing all installed packages
    shell: "rpm -Va --nomtime --nosize --nomd5 --nolinkto"
    register: echo
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.1 - Determining which package a particular file belongs to 
    shell: "rpm -qf {{ item }} 2>/dev/null"
    loop: "{{ echo.stdout_lines }}"
    when: auditsysperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - auditsysperm
      - 6.1.1
      - six
      - all
      - remedy

  - name: 6.1.2 - Fetching the permpasswd value from ansible facts
    shell: echo "{{ ansible_local.permpasswd_612_audit }}"
    register: permpasswd
    ignore_errors: True
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.2 - Ensure permissions on /etc/passwd are configured
    file:
      path: "/etc/passwd"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permpasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswd
      - 6.1.2
      - six
      - all
      - remedy

  - name: 6.1.3 - Fetching the permshadow value from ansible facts
    shell: echo "{{ ansible_local.permshadow_613_audit }}"
    register: permshadow
    ignore_errors: True
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.3 - Ensure permissions on /etc/shadow are configured
    file:
      path: "/etc/shadow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadow
      - 6.1.3
      - six
      - all
      - remedy

  - name: 6.1.4 - Fetching the permgroup value from ansible facts
    shell: echo "{{ ansible_local.permgroup_614_audit }}"
    register: permgroup
    ignore_errors: True
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy

  - name: 6.1.4 - Ensure permissions on /etc/group are configured
    file:
      path: "/etc/group"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroup
      - 6.1.4
      - six
      - all
      - remedy
      
  - name: 6.1.5 - Fetching the permshadow value from ansible facts
    shell: echo "{{ ansible_local.permgshadow_615_audit }}"
    register: permgshadow
    ignore_errors: True
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.5 - Ensure permissions on /etc/gshadow are configured
    file:
      path: "/etc/gshadow"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permgshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadow
      - 6.1.5
      - six
      - all
      - remedy

  - name: 6.1.6 - Fetching the permpasswdi value from ansible facts
    shell: echo "{{ ansible_local.permpasswdi_616_audit }}"
    register: permpasswdi
    ignore_errors: True
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.6 - Ensure permissions on /etc/passwd- are configured
    file:
      path: "/etc/passwd-"
      state: touch
      mode: 0600
      owner: root
      group: root
    when: permpasswdi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permpasswdi
      - 6.1.6
      - six
      - all
      - remedy

  - name: 6.1.7 - Fetching the permshadowi value from ansible facts
    shell: echo "{{ ansible_local.permshadowi_617_audit }}"
    register: permshadowi
    ignore_errors: True
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.7 - Ensure permissions on /etc/shadow- are configured
    file:
      path: "/etc/shadow-"
      state: touch
      mode: 0000
      owner: root
      group: root
    when: permshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permshadowi
      - 6.1.7
      - six
      - all
      - remedy

  - name: 6.1.8 - Fetching the permgroupi value from ansible facts
    shell: echo "{{ ansible_local.permgroupi_618_audit }}"
    register: permgroupi
    ignore_errors: True
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.8 - Ensure permissions on /etc/group- are configured
    file:
      path: "/etc/group-"
      state: touch
      mode: 0644
      owner: root
      group: root
    when: permgroupi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgroupi
      - 6.1.8
      - six
      - all
      - remedy

  - name: 6.1.9 - Fetching the permgshadowi value from ansible facts
    shell: echo "{{ ansible_local.permgshadowi_619_audit }}"
    register: permgshadowi
    ignore_errors: True
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.9 - Ensure permissions on /etc/gshadow- are configured
    file:
      path: "/etc/gshadow-"
      state: touch
      mode: 0640
      owner: root
      group: root
    when: permgshadowi.stdout.find("FAILED") != -1
    become: yes
    tags:
      - permgshadowi
      - 6.1.9
      - six
      - all
      - remedy

  - name: 6.1.10 - Fetching the wwfiles value from ansible facts
    shell: echo "{{ ansible_local.wwfiles_6110_audit }}"
    register: wwfiles
    ignore_errors: True
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Verifying any files are returened or not
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    register: echo
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.10 - Removing write access for the "other" category
    file:
      path: "{{ item }}"
      mode: o-w
    loop: "{{ echo.stdout_lines }}"
    when: wwfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - wwfiles
      - 6.1.10
      - six
      - all
      - remedy

  - name: 6.1.11 - Fetching the unownedfiles value from ansible facts
    shell: echo "{{ ansible_local.unownedfiles_6111_audit }}"
    register: unownedfiles
    ignore_errors: True
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name:  6.1.11 - Verifying any files are returened or not 
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name:  6.1.11 - Files configuring with root permissions
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name:  6.1.11 - Listing files owned by the user 
    shell: "find / -xdev -nouser"
    register: echo
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name:  6.1.11 - Files configuring with root permissions 
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: unownedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - unownedfiles
      - 6.1.11
      - six
      - all
      - remedy

  - name:  6.1.12 - Fetching the ungroupedfiles value from ansible facts
    shell: echo "{{ ansible_local.ungroupedfiles_6112_audit }}"
    register: ungroupedfiles
    ignore_errors: True
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name:  6.1.12 - Verifying any files are returened or not
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name:  6.1.12 - Files configuring with root permissions
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Listing files owned by the group
    shell: "find / -xdev -nogroup"
    register: echo
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.1.12 - Files configuring with root permissions
    file:
      path: "{{ item }}"
      owner: root
      group: root
    loop: "{{ echo.stdout_lines }}"
    when: ungroupedfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - ungroupedfiles
      - 6.1.12
      - six
      - all
      - remedy

  - name: 6.2.1 - Fetching the emptypasswd value from ansible facts
    shell: echo "{{ ansible_local.emptypasswd_621_audit }}"
    register: emptypasswd
    ignore_errors: True
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Listing users with no password lock
    shell: "grep '/home' /etc/passwd | awk  -F: '$3>=1000 {print $1}'"
    register: echo
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Ensure password fields are not empty
    shell: "grep '{{ echo.stdout }}' /etc/shadow | awk -F':' '$2==\"\" {print $1}'"
    register: ech
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.1 - Enable Password lock
    user:
      name: "{{ item }}"
      password_lock: yes
    loop: "{{ ech.stdout_lines }}"
    when: emptypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - emptypasswd
      - 6.2.1
      - six
      - all
      - remedy

  - name: 6.2.2 - Fetching the nolegacypasswd value from ansible facts
    shell: echo "{{ ansible_local.nolegacypasswd_622_audit }}"
    register: nolegacypasswd
    ignore_errors: True
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.2 - Ensure no legacy "+" entries exist in /etc/passwd
    shell: "sed -i 's/+://g' /etc/passwd"
    when: nolegacypasswd.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacypasswd
      - 6.2.2
      - six
      - all
      - remedy

  - name: 6.2.4 - Fetching the nolegacyshadow value from ansible facts
    shell: echo "{{ ansible_local.nolegacyshadow_624_audit }}"
    register: nolegacyshadow
    ignore_errors: True
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.4
      - six
      - all
      - remedy

  - name: 6.2.4 - Ensure no legacy "+" entries exist in /etc/shadow
    shell: "sed -i 's/+://g' /etc/shadow"
    when: nolegacyshadow.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacyshadow
      - 6.2.4
      - six
      - all
      - remedy

  - name: 6.2.5 - Fetching the nolegacygroup value from ansible facts
    shell: echo "{{ ansible_local.nolegacygroup_625_audit }}"
    register: nolegacygroup
    ignore_errors: True
    become: yes
    tags:
      - nolegacygroup
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.5 - Ensure no legacy "+" entries exist in /etc/group
    shell: "sed -i 's/+://g' /etc/group"
    when: nolegacygroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - nolegacygroup
      - 6.2.5
      - six
      - all
      - remedy

  - name: 6.2.6 -  Fetching the rootuid value from ansible facts
    shell: echo "{{ ansible_local.rootuid_626_audit }}"
    register: rootuid
    ignore_errors: True
    become: yes
    tags:
      - rootuid
      - 6.2.6
      - six
      - all
      - remedy

  - name: 6.2.6 - Ensure root is the only UID 0 account
    shell: |
       for a in $(cat /etc/passwd | awk -F: '$3==0 {print $1}'); do
       b=$(grep '/home/' /etc/passwd | cut -d':' -f3 | sort -n | tail -n 1)
       testuid=$(( $b+1 ))
       echo $testuid
           if [ "$a" != "root" ]; then
              sed -i '/'$a'/s/\:0\:/:'$testuid':/g' /etc/passwd
           fi
       done
    when: rootuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rootuid
      - 6.2.6
      - six
      - all
      - remedy

  - name: 6.2.7 - Fetching the userhdirperm value from ansible facts
    shell: echo "{{ ansible_local.userhdirperm_627_audit }}"
    register: userhdirperm
    ignore_errors: True
    become: yes
    tags:
      - userhdirperm
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Listing users
    shell: "cat /etc/passwd | awk -F: '($3>=1000 && $7 != '/sbin/nologin' && $7 != '/bin/false') { print $1 }' | sort"
    register: echo
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.7 - Configuring the listed users with permissions
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0750
    loop: "{{ echo.stdout_lines }}"
    when: userhdirperm.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userhdirperm
      - 6.2.7
      - six
      - all
      - remedy

  - name: 6.2.8 - Fetching the userownhdir value from ansible facts 
    shell: echo "{{ ansible_local.userownhdir_628_audit }}"
    register: userownhdir
    ignore_errors: True
    become: yes
    tags:
      - userownhdir
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.8 - Ensure users own their home directories 
    shell: |
       cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | grep -v 'root 0 /root' | while read user uid dir; do
       if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
             owner=$(stat -L -c "%U" "$dir")
             if [ "$owner" != "$user" ]; then
                 echo "$dir:$user:$owner" >> /tmp/cisuserhdir
             fi
       fi
       done
          a=$(sed -i 's/\/:nobody.*//g' /tmp/cisuserhdir)
          b=$(cat /tmp/cisuserhdir | grep -v '^[[:space:]]*$')
          echo "$b"
          rm -rf /tmp/cisuserhdir
    register: userhdirreg
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.8 - Ensure users own their home directories 
    file:
      path: "{{ item.split(':')[0] }}"
      owner: "{{ item.split(':')[1] }}"
      group: "{{ item.split(':')[1] }}"
    loop: "{{ userhdirreg.stdout_lines }}"
    when: userownhdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - userownhdir
      - 6.2.8
      - six
      - all
      - remedy

  - name: 6.2.9 - Fetching the dotfiles value from ansible facts
    shell: echo "{{ ansible_local.dotfiles_629_audit }}"
    register: dotfiles
    ignore_errors: True
    become: yes
    tags:
      - dotfiles
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.9 - Listing users dot files
    shell: "find /home/ -name '.[A-Za-z0-9]*' -perm /g+w,o+w"
    register: echo
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.9 - Users dot files are not group or world writable
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: dotfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - dotfiles
      - 6.2.9
      - six
      - all
      - remedy

  - name: 6.2.10 - Fetching the forwardfiles value from ansible facts
    shell: echo "{{ ansible_local.forwardfiles_6210_audit }}"
    register: forwardfiles
    ignore_errors: True
    become: yes
    tags:
      - forwardfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.10 - Finding users having .forward files
    shell: "find /home -type f -name '*.forward' 2> /dev/null"
    register: forwardfiles_result
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.10
      - six
      - all
      - remedy
	  
  - name: 6.2.10 - creating backup directory
    file:
      path: /etc/ansible/backup/forwardfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - backing up files
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/forwardfiles"
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.10
      - six
      - remedy
      - all

  - name: 6.2.10 - Removing users having .forward files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ forwardfiles_result.stdout_lines }}"
    when: forwardfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - forwardfiles
      - 6.2.10
      - six
      - all
      - remedy

  - name: 6.2.11 - Fetching the netrcfiles value from ansible facts
    shell: echo "{{ ansible_local.netrcfiles_6211_audit }}"
    register: netrcfiles
    ignore_errors: True
    become: yes
    tags:
      - netrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - Finding users having .netrc files
    shell: "find /home -name '.netrc' 2> /dev/null"
    register: netrcfiles_result
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.11 - creating backup directory
    file:
      path: /etc/ansible/backup/netrcfiles
      state: directory
      mode: '0750'
      recurse: yes
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/netrcfiles"
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.11
      - six
      - remedy
      - all

  - name: 6.2.11 - Removing users having .netrc files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ netrcfiles_result.stdout_lines }}"
    when: netrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - netrcfiles
      - 6.2.11
      - six
      - all
      - remedy

  - name: 6.2.12 - Fetching the grpnetrcfiles value from ansible facts
    shell: echo "{{ ansible_local.grpnetrcfiles_6212_audit }}"
    register: grpnetrcfiles
    ignore_errors: True
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.12 - Listing users .netrc files with permissions
    shell: "find /home/ -name '.netrc' -perm /g+w,o+w"
    register: echo
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.12 - Ensure users' .netrc Files are not group or world writable
    file:
      path: "{{ item }}"
      mode: "go-w"
    loop: "{{ echo.stdout_lines }}"
    when: grpnetrcfiles.stdout.find("FAILED") != -1
    become: yes
    tags:
      - grpnetrcfiles
      - 6.2.12
      - six
      - all
      - remedy

  - name: 6.2.13 - Fetching the rhosts value from ansible facts
    shell: echo "{{ ansible_local.rhosts_6213_audit }}"
    register: rhosts
    ignore_errors: True
    become: yes
    tags:
      - rhosts
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.13 - Finding users having .rhosts files
    shell: "find /home -name '.rhosts'"
    register: rhosts_result
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - creating backup directory
    file:
      path: /etc/ansible/backup/rhosts
      state: directory
      mode: '0750'
      recurse: yes
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - creating backup directory
    shell: "cp --parents -r '{{item}}' /etc/ansible/backup/rhosts"
    loop: "{{ rhosts_result.stdout_lines }}"
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.13
      - six
      - remedy
      - all

  - name: 6.2.13 - Removing .rhosts files
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ rhosts_result.stdout_lines }}"      
    when: rhosts.stdout.find("FAILED") != -1
    become: yes
    tags:
      - rhosts
      - 6.2.13
      - six
      - all
      - remedy

  - name: 6.2.14 - Fetching the group value from ansible facts
    shell: echo "{{ ansible_local.groups_6214_audit }}"
    register: group
    ignore_errors: True
    become: yes
    tags:
      - groups
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.14 - Ensure all groups in /etc/passwd exist in /etc/group
    shell: |
        for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:[^:]*:$i:" /etc/group
            if [ $? -ne 0 ]; then
              a=$(grep $i /etc/passwd | awk -F: '{print $1}')
              groupadd $a
              usermod -g $a $a
            fi
        done
    when: group.stdout.find("FAILED") != -1
    become: yes
    tags:
      - groups
      - 6.2.14
      - six
      - all
      - remedy

  - name: 6.2.15 - Fetching the duplicateuid value from ansible facts
    shell: echo "{{ ansible_local.duplicateuid_6215_audit }}"
    register: duplicateuid
    ignore_errors: True
    become: yes
    tags:
      - duplicateuid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Ensure no duplicate UIDs exist
    shell: "cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Ensure no duplicate UIDs exist
    shell: "a=$(cat /etc/passwd | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1' || true"
    register: user
    when:
    - duplicateuid.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Ensure no duplicate UIDs exist
    shell: "b=$(grep '/home/' /etc/passwd | cut -d':' -f3 |  sort -n | tail -n 1) && c=$(( $b+1 )) && echo $c || true"
    when:
    - duplicateuid.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    register: val
    become: yes
    tags:
      - duplicateuid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.15 - Ensure no duplicate UIDs exist
    user:
      name: "{{ user.stdout }}"
      uid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicateuid.stdout.find("FAILED") != -1 
    - item != ""
    become: yes
    tags:
      - duplicateuid
      - 6.2.15
      - six
      - all
      - remedy

  - name: 6.2.16 - Fetching the duplicategid value from ansible facts
    shell: echo "{{ ansible_local.duplicategid_6216_audit }}"
    register: duplicategid
    ignore_errors: True
    become: yes
    tags:
      - duplicategid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Ensure no duplicate GIDs exist
    shell: "cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategid.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Ensure no duplicate GIDs exist
    shell: "a=$(cat /etc/group | cut -f3 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: user
    when:
    - duplicategid.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Ensure no duplicate GIDs exist
    shell: "b=$(cut -f 3 -d: /etc/group | awk '$1<5000 {print $1}' | sort -n | tail -n 1) && c=$(($b+1)) && echo $c"
    register: val
    when: 
    - duplicategid.stdout.find("FAILED") != -1
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.16 - Ensure no duplicate GIDs exist
    group:
      name: "{{ user.stdout }}"
      gid: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when: 
    - duplicategid.stdout.find("FAILED") != -1
    - item != ""
    become: yes
    tags:
      - duplicategid
      - 6.2.16
      - six
      - all
      - remedy

  - name: 6.2.17 - Fetching the duplicateuser value from ansible facts
    shell: echo "{{ ansible_local.duplicateuser_6217_audit }}"
    register: duplicateuser
    ignore_errors: True
    become: yes
    tags:
      - duplicateuser
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Ensure no duplicate user names exist
    shell: "cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicateuser.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicateuser
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Ensure no duplicate user names exist
    shell: "a=$(cat /etc/passwd | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/passwd | awk -F: '{print $1}'| awk 'FNR != 1'"
    register: val
    when:
    - duplicateuser.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.17 - Ensure no duplicate user names exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicateuser.stdout.find("FAILED") != -1 
    - item != ""
    become: yes
    tags:
      - duplicateuser
      - 6.2.17
      - six
      - all
      - remedy

  - name: 6.2.18 - Fetching the duplicategroup value from ansible facts
    shell: echo "{{ ansible_local.duplicategroup_6218_audit }}"
    register: duplicategroup
    ignore_errors: True
    become: yes
    tags:
      - duplicategroup
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Ensure no duplicate group names exist
    shell: "cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}'"
    register: echo
    when: duplicategroup.stdout.find("FAILED") != -1
    become: yes
    tags:
      - duplicategroup
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Ensure no duplicate group names exist
    shell: "a=$(cat /etc/group | cut -f1 -d':' | sort | uniq -c | awk '$1 > 1 {print $2}') && grep $a /etc/group | awk -F: '{print $1}' | awk 'FNR != 1'"
    register: val
    when:
    - duplicategroup.stdout.find("FAILED") != -1 
    - echo.stdout != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.18 - Ensure no duplicate group names exist
    debug:
      msg: "{{ val.stdout }}"
    loop: "{{ echo.stdout_lines }}"
    when:
    - duplicategroup.stdout.find("FAILED") != -1 
    - item != ""
    become: yes
    tags:
      - duplicategroup
      - 6.2.18
      - six
      - all
      - remedy

  - name: 6.2.19 - Fetching the shadowgroup value from ansible facts
    shell: echo "{{ ansible_local.shadowgroup_6219_audit }}"
    register: shadowgroup
    ignore_errors: True
    become: yes
    tags:
      - shadowgroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.19 - Ensure shadow group is empty
    shell: |
       a=$(cat /etc/group | grep "^shadow" | awk -F: '{print $3}')
       if [ $(cat /etc/group | grep "^shadow" | wc -l) -gt 0 ]; then
           for i in $(cat /etc/passwd | cut -d, -f1-3 | grep "$a" | awk -F: '{print $1}'); do
              usermod -g users $i
            done
       fi
    failed_when: no
    when: shadowgroup.stdout.find("FAILED") != -1 
    become: yes
    tags:
      - shadowgroup
      - 6.2.19
      - six
      - all
      - remedy

  - name: 6.2.20 - Fetching the userhdir value from ansible facts
    shell: echo "{{ ansible_local.usershdir_6220_audit }}"
    register: usershdir
    ignore_errors: True
    become: yes
    tags:
      - usershdir
      - 6.2.20
      - six
      - all
      - remedy

  - name: 6.2.20 - Listing users 
    shell: "grep '/home/' /etc/passwd | awk -F: '$3>=500 && $7!=/sbin/nologin && $7!=/bin/false {print $1}'"
    register: echo
    when: usershdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershdir
      - 6.2.20
      - six
      - all
      - remedy

  - name: 6.2.20 - Configuring the users directories with permissions
    file:
      path: "/home/{{ item }}"
      state: directory
      mode: 0700
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ echo.stdout_lines }}"
    when: usershdir.stdout.find("FAILED") != -1
    become: yes
    tags:
      - usershdir
      - 6.2.20
      - six
      - all
      - remedy

  - name: 1.9 - Fetching the updates value from ansible facts
    shell: echo "{{ ansible_local.updates_19_audit }}"
    register: updates
    ignore_errors: True
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - all
      - remedy

  - name: 1.9 - Updating all packages
    yum:
      name: "*"
      state: latest
    failed_when: no
    when: updates.stdout.find("FAILED") != -1
    become: yes
    tags:
      - '1.9'
      - updates
      - one
      - all
      - remedy

  - name: Include Database
    include: tasks/after_linux.yml
